<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>為 Ngnix 建立自行簽章的憑證</title>
    <url>/2013/10/17/creating-a-self-signed-ssl-certificate-for-nginx/</url>
    <content><![CDATA[<h3 id="必要條件"><a href="#必要條件" class="headerlink" title="必要條件"></a>必要條件</h3><p>產生憑證需要 OpenSSL 類別庫，請先確認系統是否已安裝 OpenSSL。</p>
<p>若尚未安裝，可透過以下方式安裝：</p>
<ul>
<li><p>Mac OS X 使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a> 安裝</p>
<pre class="line-numbers language-none"><code class="language-none">$ brew install openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>Windows 可到此網站下載安裝檔：<a href="http://www.slproweb.com/products/Win32OpenSSL.html">OpenSSL for Windows </a></p>
</li>
<li><p>Ubuntu/Debian Linux</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>RedHat/CentOS Linux</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo yum install openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<h3 id="步驟一：建立存放憑證的資料夾"><a href="#步驟一：建立存放憑證的資料夾" class="headerlink" title="步驟一：建立存放憑證的資料夾"></a>步驟一：建立存放憑證的資料夾</h3><pre class="line-numbers language-none"><code class="language-none">$ mkdir &#x2F;etc&#x2F;nginx&#x2F;ssl
$ cd &#x2F;etc&#x2F;nginx&#x2F;ssl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="步驟二：建立伺服器私鑰及憑證"><a href="#步驟二：建立伺服器私鑰及憑證" class="headerlink" title="步驟二：建立伺服器私鑰及憑證"></a>步驟二：建立伺服器私鑰及憑證</h3><h5 id="建立伺服器私鑰"><a href="#建立伺服器私鑰" class="headerlink" title="建立伺服器私鑰"></a>建立伺服器私鑰</h5><p>開始建立伺服器私鑰。過程中，將會提示輸入密碼，請牢記此密碼，若忘記或遺失該密碼，將無法存取憑證。</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo openssl genrsa -des3 -out server.key 2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以下為建立私鑰時可能會看到的訊息</p>
<pre class="line-numbers language-none"><code class="language-none">Generating RSA private key, 2048 bit long modulus
....................+++
..............................................................+++
e is 65537 (0x10001)
Enter pass phrase for server.key:
Verifying - Enter pass phrase for server.key:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="建立伺服器憑證"><a href="#建立伺服器憑證" class="headerlink" title="建立伺服器憑證"></a>建立伺服器憑證</h5><p>建立時會詢問私鑰密碼，若密碼不正確便無法建立憑證。<br>建立憑證時，最重要的欄位為 <strong>Common Name</strong>。請在此輸入網域名稱，若沒有網域名稱則輸入網站 IP。並請不要填寫 challenge password 及 optional company name 欄位。</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo openssl req -new -key server.key -out server.csr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以下為建立憑證時可能會看到的訊息</p>
<pre class="line-numbers language-none"><code class="language-none">Enter pass phrase for server.key:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [AU]: TW
State or Province Name (full name) [Some-State]: Taipei
Locality Name (eg, city) []: Taipei
Organization Name (eg, company) [Internet Widgits Pty Ltd]: Example Inc
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []: example.com
Email Address []: admin@example.com

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="步驟三：移除伺服器私鑰密碼-Passphrase"><a href="#步驟三：移除伺服器私鑰密碼-Passphrase" class="headerlink" title="步驟三：移除伺服器私鑰密碼(Passphrase)"></a>步驟三：移除伺服器私鑰密碼(Passphrase)</h3><p>雖然密碼可提供高度的安全性，但若有人重載 nginx 則會產生問題。在 nginx 崩潰或需要重新啟動時，永遠都需要輸入密碼才能使網頁伺服器上線。</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo cp server.key server.key.origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ sudo openssl rsa -in server.key.org -out server.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="步驟四：為憑證簽章"><a href="#步驟四：為憑證簽章" class="headerlink" title="步驟四：為憑證簽章"></a>步驟四：為憑證簽章</h3><p>可以自行指定該憑證有效期限，在此範例中憑證為 1 年後到期。</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>現在所需的憑證已產生完畢！</p>
<h3 id="步驟五：設定憑證"><a href="#步驟五：設定憑證" class="headerlink" title="步驟五：設定憑證"></a>步驟五：設定憑證</h3><p>開啟 nginx 設定檔，加入以下設定，請記得將 <strong>server_name</strong> 改為網域名稱或 IP。</p>
<pre class="line-numbers language-none"><code class="language-none"># HTTPS server

server &#123;
    listen       443;
    server_name example.com;

    ssl on;
    ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;server.crt;
    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;server.key;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重新啟動 nginx</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>前往 <a href="https://domain_name/">https://domain_name</a> 將會看到自行簽章的憑證。</p>
]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSL</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 jQuery Validation Plugin 驗證元素陣列</title>
    <url>/2013/10/20/jquery-validation-plugin-for-array-of-elements/</url>
    <content><![CDATA[<p>有時候我們會需要驗證表單中的元素陣列，例如：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDataForm<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDataForm<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- User 1 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddress1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddress[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex[]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>- 請選擇 -<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    …
  <span class="token comment">&lt;!-- User 2 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddress2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddress[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex[]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>- 請選擇 -<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    …
  <span class="token comment">&lt;!-- User N --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userNameN<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddressN<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddress[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sexN<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex[]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>- 請選擇 -<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    …
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>現在，使用 jQuery Validation Plugin 來驗證此表單。驗證條件為使用者必須填寫各輸入欄位，驗證語法如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jquery.validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userDataForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    rules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string">"userName[]"</span><span class="token operator">:</span> <span class="token string">"required"</span><span class="token punctuation">,</span>
      <span class="token string">"userAddress[]"</span><span class="token operator">:</span> <span class="token string">"required"</span><span class="token punctuation">,</span>
      <span class="token string">"sex[]"</span><span class="token operator">:</span> <span class="token string">"required"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    messages<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string">"userName[]"</span><span class="token operator">:</span> <span class="token string">"請輸入姓名"</span><span class="token punctuation">,</span>
      <span class="token string">"userAddress[]"</span><span class="token operator">:</span> <span class="token string">"請輸入地址"</span><span class="token punctuation">,</span>
      <span class="token string">"sex[]"</span><span class="token operator">:</span> <span class="token string">"請選擇性別"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用以上的語法會遇到的問題是 jquery.validate.js 僅有驗證 userName 及 userAddress 陣列的第一個元素，所以我們需要對此插件做點小修改。</p>
<p>開啟  jquery.validate.js，可以找到名為 checkForm 的方法，內容如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>jquery.validate.js</span></div><code class="language-javascript"><span class="token function-variable function">checkForm</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> elements <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentElements <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將此方法修改為如下的內容後，便會驗證陣列中的所有元素。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>jquery.validate.js</span></div><code class="language-javascript"><span class="token function-variable function">checkForm</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> elements <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentElements <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：<a href="http://www.codeboss.in/web-funda/2009/05/27/jquery-validation-for-array-of-input-elements/">JQuery Validation for Array of Input Elements</a></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS X 延長 SSD 壽命</title>
    <url>/2013/10/26/mac-os-x-ssd-performance-optimization/</url>
    <content><![CDATA[<p>由於有時候會重灌電腦，所以在這記錄一下重灌之後要延長 SSD 所做的步驟。</p>
<h3 id="關閉-Time-Machine-的本機備份模式"><a href="#關閉-Time-Machine-的本機備份模式" class="headerlink" title="關閉 Time Machine 的本機備份模式"></a>關閉 Time Machine 的本機備份模式</h3><p>如果有開啟 Time Machine 功能，當備份磁碟無法使用時，系統還是會每小時建立快照摒除存在本機硬碟，使用以下指令可以禁止系統在本機備份檔案</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> tmutil disablelocal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>往後也可以使用以下的指令重新開啟這個功能</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> tmutil enablelocal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="設定-noatime-掛載"><a href="#設定-noatime-掛載" class="headerlink" title="設定 noatime 掛載"></a>設定 noatime 掛載</h3><p>Unix like 的作業系統，會在每次存取檔案時修改 Access time 的屬性，可以令如 Spotlight 的程式找到最近存取的檔案。但是每次存取檔案時皆會對硬碟寫入資料，對有存取次數限制的 SSD 來說便會縮短壽命，以下的步驟可以取消記錄存取時間。</p>
<ol>
<li><p>在家目錄建立 com.disk.noatime.plist 檔案，內容如下：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">plist</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="token string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plist</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>com.disk.noatime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>ProgramArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>mount<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>-vuwo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>noatime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>RunAtLoad<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>搬移檔案到 LaunchDaemons 資料夾</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mv</span> ~/com.disk.noatime.plist /Library/LaunchDaemons/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>變更 com.disk.noatime.plist 檔案擁有者</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">chown</span> root:wheel /Library/LaunchDaemons/com.disk.noatime.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>重開機後，於終端機內輸入 mount 看到 noatime 代表已使用 noatime 掛載</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mount</span>
/dev/disk0s2 on / <span class="token punctuation">(</span>hfs, local, journaled, noatime<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="變更睡眠時資料儲存位置"><a href="#變更睡眠時資料儲存位置" class="headerlink" title="變更睡眠時資料儲存位置"></a>變更睡眠時資料儲存位置</h3><p>當系統進入睡眠狀態時，OS X 預設將資料保存於記憶體內，另外再將記憶體資料寫入硬碟，防止電腦沒電時資料遺失。<br>假設記憶體有 8 GB，代表睡眠時若電腦電力不足都會將 8 GB 資料寫入硬碟，長期下來 SSD 的壽命將會大打折扣，因此我們要變更睡眠時的資料存放位置，改為只存於記憶體中，但若是電腦沒電時，資料便會遺失。</p>
<ol>
<li><p>透使用下列指令設定睡眠時只存在記憶體</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> pmset -a hibernatemode <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>刪除在硬碟上的睡眠備份檔</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">rm</span> /var/vm/sleepimage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若要改回預設的模式，則輸入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> pmset -a hibernatemode <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>輸入下列指令可以查看目前模式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> pmset -g <span class="token operator">|</span> <span class="token function">grep</span> hibernatemode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>hibernatemode 0</p>
</li>
<li><p>建立一個空檔案，防止系統再產生 sleepimage<br>建立檔案</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">touch</span> /var/vm/sleepimage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>防止系統修改此檔案</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ chflags uchg /var/vm/sleepimage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 CentOS 6 安裝 Redis</title>
    <url>/2013/11/06/how-to-install-redis-in-centos-6/</url>
    <content><![CDATA[<p>Redis 是一個開源、遵守 BSD 授權、先進的鍵值對儲存庫。它通常被稱為資料結構伺服器，因為值可以是字串(String)、雜湊(Hash)、列表(List)、集合(Set)及序列集合(Sorted Set)等類型。</p>
<ol>
<li><p>下載並解壓縮</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> http://download.redis.io/redis-stable.tar.gz
$ <span class="token function">tar</span> -zxvf redis-stable.tar.gz
$ <span class="token builtin class-name">cd</span> redis-stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>編譯並測試是否可安裝</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">make</span>
$ <span class="token function">make</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>若出現訊息，代表系統尚未安裝 tcl</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> src <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token builtin class-name">test</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Entering directory <span class="token variable"><span class="token variable">`</span>/tmp/redis-stable/src'
You need tcl <span class="token number">8.5</span> or newer <span class="token keyword">in</span> order to run the Redis <span class="token builtin class-name">test</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>test<span class="token punctuation">]</span> Error <span class="token number">1</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Leaving directory <span class="token variable">`</span></span>/tmp/redis-stable/src'
make: *** <span class="token punctuation">[</span>test<span class="token punctuation">]</span> Error <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>tcl 安裝步驟，詳見<a href="http://www.linuxfromscratch.org/blfs/view/cvs/general/tcl.html">官方文件</a></p>
</li>
<li><p>安裝 redis</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">make</span> <span class="token function">install</span>
<span class="token builtin class-name">cd</span> src <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Entering directory <span class="token string">'/tmp/redis-stable/src'</span>
Hint: To run <span class="token string">'make test'</span> is a good idea <span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token function">mkdir</span> -p /usr/local/bin
    INSTALL <span class="token function">install</span>
    INSTALL <span class="token function">install</span>
    INSTALL <span class="token function">install</span>
    INSTALL <span class="token function">install</span>
    INSTALL <span class="token function">install</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Leaving directory `/tmp/redis-stable/src'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>到此，redis 便安裝完畢了，redis 包含了以下幾個部分：</p>
<ul>
<li>redis-server: is the Redis Server itself.</li>
<li>redis-cli: is the command line interface utility to talk with Redis.</li>
<li>redis-benchmark: is used to check Redis performances.</li>
<li>redis-check-aof 及 redis-check-dump:  are useful in the rare event of corrupted data files.</li>
</ul>
</li>
<li><p>啟動 redis<br>最簡單的啟動方式為直接執行 <code>redis-server</code> 且不含任何參數。</p>
</li>
</ol>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ redis-server
<span class="token punctuation">[</span><span class="token number">12182</span><span class="token punctuation">]</span> 06 Nov <span class="token number">13</span>:58:15.841 <span class="token comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span>
<span class="token punctuation">[</span><span class="token number">12182</span><span class="token punctuation">]</span> 06 Nov <span class="token number">13</span>:58:15.842 * Max number of <span class="token function">open</span> files <span class="token builtin class-name">set</span> to <span class="token number">10032</span>
<span class="token punctuation">..</span>.
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span><span class="token number">12182</span><span class="token punctuation">]</span> 06 Nov <span class="token number">13</span>:58:15.843 <span class="token comment"># Server started, Redis version 2.6.16</span>
<span class="token punctuation">[</span><span class="token number">12182</span><span class="token punctuation">]</span> 06 Nov <span class="token number">13</span>:58:15.843 * The server is now ready to accept connections on port <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  若要啟動 redis 並帶入設定檔，只需將設定檔的完整路徑帶入即可，如：redis-server /etc/redis.conf</p>
<ol start="5">
<li>接著加入設定將 redis 作為服務於開機時啟動<br>建立工作目錄</li>
</ol>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mkdir</span> /var/redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  從 utils 資料夾複製啟動腳本到 /etc/init.d/</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cp</span> utils/redis_init_script /etc/init.d/redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  編輯啟動腳本，根據需求修改 REDIS_PORT</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/init.d/redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  複製預設設定檔</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> redis.conf /etc/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  需修改以下幾個項目</p>
<ul>
<li>daemonize: 設定為 yes 讓 redis 可背景執行，預設為 no</li>
<li>port: 根據需求修改連接埠，預設為 6379</li>
<li>loglevel: 根據需求修改要記錄的訊息等級，預設為 notice</li>
<li>logfile: 設定要放置記錄檔的位置，預設為標準輸出(stdout) 不會保留記錄於檔案內</li>
<li>dir: 將工作目錄設定為 /var/redis (<strong>此設定非常重要</strong>)</li>
</ul>
<p>  最後，將啟動腳本加入開機執行</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-rc.d redis defaults<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  現在你可以透過以下指令啟動 redis</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> redis start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 及 MongoDB 集合(Aggregation)指令對應表</title>
    <url>/2013/11/16/sql-to-aggregation-mapping-chart/</url>
    <content><![CDATA[<p>集合管線(<a href="http://docs.mongodb.org/manual/core/aggregation/">aggregation pipeline</a>)允許 MongoDB 提供原生集合功能，對應 SQL 中許多常見的資料集合操作。</p>
<h5 id="下表列出了常見的-SQL-集合術語、功能及概念和相應的-MongoDB-集合運算元概觀。"><a href="#下表列出了常見的-SQL-集合術語、功能及概念和相應的-MongoDB-集合運算元概觀。" class="headerlink" title="下表列出了常見的 SQL 集合術語、功能及概念和相應的 MongoDB 集合運算元概觀。"></a>下表列出了常見的 SQL 集合術語、功能及概念和相應的 MongoDB 集合運算元概觀。</h5><table>
<thead>
<tr>
<th align="left">SQL 術語、功能及概念</th>
<th align="left">MongoDB 集合運算元</th>
</tr>
</thead>
<tbody><tr>
<td align="left">WHERE</td>
<td align="left"><a href="http://docs.mongodb.org/manual/reference/operator/aggregation/match/#pipe._S_match">$match</a></td>
</tr>
<tr>
<td align="left">GROUP BY</td>
<td align="left"><a href="http://docs.mongodb.org/manual/reference/operator/aggregation/group/#pipe._S_group">$group</a></td>
</tr>
<tr>
<td align="left">HAVING</td>
<td align="left"><a href="http://docs.mongodb.org/manual/reference/operator/aggregation/match/#pipe._S_match">$match</a></td>
</tr>
<tr>
<td align="left">SELECT</td>
<td align="left"><a href="http://docs.mongodb.org/manual/reference/operator/aggregation/project/#pipe._S_project">$project</a></td>
</tr>
<tr>
<td align="left">ORDER BY</td>
<td align="left"><a href="http://docs.mongodb.org/manual/reference/operator/aggregation/sort/#pipe._S_sort">$sort</a></td>
</tr>
<tr>
<td align="left">LIMIT</td>
<td align="left"><a href="http://docs.mongodb.org/manual/reference/operator/aggregation/limit/#pipe._S_limit">$limit</a></td>
</tr>
<tr>
<td align="left">SUM()</td>
<td align="left"><a href="http://docs.mongodb.org/manual/reference/operator/aggregation/sum/#grp._S_sum">$sum</a></td>
</tr>
<tr>
<td align="left">COUNT()</td>
<td align="left"><a href="http://docs.mongodb.org/manual/reference/operator/aggregation/sum/#grp._S_sum">$sum</a></td>
</tr>
<tr>
<td align="left">join</td>
<td align="left">沒有直接對應的運算元，然而，<a href="http://docs.mongodb.org/manual/reference/operator/aggregation/unwind/#pipe._S_unwind">$unwind</a> 運算元允許有些類似的功能，但是與嵌入的欄位在文件內。</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="範例-Examples"><a href="#範例-Examples" class="headerlink" title="範例(Examples)"></a>範例(Examples)</h3><h5 id="下表列出了-SQL-集合語句和相應的-MongoDB-語句的快速參考。在表格中的範例假定有下列條件："><a href="#下表列出了-SQL-集合語句和相應的-MongoDB-語句的快速參考。在表格中的範例假定有下列條件：" class="headerlink" title="下表列出了 SQL 集合語句和相應的 MongoDB 語句的快速參考。在表格中的範例假定有下列條件："></a>下表列出了 SQL 集合語句和相應的 MongoDB 語句的快速參考。在表格中的範例假定有下列條件：</h5><ul>
<li><p>SQL 範例假設有兩張資料表 orders 及 order_lineitem，透過 order_lineitem.order_id 及 orders.id 資料行相連結。</p>
</li>
<li><p>MongoDB 範例假設一個名為 orders 的集合，包含的文件原型如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">&#123;
　cust_id: <span class="token string">"abc123"</span><span class="token punctuation">,</span>
　ord_date: ISODate<span class="token punctuation">(</span><span class="token string">"2012-11-02T17:04:11.102Z"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
　<span class="token keyword">status</span>: <span class="token string">'A'</span><span class="token punctuation">,</span>
　price: <span class="token number">50</span><span class="token punctuation">,</span>
　items: <span class="token punctuation">[</span> &#123; sku: <span class="token string">"xxx"</span><span class="token punctuation">,</span> qty: <span class="token number">25</span><span class="token punctuation">,</span> price: <span class="token number">1</span> &#125;<span class="token punctuation">,</span>
　　　　　　&#123; sku: <span class="token string">"yyy"</span><span class="token punctuation">,</span> qty: <span class="token number">25</span><span class="token punctuation">,</span> price: <span class="token number">1</span> &#125; <span class="token punctuation">]</span>
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 語句中集合內的文件的欄位名稱在集合操作時以 $ 字元為字首。</p>
</li>
</ul>
<hr>
<h5 id="計算-orders-所有資料數"><a href="#計算-orders-所有資料數" class="headerlink" title="計算 orders 所有資料數"></a>計算 orders 所有資料數</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> count
<span class="token keyword">FROM</span> orders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token boolean">null</span><span class="token punctuation">,</span>
　　　　　　　count: &#123; $sum: <span class="token number">1</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="加總-orders-的-price-欄位"><a href="#加總-orders-的-price-欄位" class="headerlink" title="加總 orders 的 price 欄位"></a>加總 orders 的 price 欄位</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total
<span class="token keyword">FROM</span> orders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token boolean">null</span><span class="token punctuation">,</span>
　　　　　　　total: &#123; $sum: <span class="token string">"$price"</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="對不同的-cust-id-加總-price-欄位"><a href="#對不同的-cust-id-加總-price-欄位" class="headerlink" title="對不同的 cust_id 加總 price 欄位"></a>對不同的 cust_id 加總 price 欄位</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>
　　　　<span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total
<span class="token keyword">FROM</span> orders
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　total: &#123; $sum: <span class="token string">"$price"</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="對不同的-cust-id-加總-price-欄位，並依照加總排序"><a href="#對不同的-cust-id-加總-price-欄位，並依照加總排序" class="headerlink" title="對不同的 cust_id 加總 price 欄位，並依照加總排序"></a>對不同的 cust_id 加總 price 欄位，並依照加總排序</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>
　　　　<span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total
<span class="token keyword">FROM</span> orders
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　total: &#123; $sum: <span class="token string">"$price"</span> &#125; &#125; &#125;<span class="token punctuation">,</span>
　&#123; $sort: &#123; total: <span class="token number">1</span> &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="對不同的-cust-id-及-ord-date-分組，加總-price-欄位"><a href="#對不同的-cust-id-及-ord-date-分組，加總-price-欄位" class="headerlink" title="對不同的 cust_id 及 ord_date 分組，加總 price 欄位"></a>對不同的 cust_id 及 ord_date 分組，加總 price 欄位</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>
　　　　ord_date<span class="token punctuation">,</span>
　　　　<span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total
<span class="token keyword">FROM</span> orders
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token punctuation">,</span> ord_date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: &#123; cust_id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　　　　　ord_date: <span class="token string">"$ord_date"</span> &#125;<span class="token punctuation">,</span>
　　　　　　　total: &#123; $sum: <span class="token string">"$price"</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="對於-cust-id-的多筆資料，返回-cust-id-和相應的資料數"><a href="#對於-cust-id-的多筆資料，返回-cust-id-和相應的資料數" class="headerlink" title="對於 cust_id 的多筆資料，返回 cust_id 和相應的資料數"></a>對於 cust_id 的多筆資料，返回 cust_id 和相應的資料數</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> orders
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id
<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　count: &#123; $sum: <span class="token number">1</span> &#125; &#125; &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">match</span>: &#123; count: &#123; $gt: <span class="token number">1</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="對不同的-cust-id-及-ord-date-分組，加總-price-欄位，並只返回總和大於-250-的資料"><a href="#對不同的-cust-id-及-ord-date-分組，加總-price-欄位，並只返回總和大於-250-的資料" class="headerlink" title="對不同的 cust_id 及 ord_date 分組，加總 price 欄位，並只返回總和大於 250 的資料"></a>對不同的 cust_id 及 ord_date 分組，加總 price 欄位，並只返回總和大於 250 的資料</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>
　　　　ord_date<span class="token punctuation">,</span>
　　　　<span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total
<span class="token keyword">FROM</span> orders
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token punctuation">,</span> ord_date
<span class="token keyword">HAVING</span> total <span class="token operator">></span> <span class="token number">250</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: &#123; cust_id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　　　　　ord_date: <span class="token string">"$ord_date"</span> &#125;<span class="token punctuation">,</span>
　　　　　　　total: &#123; $sum: <span class="token string">"$price"</span> &#125; &#125; &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">match</span>: &#123; total: &#123; $gt: <span class="token number">250</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="對-status-為-A-的不同的-cust-id-加總-price-欄位"><a href="#對-status-為-A-的不同的-cust-id-加總-price-欄位" class="headerlink" title="對 status 為 A 的不同的 cust_id 加總 price 欄位"></a>對 status 為 A 的不同的 cust_id 加總 price 欄位</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>
　　　　<span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> total
<span class="token keyword">FROM</span> orders
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'A'</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">match</span>: &#123; <span class="token keyword">status</span>: <span class="token string">'A'</span> &#125; &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　total: &#123; $sum: <span class="token string">"$price"</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="對-status-為-A-的不同的-cust-id-加總-price-欄位，並只返回總和大於-250-的資料"><a href="#對-status-為-A-的不同的-cust-id-加總-price-欄位，並只返回總和大於-250-的資料" class="headerlink" title="對 status 為 A 的不同的 cust_id 加總 price 欄位，並只返回總和大於 250 的資料"></a>對 status 為 A 的不同的 cust_id 加總 price 欄位，並只返回總和大於 250 的資料</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>
　　　　<span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> total
<span class="token keyword">FROM</span> orders
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'A'</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id
<span class="token keyword">HAVING</span> total <span class="token operator">></span> <span class="token number">250</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">match</span>: &#123; <span class="token keyword">status</span>: <span class="token string">'A'</span> &#125; &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　total: &#123; $sum: <span class="token string">"$price"</span> &#125; &#125; &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">match</span>: &#123; total: &#123; $gt: <span class="token number">250</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="對不同的-cust-id-加總與-orders-相應的-order-lineitem-的-qty-欄位"><a href="#對不同的-cust-id-加總與-orders-相應的-order-lineitem-的-qty-欄位" class="headerlink" title="對不同的 cust_id 加總與 orders 相應的 order_lineitem 的 qty 欄位"></a>對不同的 cust_id 加總與 orders 相應的 order_lineitem 的 qty 欄位</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>
　　　　<span class="token function">SUM</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>qty<span class="token punctuation">)</span> <span class="token keyword">as</span> qty
<span class="token keyword">FROM</span> orders o<span class="token punctuation">,</span>
　　　order_lineitem li
<span class="token keyword">WHERE</span> li<span class="token punctuation">.</span>order_id <span class="token operator">=</span> o<span class="token punctuation">.</span>id
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $unwind: <span class="token string">"$items"</span> &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　qty: &#123; $sum: <span class="token string">"$items.qty"</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<hr>
<h5 id="計算不同的-cust-id-及-ord-date-分組數量"><a href="#計算不同的-cust-id-及-ord-date-分組數量" class="headerlink" title="計算不同的 cust_id 及 ord_date 分組數量"></a>計算不同的 cust_id 及 ord_date 分組數量</h5><ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> ord_date
　　　<span class="token keyword">FROM</span> orders
　　　<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token punctuation">,</span> ord_date<span class="token punctuation">)</span> <span class="token keyword">as</span> DerivedTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: &#123; cust_id: <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>
　　　　　　　　　　　ord_date: <span class="token string">"$ord_date"</span> &#125; &#125; &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">group</span>: &#123; _id: <span class="token boolean">null</span><span class="token punctuation">,</span> count: &#123; $sum: <span class="token number">1</span> &#125; &#125; &#125;
<span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>NoSQL</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>看懂 npm 語意化版本</title>
    <url>/2014/08/20/npm-semantic-versioner/</url>
    <content><![CDATA[<p>npm(Node Package Manager) 採用語意化版本 2.0.0 規範，詳細的規範內容可查看 <a href="http://semver.org/">http://semver.org/</a>。</p>
<p>使用 npm 管理套件時，你會注意到 package.json 內的套件版本有許多表示法，以下說明各表示法所代表的意思：</p>
<table>
<thead>
<tr>
<th align="left">版本</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>1.2.3</code></td>
<td align="left">指定版本。需為完整的版號，包含<strong>主版號</strong>、<strong>次版號</strong>及<strong>修訂號</strong>。<br/>需注意的是，版本編譯資訊（Metadata）會被忽略，所以 <code>1.2.3+build2012</code> 滿足此條件。</td>
</tr>
<tr>
<td align="left"><code>&gt;1.2.3</code></td>
<td align="left">大於指定版本。</td>
</tr>
<tr>
<td align="left"><code>&lt;1.2.3</code></td>
<td align="left">小於指定版本。如果沒有預先發佈版在此版本範圍，則沒有預先發佈版會被允許，即使在技術上是「小於」。</td>
</tr>
<tr>
<td align="left"><code>&gt;=1.2.3</code></td>
<td align="left">大於或等於。需注意的是，預先發佈版不等同其版本。<br/>因此 <code>1.2.3-beta</code> 不滿足此條件，但 <code>2.3.0-beta</code> 則會。</td>
</tr>
<tr>
<td align="left"><code>&lt;=1.2.3</code></td>
<td align="left">小於或等於。在這種情況下，允許預先發佈版，所以 <code>1.2.3-beta</code> 滿足此條件。</td>
</tr>
<tr>
<td align="left"><code>1.2.3 - 2.3.4</code></td>
<td align="left">等同於 <code>&gt;=1.2.3 &lt;=2.3.4</code>。</td>
</tr>
<tr>
<td align="left"><code>~1.2.3</code></td>
<td align="left">等同於 <code>&gt;=1.2.3-0 &lt;1.3.0-0</code>，當使用 ~ 符號時，支援預先發佈版，但不含次版號的變更（及其預先發佈版）。<br/>因此 <code>1.3.0-beta</code> 不滿足 <code>~1.2.3</code>。</td>
</tr>
<tr>
<td align="left"><code>^1.2.3</code></td>
<td align="left">等同於 <code>&gt;=1.2.3-0 &lt;2.0.0-0</code>，當使用 ^ 符號時，支援任何次版號及修訂號的變更（含預先發佈版），但不含主版號的變更（及其預先發佈版）。<br/>因此 <code>1.5.1</code> 能滿足 <code>^1.2.3</code>，而 <code>1.2.2</code> 及 <code>2.0.0-beta</code> 則不會。</td>
</tr>
<tr>
<td align="left"><code>^0.1.3</code></td>
<td align="left">等同於 <code>0.1.3</code>，與 0.1.3 版相容。0.x.x 版比較特殊，因為語意化版本規範規定 0.x.x 版不作任何穩定性保證，只有指定的版本被認為是有效的。</td>
</tr>
<tr>
<td align="left"><code>~0.0.2</code></td>
<td align="left">等同於 <code>0.0.2</code>，與 0.0.2 版相容。</td>
</tr>
<tr>
<td align="left"><code>~1.2</code></td>
<td align="left">等同於 <code>&gt;=1.2.0-0 &lt;1.3.0-0</code>，任何從 1.2 開始的版本。</td>
</tr>
<tr>
<td align="left"><code>^1.2</code></td>
<td align="left">等同於 <code>&gt;=1.2.0-0 &lt;1.3.0-0</code>，任何相容於從 1.2 開始的版本。</td>
</tr>
<tr>
<td align="left"><code>1.2.x</code></td>
<td align="left">等同於 <code>&gt;=1.2.0-0 &lt;1.3.0-0</code>，任何從 1.2 開始的版本。</td>
</tr>
<tr>
<td align="left"><code>1.2.*</code></td>
<td align="left">等同於 <code>1.2.x</code>。</td>
</tr>
<tr>
<td align="left"><code>1.2</code></td>
<td align="left">等同於 <code>1.2.x</code>。</td>
</tr>
<tr>
<td align="left"><code>~1</code></td>
<td align="left">等同於 <code>&gt;=1.0.0-0 &lt;2.0.0-0</code>，任何從 1 開始的版本。</td>
</tr>
<tr>
<td align="left"><code>^1</code></td>
<td align="left">等同於 <code>&gt;=1.0.0-0 &lt;2.0.0-0</code>，任何相容於從 1 開始的版本。</td>
</tr>
<tr>
<td align="left"><code>1.x</code></td>
<td align="left">等同於 <code>&gt;=1.0.0-0 &lt;2.0.0-0</code>，任何從 1 開始的版本。</td>
</tr>
<tr>
<td align="left"><code>1.*</code></td>
<td align="left">等同於 <code>1.x</code>。</td>
</tr>
<tr>
<td align="left"><code>1</code></td>
<td align="left">等同於 <code>1.x</code>。</td>
</tr>
<tr>
<td align="left"><code>*</code></td>
<td align="left">任何版本。</td>
</tr>
<tr>
<td align="left"><code>x</code></td>
<td align="left">等同於 <code>*</code>。</td>
</tr>
<tr>
<td align="left"><code>&quot;&quot;</code></td>
<td align="left">空字串，等同於 <code>*</code>。</td>
</tr>
</tbody></table>
<p>官方文件：<a href="https://www.npmjs.org/doc/misc/semver.html">The semantic versioner for npm</a></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>npm</tag>
        <tag>SemVer</tag>
      </tags>
  </entry>
  <entry>
    <title>修正 FacebookSDK 使用 Advertising Identifier(IDFA) 造成的 App 退審</title>
    <url>/2014/08/23/revised-app-rejected-because-of-idfa-in-facebooksdk/</url>
    <content><![CDATA[<p>這次 App 送審被 Apple 以違反 PLA 3.3.12 而退審，內容大致上是說 Advertising Identifier(IDFA) 僅可基於廣告目的使用於應用程式內，但審核團隊沒發現需用 IDFA 來呈現廣告的地方。</p>
<p>因送審的 App 內僅使用 iAd，而 iAd 是不需 AdSupport framework、ASIdentifierManager 或 Advertising Identifier 的，所以唯一的可能性就是第三方 Framework 使用了 IDFA。</p>
<p>Apple 在退審原因內提示可透過 <strong>strings</strong> 或 <strong>otool</strong> 指令來幫忙找出問題點，最終揪出兇手就是 FacebookSDK，在 <a href="https://github.com/facebook/facebook-ios-sdk/blob/343e2499965d69ff4c4c2950628a3867b1b1d075/src/Core/FBUtility.m"><code>FBUtility.m</code></a> 引入了 <a href="https://github.com/facebook/facebook-ios-sdk/blob/343e2499965d69ff4c4c2950628a3867b1b1d075/src/Core/FBUtility.m#L28"><code>AdSupport</code></a> 並使用 <a href="https://github.com/facebook/facebook-ios-sdk/blob/343e2499965d69ff4c4c2950628a3867b1b1d075/src/Core/FBUtility.m#L287"><code>advertisingIdentifier</code></a>。</p>
<p>暫時的解決方法如下：</p>
<ol>
<li><p>git clone <a href="https://github.com/facebook/facebook-ios-sdk">FacebookSDK</a> 到本機</p>
</li>
<li><p>開啟 <code>src/Core/FBUtility.m</code>，將此行註解</p>
<pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">&#x2F;&#x2F;#import &lt;AdSupport&#x2F;AdSupport.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>將</p>
<pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">+ (NSString *)advertiserID &#123;
    NSString *advertiserID &#x3D; nil;
    Class ASIdentifierManagerClass &#x3D; [FBDynamicFrameworkLoader loadClass:@&quot;ASIdentifierManager&quot;     withFramework:@&quot;AdSupport&quot;];
    if ([ASIdentifierManagerClass class]) &#123;
        ASIdentifierManager *manager &#x3D; [ASIdentifierManagerClass sharedManager];
        advertiserID &#x3D; [[manager advertisingIdentifier] UUIDString];
    &#125;
    return advertiserID;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>改為</p>
<pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">+ (NSString *)advertiserID &#123;
    return @&quot;&quot;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>將</p>
<pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">+ (FBAdvertisingTrackingStatus)advertisingTrackingStatus &#123;
    if ([FBSettings restrictedTreatment] &#x3D;&#x3D; FBRestrictedTreatmentYES) &#123;
        return AdvertisingTrackingDisallowed;
    &#125;
    FBAdvertisingTrackingStatus status &#x3D; AdvertisingTrackingUnspecified;
    Class ASIdentifierManagerClass &#x3D; [FBDynamicFrameworkLoader loadClass:@&quot;ASIdentifierManager&quot; withFramework:@&quot;AdSupport&quot;];
    if ([ASIdentifierManagerClass class]) &#123;
        ASIdentifierManager *manager &#x3D; [ASIdentifierManagerClass sharedManager];
        if (manager) &#123;
            status &#x3D; [manager isAdvertisingTrackingEnabled] ? AdvertisingTrackingAllowed : AdvertisingTrackingDisallowed;
        &#125;
    &#125;
    return status;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>改為</p>
<pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">+ (FBAdvertisingTrackingStatus)advertisingTrackingStatus &#123;
    return AdvertisingTrackingDisallowed;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>使用 <code>scripts/build_framework.sh</code> 重新打包 FacebookSDK。</p>
</li>
<li><p>返回原專案引用新打包的 FacebookSDK 重建 App 並送審。</p>
</li>
</ol>
<p><strong>註：若 App 內使用了 iAd 以外的廣告服務且廣告有正常顯示，應該不會因違反 PLA 3.3.12 而退審。</strong></p>
<p>參考資料：</p>
<ul>
<li>Stack Overflow：<a href="http://stackoverflow.com/questions/21574680/app-rejected-because-of-advertisingidentifier-in-facebook-sdk-and-flurry-sdk">app rejected because of advertisingIdentifier in Facebook SDK and Flurry SDK</a></li>
<li>Github：<a href="https://github.com/facebook/facebook-ios-sdk/issues/583">Rejection for ASIdentifierManager</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>了解 GitHub Flow</title>
    <url>/2014/09/21/understanding-the-github-flow/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>GitHub</strong> — <a href="https://guides.github.com/introduction/flow/index.html">Understanding the GitHub Flow</a></p>
</blockquote>
<p>GitHub Flow 是一個基於分支的輕量化工作流程，幫助團隊及專案定期的進行部署。</p>
<img src="/2014/09/21/understanding-the-github-flow/create_a_branch.png" class="">

<p>在進行一項專案時，任何時候你可能會有一堆不同功能或想法，有些已經準備好了，而另有些則沒有。分支的存在是為了幫助你管理這些工作流程。</p>
<p>當你在專案建立一個分支，代表建立了一個環境來測試你的新想法。在分支所做的修改不會影響 <code>master</code> 分支，所以可以自由的嘗試並提交修改。你可以放心，分支不會被合併，直到準備將它交由某位協同者來檢查。</p>
<h3 id="進階提示"><a href="#進階提示" class="headerlink" title="進階提示"></a>進階提示</h3><p>整個 GitHub Flow 是基於分支，它是 Git 的一個核心概念。這裡只有一個規則：任何在 <code>master</code> 分支中的都是可部署的。</p>
<p>正因為如此，當在進行一個功能或修復時，分離新分支與 master 是非常重要的。分支名稱應該具有描述性（如 <code>refactor-authentication</code>、<code>user-content-cache-key</code> 或 <code>make-retina-avatars</code>），讓其他人知道哪些正在進行中。</p>
<img src="/2014/09/21/understanding-the-github-flow/add_commits.png" class="">

<p>一旦你的分支已經建立，是時候開始進行修改。無論你何時新增、修改或刪除檔案，你會提交更新並將它們加入分支。加入提交的過程讓你可以追蹤分支的工作進度。</p>
<p>提交也產生了一個透明的工作記錄，讓其他人可以了解你做了些什麼，以及原因。每個提交都有相關的提交訊息，用以解釋為什麼做了修改。此外，每個提交被視為一個修改的獨立個體。這使你在找到錯誤或決定朝不同方向時可以復原修改。</p>
<h3 id="進階提示-1"><a href="#進階提示-1" class="headerlink" title="進階提示"></a>進階提示</h3><p>提交訊息是很重要的，尤其當 Git 追蹤你的修改並顯示這些提交於伺服器上。透過撰寫清楚的提交訊息，你可以更容易讓其他人了解並提供回饋。</p>
<img src="/2014/09/21/understanding-the-github-flow/open_a_pull_request.png" class="">

<p>Pull Requests 發起了關於提交的討論。因為它們緊密的與底層的 Git 儲存庫結合，任何人都可以清楚的看到如果他們接受你的請求，將會合併什麼修改。</p>
<p>在任何的開發過程中，你可以開啟一個 Pull Request：當你有些許或沒有程式碼，但想分享一些截圖或想法，當你卡住了，需要幫助或建議，或者當你準備好讓某人來檢查你的工作。在 Pull Request 訊息內使用 GitHub 的 <code>@</code> 提及系統，可以要求某個人或團隊的回饋，無論他們身在何處。</p>
<h3 id="進階提示-2"><a href="#進階提示-2" class="headerlink" title="進階提示"></a>進階提示</h3><p>Pull Requests 對於協作開源專案和管理共享儲存庫的修改很有用。如果你使用的是 Fork 及 Pull 模式，Pull Requests 提供了一個方法來通知專案維護者關於你所做的修改。如果你使用的是共享儲存庫模式，Pull Requests 協助在合併到 master 分支前的程式碼檢閱和討論關於修改的建議。</p>
<img src="/2014/09/21/understanding-the-github-flow/discuss_and_review_your_code.png" class="">

<p>一旦 Pull Request 被開啟，檢閱修改的人或團隊可能會有問題或意見。也許是程式碼風格不符合專案指引、缺少單元測試，或者也許一切看起來都不錯且狀況良好。Pull Requests 旨在鼓勵這種類型的討論。</p>
<p>在討論及回饋關於你的提交時，你還可以繼續推送到你的分支。如果有人反應說你忘了做某件事，或者在程式碼中有錯誤，你可以在分支中修正它並推送修改。GitHub 會顯示你的新提交及任何可能會收到的額外回饋在統一的 Pull Request 頁面。</p>
<h3 id="進階提示-3"><a href="#進階提示-3" class="headerlink" title="進階提示"></a>進階提示</h3><p>Pull Request 的意見都是用 Markdown 撰寫，所以你可以插入圖片和表情符號，使用預先格式化的文字區塊，及其他輕量化的格式。</p>
<img src="/2014/09/21/understanding-the-github-flow/merge_and_deploy.png" class="">

<p>一旦你的 Pull Request 進行了檢閱且分支通過測試，是時候將程式碼合併到 master 分支進行部署。如果你想在合併到 GitHub 儲存庫前測試東西，你可以先在本機進行合併。若你沒有推送到儲存庫的權限，這就派上用場了。</p>
<p>合併後，Pull Requests 保存了一筆程式碼的修改歷史記錄。因為他們是可搜尋的，可讓任何人回頭來了解為什麼及如何作出決定。</p>
<h3 id="進階提示-4"><a href="#進階提示-4" class="headerlink" title="進階提示"></a>進階提示</h3><p>你可以透過將特定的關鍵字放入 Pull Request 訊息中，將問題與程式碼做關聯。當你的 Pull Request 被合併，相關的問題也將被關閉。舉例來說，輸入 <code>Closes #32</code> 將會關閉儲存庫中編號 32 的問題。欲了解更多資訊，請查看我們的<a href="https://help.github.com/articles/closing-issues-via-commit-messages">幫助文章</a>。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>GitHub Flow</tag>
        <tag>Workflow</tag>
      </tags>
  </entry>
  <entry>
    <title>升級你的 SSH 金鑰！</title>
    <url>/2016/10/05/upgrade_your_ssh_keys/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>Gert van Dijk</strong> — <a href="https://blog.g3rt.nl/upgrade-your-ssh-keys.html">Upgrade your SSH keys!</a></p>
</blockquote>
<p>無論你是軟體開發人員或系統管理員，我敢打賭你正在使用 SSH 金鑰。比起使用密碼來推送提交到 Github 或是管理 Unix 系統，透過 SSH 公開金鑰驗證是最佳的方法。然而，隨著時光飛逝，很多人都使用舊金鑰而沒有意識到需要產生一個新的來提供私密資料更好的保護。在這篇文章，我將示範如何平穩的轉換到 Ed25519 金鑰、你為什麼會想要它以及展示一些技巧和訣竅。</p>
<blockquote>
<p>長話短說，使用 <code>ssh-keygen -o -a 100 -t ed25519</code> 來產生新的金鑰並指定一個高強度的通關密語，如果你需要平穩的轉換，請繼續往下閱讀。</p>
</blockquote>
<blockquote>
<p>我計劃發佈更多 SSH 技巧和訣竅，所以請關注我的部落格。這篇文章的重點是關於作為使用者公開金鑰驗證的 SSH 金鑰。</p>
</blockquote>
<h3 id="DSA-和-RSA-1024-位元已經廢止"><a href="#DSA-和-RSA-1024-位元已經廢止" class="headerlink" title="DSA 和 RSA 1024 位元已經廢止"></a>DSA 和 RSA 1024 位元已經廢止</h3><p>如果你已經使用預設選項建立金鑰超過四年，它可能不安全（RSA &lt; 2048 位元）。更糟的是，我最近看到了推特迷、同事和朋友還在使用 DSA 金鑰（OpenSSH 格式裡的 <code>ssh-dss</code> 類型）。那是一種類似於 RSA 的金鑰類型，但長度受限於 1024 位元且被<a href="https://security.stackexchange.com/a/5100/12948">推薦</a>了很長一段時間。它顯然不安全，且被最近的 OpenSSH 版本以正當理由拒絕（請參見 <a href="http://www.openssh.com/txt/release-7.0">7.0 更新日誌</a>）。</p>
<p>難過的是，我看到關於如何重新啟用支援 DSA 金鑰的文章，而不是轉移到一種更安全的金鑰類型。真的，依照指示更改 <code>PubkeyAcceptedKeyTypes</code> 或 <code>HostKeyAlgorithms</code> 的設定是不明智的(host keys are for a later post)。取而代之，升級你的金鑰！</p>
<img src="/2016/10/05/upgrade_your_ssh_keys/old_key_picture.jpg" class="" title="比較 DSA 及使用像這樣技術打造的鑰匙，你不會希望此類型的鑰匙來開啟你家的門，對吧？">
<span id="more"></span>
<h3 id="確定你目前的狀況"><a href="#確定你目前的狀況" class="headerlink" title="確定你目前的狀況"></a>確定你目前的狀況</h3><p>列出你的所有金鑰：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token keyword">for</span> <span class="token for-or-select variable">keyfile</span> <span class="token keyword">in</span> ~/.ssh/id_*<span class="token punctuation">;</span> <span class="token keyword">do</span> ssh-keygen -l -f <span class="token string">"<span class="token variable">$&#123;keyfile&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">done</span> <span class="token operator">|</span> <span class="token function">uniq</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>DSA 或 RSA 1024 位元：不安全的</li>
<li>RSA 2048：建議更改</li>
<li>RSA 3072/4096：好極了，但是 Ed25519 有一些好處！</li>
<li>ECDSA：要看情況，建議更改</li>
<li>Ed25519：哇！太酷了！但是可以抵抗暴力破解嗎？</li>
</ul>
<h3 id="平穩的轉換，我保證。"><a href="#平穩的轉換，我保證。" class="headerlink" title="平穩的轉換，我保證。"></a>平穩的轉換，我保證。</h3><p>你可能在想⋯「我用金鑰很久了，我不想現在到處更改。」很有道理，但你不需要到處更改！好消息是，你可以有多個金鑰在系統上，而且你的 SSH 客戶端會自動選擇正確的金鑰給正確的系統。</p>
<p>這是 SSH 協定的一部分，它可以提供多個金鑰，而伺服器會挑選一個，你的客戶端必須透過質詢證明來擁有私鑰。加入一些參數（<code>-vvv</code>）在 SSH 連線指令來觀看運作情形。此外，若有使用 SSH 金鑰管理器，你可以載入多個金鑰，它會識別所有金鑰。很簡單吧。</p>
<h3 id="你會喜歡-Twisted-Edwards-curve"><a href="#你會喜歡-Twisted-Edwards-curve" class="headerlink" title="你會喜歡 Twisted Edwards curve"></a>你會喜歡 Twisted Edwards curve</h3><p>最常見的金鑰類型是 RSA，也被稱為 <code>ssh-rsa</code>。它的相容性很好但也緩慢，若使用位元長度小於 2048 位元建立，具有潛在危險性。我們剛剛得知你的 SSH 客戶端可以處理多個金鑰，所以趕緊使用最新快速的橢圓曲線加密法，並享受它所提供非常緊湊的金鑰格式！</p>
<p>Ed25519 金鑰很短。非常短。如果你已經習慣了從系統複製多行字元到其它系統，你會對於它的大小感到驚喜。公鑰的長度僅有 68 個字元。驗證速度也比高強度的 RSA（3072+ 位元）更快。</p>
<p>Ed25519 金鑰可透過在 ssh-keygen 指令加上 <code>-t ed25519</code> 選項來產生。</p>
<p>Ed25519 是使用 <a href="https://en.wikipedia.org/wiki/Twisted_Edwards_curve">Twisted Edwards curve</a> 實作的 EdDSA。</p>
<h3 id="增加對暴力破解密碼的抵抗"><a href="#增加對暴力破解密碼的抵抗" class="headerlink" title="增加對暴力破解密碼的抵抗"></a>增加對暴力破解密碼的抵抗</h3><p>當產生金鑰對時，會詢問你一個密碼短語來加密私鑰。若你將永遠失去私鑰，它應該保護他人冒充你，因為它會被密碼短語加密。要真正防止這種情況，應該確保防止密碼短語容易暴力破解。</p>
<p>OpenSSH 金鑰產生器提供了兩種選項，以抵抗暴力破解密碼：使用新的 OpenSSH 金鑰格式並增加金鑰推導函數的使用次數。它會降低解鎖金鑰的速度，但也防止了惡意使用者高效的暴力破解。在你的系統實驗推倒函數的使用次數，約從 100 次開始。在我的系統大約需要 1 秒來解密，且每天用金鑰管理器載入一次。在我看來，是可以接受的。</p>
<p>透過 <code>ssh-keygen</code> 使用 <code>-o</code> 選項並利用 bcrypt 所搭載的嶄新金鑰推導函數建立新的 RFC4716 金鑰格式。使用 <code>-a &lt;num&gt;</code> 選項指定推導函數的使用次數。</p>
<p>事實上，當建立一個 Ed25519 金鑰時，<code>-o</code> 選項看來是預設值。</p>
<p>OpenSSH 的手冊並沒有真正關於「新」格式的解釋。我發現 <a href="http://www.tedunangst.com/">www.tedunangst.com</a> 內的這篇文章非常有用：「<a href="http://www.tedunangst.com/flak/post/new-openssh-key-format-and-bcrypt-pbkdf">新的 OpenSSH 金鑰格式及 bcrypt pbkdf</a>」。</p>
<h3 id="產生新的吸引人的-Ed25519-金鑰"><a href="#產生新的吸引人的-Ed25519-金鑰" class="headerlink" title="產生新的吸引人的 Ed25519 金鑰"></a>產生新的吸引人的 Ed25519 金鑰</h3><blockquote>
<p>提示：使用相同的密碼短語在你所有的金鑰類型來獲得更多便利性。（參見：<a href="#multi-key-aware-ssh-client">知道多個金鑰的 SSH 客戶端</a>。）</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">$ ssh-keygen -o -a 100 -t ed25519
Generating public&#x2F;private ed25519 key pair.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in &#x2F;home&#x2F;gert&#x2F;.ssh&#x2F;id_ed25519.
Your public key has been saved in &#x2F;home&#x2F;gert&#x2F;.ssh&#x2F;id_ed25519.pub.
The key fingerprint is:
SHA256: [...] gert@hostname
The key&#39;s randomart image is: [...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意那行「Your identification has been saved in /home/gert/.ssh/id_ed25519」。你現在的 RSA/DSA 金鑰都在相同的 <code>~/.ssh</code> 資料夾內。如同其它金鑰，你可以複製在 <code>~/.ssh/id_ed25519.pub</code> 的公鑰到目的主機以便驗證。</p>
<p><a name="multi-key-aware-ssh-client"></a></p>
<h3 id="知道多個金鑰的-SSH-客戶端"><a href="#知道多個金鑰的-SSH-客戶端" class="headerlink" title="知道多個金鑰的 SSH 客戶端"></a>知道多個金鑰的 SSH 客戶端</h3><p>所有在預設路徑內的金鑰會被 SSH 客戶端應用程式自動偵測，包含透過 ssh-add 的 SSH 金鑰管理器。所以，如果你像以前一樣使用 ssh、scp、rsync 等應用程式⋯</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> user@host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>現在將提供多個公鑰給伺服器，伺服器會對匹配的項目要求證明所有權以便驗證。你日常使用的 <code>ssh-add</code> 指令不會改變，且自動找到 Ed25519 金鑰：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add
Enter passphrase <span class="token keyword">for</span> /home/gert/.ssh/id_rsa:
Identity added: /home/gert/.ssh/id_rsa <span class="token punctuation">(</span>gert@hostname<span class="token punctuation">)</span>
Identity added: /home/gert/.ssh/id_ed25519 <span class="token punctuation">(</span>gert@hostname<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>它不僅找到這些金鑰，也載入它們僅透過輸入一次密碼短語（因為是相同的）！</p>
<p>我們現在已經達成重要的目標。在沒有改變你任何的日常工作下，我們可以慢慢的更改原端主機上現有的設定來接受 Ed25519 金鑰。在此期間 RSA 金鑰仍然可運作。很棒對吧！？</p>
<h3 id="變更或設定密碼短語"><a href="#變更或設定密碼短語" class="headerlink" title="變更或設定密碼短語"></a>變更或設定密碼短語</h3><p>如果你害怕這會改變你的金鑰，別擔心。使用密碼短語加密的金鑰對私有部分，僅存在於你的本地機器上。只要你喜歡，可以經常改變它。這個建議是防止金鑰落入不法分子手中時遭到濫用。重複所有的金鑰檔案，以確保新的金鑰格式使用 100 次 bcrypt KDF：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -f ~/.ssh/id_rsa -p -o -a <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="升級你現在的-RSA-金鑰"><a href="#升級你現在的-RSA-金鑰" class="headerlink" title="升級你現在的 RSA 金鑰"></a>升級你現在的 RSA 金鑰</h3><p>現在使用 Ed25519 在大多數情況下會（也應該）正常運作，但是舊式系統可能不支援。最好的應急辦法是使用高強度 RSA 金鑰對。</p>
<p>雖然 OpenSSH 客戶端支援多個 RSA 金鑰，它需要設定或命令列選項來指定路徑，所以相當容易出錯。取而代之，我建議你升級現有的金鑰，這樣做會讓事情變得簡單。根據你目前的 RSA 金鑰強度，你可以立即或悠閒的更新。</p>
<p>如果你仍然有弱的 RSA 金鑰，將它從標準路徑移出來並產生一個長度 4096 位元的新金鑰：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> ~/.ssh/id_rsa ~/.ssh/id_rsa_legacy
$ <span class="token function">mv</span> ~/.ssh/id_rsa.pub ~/.ssh/id_rsa_legacy.pub
$ ssh-keygen -t rsa -b <span class="token number">4096</span> -o -a <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果你使用金鑰管理器，手動將其指定到所有的金鑰：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add ~/.ssh/id_rsa ~/.ssh/id_rsa_legacy ~/.ssh/id_ed25519<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>一旦你完成了所有遠端目標的更新，你可以回到便利的方式，讓它自動找到新的 RSA 和 Ed25519 金鑰；只要忽略金鑰檔案參數。</p>
<h3 id="支援-Ed25519-的軟體"><a href="#支援-Ed25519-的軟體" class="headerlink" title="支援 Ed25519 的軟體"></a>支援 Ed25519 的軟體</h3><p>自 OpenSSH 6.5 開始支援，在提供給工作站的 Unix 作業系統也已經採用。Ubuntu 14.04+、Debian 8+、CentOS/RedHat 7+ 等等都支援它了。（如果你有關於 Mac OS X 的詳細訊息，請留個訊息，無法快速搜尋到它）。某些軟體如自訂的桌面版金鑰管理器也許有幾個不喜歡新的金鑰的原因（見下文「<a href="#my-gnome-keyring-doesnt-work-anymore">我的 Gnome-keyring 不再運作</a>」）。</p>
<p>順帶一提，Github 上也運作的很好。不幸的是，Launchpad 和 Gerrit 程式碼審查看來需要 RSA 金鑰。在 Windows 使用 PuTTY 嗎？見下文。</p>
<p><a name="my-gnome-keyring-doesnt-work-anymore"></a></p>
<h3 id="我的-Gnome-keyring-不再運作"><a href="#我的-Gnome-keyring-不再運作" class="headerlink" title="我的 Gnome-keyring 不再運作"></a>我的 Gnome-keyring 不再運作</h3><p>Gnome-keyring 被用在 Ubuntu Unity，無法讀取新的 RFC4716 格式金鑰，但回報成功。這是臭蟲。更多細節在<a href="https://askubuntu.com/q/564821/88802">我的 AskUbuntu Q&amp;A 文章</a>。我建議停用 Gnome keyring 作為 SSH 金鑰管理器，改用普通的 OpenSSH 金鑰管理器來代替。</p>
<h3 id="我在-Windows-使用-PuTTY"><a href="#我在-Windows-使用-PuTTY" class="headerlink" title="我在 Windows 使用 PuTTY"></a>我在 Windows 使用 PuTTY</h3><p>抱歉，我沒有使用 PuTTY，但是首先要確定已經升級。根據<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/ed25519.html">願望清單項目</a>建議，從 2015 年末版本開始支援 Ed25519。一般來說，我對於它實作的安全功能的速度不是太興奮。</p>
<h3 id="這是最安全的-SSH-金鑰對？"><a href="#這是最安全的-SSH-金鑰對？" class="headerlink" title="這是最安全的 SSH 金鑰對？"></a>這是最安全的 SSH 金鑰對？</h3><p>我們已經採取了一些重要措施，但是離最安全還很遠。在處理高保證環境時，如本文所述，因為在記憶體中保存著未加密的私鑰，我強烈反對使用金鑰。取而代之，使用安全硬體（智慧卡）來避免洩露金鑰甚至從記憶體轉存。它未涵蓋在此文章，主要是因為它需要你購買硬體，其次是因為依賴於設備的限制。一個很好的解決方案是利用可能已經內建在你電腦的可信賴平台模組，不過那肯定值得用其它文章來解說。</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>Ed25519</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Capistrano 自動化部署時使用 Ed25519 金鑰</title>
    <url>/2016/10/16/capistrano-with-ed25519-keys/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>steigr</strong> — <a href="https://blog.stei.gr/?p=4">Capistrano with ED25519 keys</a></p>
</blockquote>
<p>我最近將我的 Capistrano 自動化部署切換到了 Ed25519 金鑰。在正常運作之前我發現到一些奇怪的錯誤，部署使用者/代理程式無法登入到主機。在檢查 authorized_keys 檔案權限、本機 SSH 代理程式後，我開始用 Google 搜尋這個問題。結果是，net-ssh 版本小於 4 不支援 Ed25519 金鑰。</p>
<p>在 Gemfile 加入以下幾行，安裝所需的版本和 ruby gems 以啟用 Ed25519 金鑰支援：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">gem <span class="token string">'bcrypt_pbkdf'</span><span class="token punctuation">,</span> group<span class="token punctuation">:</span> <span class="token symbol">:development</span>
gem <span class="token string">'rbnacl-libsodium'</span><span class="token punctuation">,</span> group<span class="token punctuation">:</span> <span class="token symbol">:development</span>
gem <span class="token string">'rbnacl'</span><span class="token punctuation">,</span> group<span class="token punctuation">:</span> <span class="token symbol">:development</span>
gem <span class="token string">'net-ssh'</span><span class="token punctuation">,</span> <span class="token string">'~> 4.0.0.beta'</span><span class="token punctuation">,</span> group<span class="token punctuation">:</span> <span class="token symbol">:development</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>確認 ruby 開發標頭檔，安裝到 <code>rbnacl</code> 及 <code>rbnacl-libsodium</code> 的 C 編譯器和相依開發標頭檔皆有原生擴充功能。</p>
<p>現在，<code>deploy-agent@server&#39;s password:</code> 訊息應該消失了。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Ed25519</tag>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Ubuntu 中為 vsftpd 設置虛擬帳號</title>
    <url>/2017/02/06/how-to-setup-virtual-users-for-vsftpd-in-ubuntu/</url>
    <content><![CDATA[<p>以下是在 Ubunto 16.04 LTS 安裝 vsftpd 並設定虛擬帳號的步驟</p>
<ol>
<li><p>安裝 vsftpd</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>編輯設定檔</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/vsftpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p>  以下設定僅供參考，可依實際使用情形調整（詳細設定及說明可查看 <code>man vsftpd.conf</code>）<br>  <pre class="line-numbers language-text" data-language="text"><div class="caption"><span>/etc/vsftpd.conf</span></div><code class="language-text"># 設定為 YES 表示 vsftpd 是以 standalone 的方式來啟動
# 註：listen_ipv6 預設接受 IPv6 及 IPv4 連線，因此設定 listen_ipv6 為 YES 即可
listen=NO
listen_ipv6=YES

# 是否允許匿名者登入
anonymous_enable=NO

# 是否以實體用戶的方式登入 vsftpd 伺服器
# 註：使用虛擬帳號時需要一個實體帳號
local_enable=YES

# 是否允許使用者上傳資料
write_enable=YES

# 建立新目錄與檔案的權限預設值
local_umask=022

# 若目錄下有 .message 檔案時，當使用者進入此目錄是否顯示該檔案的內容
dirmessage_enable=YES

# 是否使用本機時間
use_localtime=YES

# 是否將使用者上傳與下載檔案記錄起來
xferlog_enable=YES

# 是否支援主動式連線功能
connect_from_port_20=YES

# 使用者在指定秒數內都沒有命令動作時，是否強制離線
idle_session_timeout=600

# 是否將使用者限制在自己的家目錄之內
chroot_local_user=YES

# 用於 chroot 的空目錄路徑，此目錄不應被 ftp 使用者寫入
secure_chroot_dir=/var/run/vsftpd/empty

# pam 模組的名稱
pam_service_name=vsftpd

# RSA 加密的憑證檔案所在位置
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem

# RSA 加密的私鑰檔案所在位置
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key

# 是否啟動 SSL 支援
ssl_enable=NO

# 是否標示 vsftpd 使用 UTF-8 檔案系統
utf8_filesystem=YES

# 是否將目錄中的所有使用者和群組資訊顯示為 "ftp"
hide_ids=YES

# 限制同一時間可以同時連上 vsftpd 的用戶端數量
max_clients=50

# 限制同一時間同一個 IP 的最大連線數量
max_per_ip=5

# 是否支援被動式連線模式
pasv_enable=YES

# 設定被動式連線模式可用的連接埠範圍
pasv_min_port=65400
pasv_max_port=65410

# 指定某個純文字檔作為使用者登入 vsftpd 伺服器時所顯示的歡迎訊息
banner_file=/etc/vsftpd/banner_file

# 是否同時產生 wu-ftpd 格式及 vsftpd 自有格式的記錄檔
dual_log_enable=YES

# vsftpd 格式記錄檔的所在位置
vsftpd_log_file=/var/log/vsftpd.log

# 是否支援 TCP Wrappers 的防火牆機制
tcp_wrappers=YES

# 這個選項允許根據各別用戶來覆蓋本設定檔中指定的任何設定
user_config_dir=/etc/vsftpd/user_conf

# 虛擬帳號是否將使用與本機用戶相同的權限
virtual_use_local_privs=YES

# 基於模板為每個虛擬帳號自動產生主目錄
user_sub_token=$USER

# 設定用戶家目錄
local_root=/var/ftp/$USER

# 是否允許用戶根目錄有寫入權限
allow_writeable_chroot=YES

# 若這個值設定為 YES 時，那麼任何實體帳號，均會被視為 guest
guest_enable=YES

# 指定訪客身份
guest_username=vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<ol start="3">
<li><p>設定虛擬帳號前仍須先建立一個實體帳號，虛擬帳號皆會使用此帳號登入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">useradd</span> --home /home/vsftpd --gid nogroup -m --shell /bin/false vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>設定虛擬帳號<br>由於要使用非實體帳號來登入，需另外建立帳號及密碼資料提供 vsftpd 作認證</p>
</li>
</ol>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/vsftpd/virtual-user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  建立帳密文件，格式為一行帳號、一行密碼<br>  <pre class="line-numbers language-text" data-language="text"><div class="caption"><span>/etc/vsftpd/virtual-user</span></div><code class="language-text">user1
user1_password
user2
user2_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>  接著將帳密文件轉換成資料庫檔案（Berkeley DB 格式）</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> db_load -T -t <span class="token builtin class-name">hash</span> -f /etc/vsftpd/virtual-user /etc/vsftpd/virtual-user.db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  註：若出現 <code>The program &#39;db_load&#39; is currently not installed.</code> 訊息，則用以下指令安裝必要套件</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> db-util<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>因設定檔內有使用了 <code>user_config_dir</code> 設定，可在此目錄內針對各使用者套用額外設定</li>
</ol>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/vsftpd/user_conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  以下範例為限制 <code>user2</code> 僅擁有上傳權限</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/vsftpd/user_conf/user2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  設定內容如下</p>
  <pre class="line-numbers language-text" data-language="text"><div class="caption"><span>/etc/vsftpd/user_conf/user2</span></div><code class="language-text">download_enable=NO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="6">
<li>修改 vsftpd 認證設定</li>
</ol>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mv</span> /etc/pam.d/vsftpd /etc/pam.d/vsftpd.old
$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/pam.d/vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  設定內容如下<br>  <pre class="line-numbers language-text" data-language="text"><div class="caption"><span>/etc/pam.d/vsftpd</span></div><code class="language-text">auth required pam_userdb.so db=/etc/vsftpd/virtual-user
account required pam_userdb.so db=/etc/vsftpd/virtual-user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>
<ol start="7">
<li>重啟服務</li>
</ol>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl restart vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  現在已可透過虛擬帳號登入囉！</p>
]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 RVG 繪圖</title>
    <url>/2017/03/15/drawing-with-rvg/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>RMagick User’s Guide and Reference</strong> — <a href="https://rmagick.github.io/rvgtut.html">Drawing with RVG</a></p>
</blockquote>
<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>RVG（Ruby 向量圖形）是 RMagick 的 Draw 類別的外觀，它提供了基於 W3C 推薦的可縮放向量圖形（Scalable Vector Graphics）的繪圖 API。</p>
<p>RVG 是一個可縮放向量繪圖函式庫。可縮放意味著圖形不是固定的像素尺寸。相同的圖形可以被呈現在螢幕上或列印出來。向量圖使用了幾何物件，如直線和圓。與點陣圖不同，向量圖在放大時不會「像素化」。</p>
<img src="/2017/03/15/drawing-with-rvg/duck.gif" class="">

<p>作為 RVG 函式庫的介紹，讓我們來看看如何畫出上面這隻小鴨。以下是完整的程式。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'rvg/rvg'</span>
<span class="token keyword">include</span> <span class="token constant">Magick</span>

<span class="token constant">RVG</span><span class="token punctuation">:</span><span class="token punctuation">:</span>dpi <span class="token operator">=</span> <span class="token number">72</span>

rvg <span class="token operator">=</span> <span class="token constant">RVG</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token punctuation">.</span>viewbox<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>canvas<span class="token operator">|</span>
  canvas<span class="token punctuation">.</span>background_fill <span class="token operator">=</span> <span class="token string">'white'</span>

  canvas<span class="token punctuation">.</span>g<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>body<span class="token operator">|</span>
    body<span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token symbol">:stroke</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token symbol">:stroke_width</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
    body<span class="token punctuation">.</span>ellipse<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
    body<span class="token punctuation">.</span>rect<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skewX<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">35</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  canvas<span class="token punctuation">.</span>g<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>head<span class="token operator">|</span>
    head<span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:stroke</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token symbol">:stroke_width</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'yellow'</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>polygon<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'orange'</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  foot <span class="token operator">=</span> <span class="token constant">RVG</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Group</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token keyword">do</span> <span class="token operator">|</span>_foot<span class="token operator">|</span>
    _foot<span class="token punctuation">.</span>path<span class="token punctuation">(</span><span class="token string">'m0,0 v30 l30,10 l5,-10, l-5,-10 l-30,10z'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    styles<span class="token punctuation">(</span><span class="token symbol">:stroke_width</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token symbol">:stroke</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
  canvas<span class="token punctuation">.</span>use<span class="token punctuation">(</span>foot<span class="token punctuation">)</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
  canvas<span class="token punctuation">.</span>use<span class="token punctuation">(</span>foot<span class="token punctuation">)</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span>

  canvas<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>title<span class="token operator">|</span>
    title<span class="token punctuation">.</span>tspan<span class="token punctuation">(</span><span class="token string">"duck|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:text_anchor</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token symbol">:font_size</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">20</span><span class="token punctuation">,</span>
      <span class="token symbol">:font_family</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'helvetica'</span><span class="token punctuation">,</span> <span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">)</span>
    title<span class="token punctuation">.</span>tspan<span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:font_size</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">22</span><span class="token punctuation">,</span>
      <span class="token symbol">:font_family</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'times'</span><span class="token punctuation">,</span> <span class="token symbol">:font_style</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'italic'</span><span class="token punctuation">,</span> <span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'red'</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    canvas<span class="token punctuation">.</span>rect<span class="token punctuation">(</span><span class="token number">249</span><span class="token punctuation">,</span><span class="token number">249</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:stroke</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'none'</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

rvg<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'duck.gif'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>所有的繪圖都遵循相同的 3 個步驟：</p>
<ol>
<li>建立一個 RVG 物件。指定最終圖片的寬度和高度。轉交程式碼區塊給 <code>RVG.new</code> 方法。</li>
<li>在程式區塊內，在 RVG 物件調用方法來指定背景，加入形狀、文字或點陣圖，或加入一組形狀、文字或點陣圖。</li>
<li>調用 <code>draw</code> 方法在背景繪出形狀、文字或點陣圖。</li>
</ol>
<p>我將逐行介紹範例。</p>
<span id="more"></span>

<h2 id="第-1-3-行"><a href="#第-1-3-行" class="headerlink" title="第 1 ~ 3 行"></a>第 1 ~ 3 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'rvg/rvg'</span>
<span class="token keyword">include</span> <span class="token constant">Magick</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這只是平常用來載入 RVG 擴展的 Ruby 程式碼。為了少打一些字，我引入了 Magick 模組到物件的命名空間。</p>
<h2 id="第-4-6-行"><a href="#第-4-6-行" class="headerlink" title="第 4 ~ 6 行"></a>第 4 ~ 6 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">RVG</span><span class="token punctuation">:</span><span class="token punctuation">:</span>dpi <span class="token operator">=</span> <span class="token number">72</span>

rvg <span class="token operator">=</span> <span class="token constant">RVG</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token punctuation">.</span>viewbox<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>canvas<span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><code>RVG::dpi</code> 啟用了在 RVG 使用單位方法。當你將 <code>RVG::dpi</code> 設定為非 nil 值時，RVG 向整數和浮點數類別加入了許多轉換方法。這些方法允許你使用如英吋、毫米和厘米來指定測量單位。DPI 代表「每英吋點數」圖片解析度。這裡我設定 <code>RVG::dpi</code> 為 72，一個螢幕常用的數值。</p>
<p><code>RVG.new</code> 需要 2 個參數。這些參數以像素指定最終圖片的寬度和高度。由於我定義了 <code>RVG::dpi</code>，我可以透過 <code>in</code> 轉換方法使用英吋指定這些數值。在 72dpi，最終圖片的邊長將會是 2.5 * 72 = 180 像素。</p>
<p>預設情況下，RVG 使用像素作為其測量單位，但由於我正在繪製一個可縮放的圖片，我不想限制自己的像素。<code>viewbox</code> 方法定義了一個具有邏輯單位的座標系。<code>viewbox</code> 需要 4 個參數，<code>min_x</code>、<code>min_y</code>、<code>width</code> 和 <code>height</code>。在第 6 行，我定義了我的座標系，它的原點在 (0,0)，寬度和高度為 250 單位。透過使用我自己的座標系，我可以稍後將圖片的尺寸更改為 5 英吋正方形或 1 英吋正方形，只需要更改 <code>new</code> 的參數。</p>
<h3 id="預設座標系"><a href="#預設座標系" class="headerlink" title="預設座標系"></a>預設座標系</h3><img src="/2017/03/15/drawing-with-rvg/duck0.gif" class="">

<p>預設情況下，RVG 座標系的原點在左上角。X 軸向右為正值，Y 軸向下為正值。上面的圖片顯示了該座標系的座標軸。我為範例圖片加上了淺藍色方格紙背景，以協助將坐標參數與圖片中的實際位置相關聯。只要記住，座標軸和方格紙背景實際上不是我產生的圖片的一部分。</p>
<p>RVG 類別是 RVG 定義的容器類別之一。容器物件可以包含圖形物件，如圓和線、文字、點陣圖及其他容器物件。最外面的容器永遠是 RVG 物件。我將加入所有組成鴨子的圖形物件到此容器。</p>
<p>我們通常會轉交一個程式區塊給容器建構方法。但是，在這裡我連接了 <code>viewbox</code> 到 <code>new</code>，所以 <code>viewbox</code> 負責產生並傳遞新的 RVG 實例到 <code>canvas</code> 參數。</p>
<h2 id="第-7-行"><a href="#第-7-行" class="headerlink" title="第 7 行"></a>第 7 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">canvas<span class="token punctuation">.</span>background_fill <span class="token operator">=</span> <span class="token string">'white'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>預設情況下，RVG 圖形是繪製在透明背景上。當你想要顯示你的圖片在另一個圖片上時，這是很方便的。你可以透過為 <code>background_fill=</code> 屬性指定顏色來覆蓋預設背景顏色。這裡我設定背景顏色為「白色」。</p>
<h2 id="第-9-13-行"><a href="#第-9-13-行" class="headerlink" title="第 9 ~ 13 行"></a>第 9 ~ 13 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">canvas<span class="token punctuation">.</span>g<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>body<span class="token operator">|</span>
  body<span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token symbol">:stroke</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token symbol">:stroke_width</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
  body<span class="token punctuation">.</span>ellipse<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
  body<span class="token punctuation">.</span>rect<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skewX<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">35</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這幾行做了很多事情，調用 7 個方法，所以讓我們一次介紹一個方法。</p>
<h3 id="Groups（群組）"><a href="#Groups（群組）" class="headerlink" title="Groups（群組）"></a>Groups（群組）</h3><p><code>Group</code> 是 RVG 中的第二個容器類別。群組的目的是將一組座標系變形和一組樣式與群組中的圖形物件相關聯。要在另一個容器中建立群組物件，可調用容器上的 <code>g</code> 方法。如果程式區塊存在的話，<code>g</code> 方法會轉交給程式區塊。在這個範例中，沒有與 <code>g</code> 關聯的程式區塊，所以 <code>g</code> 返回了新群組。<code>g</code> 方法加入群組到其容器的內容。在這個範例中，群組的容器是在第 6 行建立的 canvas 物件。群組中的圖形物件會作為繪製容器的一部分被繪製。連接到 <code>g</code> 的 <code>translate</code> 和 <code>rotate</code>，透過_新增坐標系變形_來修改群組。</p>
<p>（那邊有一個程式區塊，但有個 2 方法調用在 <code>g</code> 和程式區塊間。我稍後會解釋。）</p>
<h3 id="Transforms（變形）"><a href="#Transforms（變形）" class="headerlink" title="Transforms（變形）"></a>Transforms（變形）</h3><p>我將使用這個群組來包含組成鴨子身體的橢圓和組成翅膀的矩形。我可以只指定 x 和 y 座標來定位這些形狀相對於原點的位置，但移動原點到我想繪製形狀的位置更容易。這是 <code>translate</code> 方法的目的。這個方法將原點移動到由其參數指定的（x,y）位置。我在群組物件上調用 <code>translate</code>，並且由群組的內容取得為此群組指定的座標系變形，橢圓和矩形將在相對於舊座標系原點的座標（100,150）上繪製。</p>
<p>另外，我想讓鴨子的身體向上傾斜，所以我使用 <code>rotate</code> 方法來旋轉座標軸。<code>rotate</code> 的參數是旋轉的角度。負數表示逆時針旋轉。</p>
<p>在平移及旋轉座標系後，座標軸看起來像這樣：</p>
<p><strong>變形方法</strong></p>
<img src="/2017/03/15/drawing-with-rvg/duck1.gif" class="">

<p>有六種變形方法，除了 <code>translate</code> 和 <code>rotate</code> 外，還有 <code>scale</code>、<code>skewX</code>、<code>skewY</code> 和 <code>matrix</code>。當巢狀群組時，在內部群組上定義的任何變形都會被增加入外部變形。</p>
<h3 id="Styles（樣式）"><a href="#Styles（樣式）" class="headerlink" title="Styles（樣式）"></a>Styles（樣式）</h3><p>回想一下，<code>styles</code> 方法修改了預設的群組樣式。<code>styles</code> 方法需要一個雜湊作為參數。雜湊的鍵是樣式名稱，雜湊的值為樣式值。在這個範例中，有三個樣式名稱。:fill 樣式將填充顏色設定為「黃色」。:stroke 樣式將邊框顏色設定為「黑色」。:stroke_width 樣式將邊框寬度設定為「2」。我想要樣式套用在全組內的所有物件，所以第 10 行我在新的群組物件上調用 <code>style</code>。</p>
<p><code>styles</code> 方法是真正的主力。它幾乎在每個 RVG 的類別內都有定義，除了這三個之外還有許多其他樣式名稱。</p>
<h3 id="Basic-shapes（基本形狀）"><a href="#Basic-shapes（基本形狀）" class="headerlink" title="Basic shapes（基本形狀）"></a>Basic shapes（基本形狀）</h3><p>該群組包含了兩個基本形狀，一個<code>橢圓</code>和一個<code>矩形</code>。我使用 <code>ellipse</code> 方法將橢圓加入群組。<code>ellipse</code> 有四個參數，前兩個是在 x 軸及 y 軸上的半徑，是必要的。後兩個是中心點的 (x,y) 座標，當如同此處省略時，會預設為 (0,0)。我使用 <code>rect</code> 方法將矩形加入，它也有四個參數。前兩個是矩形的寬與高，後兩個是左上角的 (x,y) 座標。這兩個方法都會回傳<code>自己本身</code>，所以你可以連接其他方法給他們。</p>
<p>這是群組呈現時的樣子。橢圓以原點為中心，矩形的左上角稍微向上並且在原點的左邊。</p>
<p><strong>形狀方法</strong></p>
<img src="/2017/03/15/drawing-with-rvg/duck3.gif" class="">

<p>有七種形狀方法，除了 <code>ellipse</code> 和 <code>rect</code> 外，還有 <code>circle</code>、<code>line</code>、<code>path</code>、<code>polygon</code> 和 <code>polyline</code>。你也可以把文字當成形狀。形狀可以加上邊框和填充顏色，也可以透過變形方法和 <code>styles</code> 方法進行修改。</p>
<h3 id="SkewX（X-方向傾斜）"><a href="#SkewX（X-方向傾斜）" class="headerlink" title="SkewX（X 方向傾斜）"></a>SkewX（X 方向傾斜）</h3><p>每個人都知道翅膀看起來不像矩形！翅膀看起來像傾斜的平行四邊形。（嗯，在這個範例是這樣！）幸運的是，我們可以如同對容器一樣在形狀使用變形。<code>skewX</code> 方法讓我們很容易傾斜矩形。<code>skewX</code> 方法是另一個變形，它需要一個參數，傾斜 x 軸的角度。由於所有的形狀建構式包含 <code>rect</code>，都會回傳<code>自己本身</code>，我可以將 <code>skewX</code> 直接連接到 <code>rect</code>，並限制只有矩形有變形效果。結果如下所示。（我為翅膀座標系畫了座標軸。）</p>
<img src="/2017/03/15/drawing-with-rvg/duck4.gif" class="">

<p>身體就是這樣。在繼續之前讓我們來完成其他瑣事。我之前說過容器建構式（如 <code>g</code>）會轉交給程式區塊如果存在的話。在這個範例，<code>translate</code> 和 <code>rotate</code> 方法介於 <code>g</code> 和程式區塊間。如果有相關聯的程式區塊，所有變形方法都會轉交過去，所以我可以很容易地將他們連接到容器建構式，並仍然使用程式區塊參數來定義群組內的圖形物件。方法連結是 RVG 常見的慣用方法，你會在範例中看到很多。</p>
<p>下一個群組繪製頭部。</p>
<h2 id="第-15-20-行"><a href="#第-15-20-行" class="headerlink" title="第 15 ~ 20 行"></a>第 15 ~ 20 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">canvas<span class="token punctuation">.</span>g<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>head<span class="token operator">|</span>
  head<span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:stroke</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token symbol">:stroke_width</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
  head<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'yellow'</span><span class="token punctuation">)</span>
  head<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">)</span>
  head<span class="token punctuation">.</span>polygon<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'orange'</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這個部分與前一部分非常相似。我要定義一個群組來包含繪製鴨子頭部、眼睛和喙的圖形物件。首先，我使用平移方法來將原點移動到 (130,83)：</p>
<img src="/2017/03/15/drawing-with-rvg/duck6.gif" class="">

<p>在第 16 行我在群組定義了 <code>strok</code> 和 <code>stroke_width</code>。在群組上定義的樣式會傳播到群組中的形狀，除非你覆蓋他們。要做到這一點，在形狀調用 <code>styles</code>。在這個群組，每個形狀都有自己的填充顏色。黃色的圓組成了頭部，<code>circle</code> 需要 3 個參數，第一個參數是圓的半徑，另外兩個參數是中心點的 (x,y) 座標。當如同此處省略時，會預設為 (0,0)。我使用一個小黑圓作為眼睛。</p>
<p>最後，我使用 <code>polygon</code> 方法來繪製鳥喙。此方法使用一系列的 (x,y) 座標繪製多邊形。如果最後一個座標不等於第一個，<code>polygon</code> 會暗中的加上它以關閉多邊形。同樣地，我使用 <code>styles</code> 將填充顏色設定為「橘色」。</p>
<img src="/2017/03/15/drawing-with-rvg/duck8.gif" class="">

<h2 id="第-22-25-行"><a href="#第-22-25-行" class="headerlink" title="第 22 ~ 25 行"></a>第 22 ~ 25 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">foot <span class="token operator">=</span> <span class="token constant">RVG</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Group</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token keyword">do</span> <span class="token operator">|</span>_foot<span class="token operator">|</span>
  _foot<span class="token punctuation">.</span>path<span class="token punctuation">(</span><span class="token string">'m0,0 v30 l30,10 l5,-10, l-5,-10 l-30,10z'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    styles<span class="token punctuation">(</span><span class="token symbol">:stroke_width</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token symbol">:stroke</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>這裡我透過直接調用 <code>new</code> 來建立一個群組，而不是在容器上調用 <code>g</code> 方法。這將建立一個不包含在畫布中的群組物件。你可以想像腳沒有附加到任何東西，像這樣：</p>
<img src="/2017/03/15/drawing-with-rvg/duck9.gif" class="">

<h2 id="第-26-27-行"><a href="#第-26-27-行" class="headerlink" title="第 26 ~ 27 行"></a>第 26 ~ 27 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">canvas<span class="token punctuation">.</span>use<span class="token punctuation">(</span>foot<span class="token punctuation">)</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
canvas<span class="token punctuation">.</span>use<span class="token punctuation">(</span>foot<span class="token punctuation">)</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>要將群組加入到畫布，我使用 <code>use</code> 方法。use 方法可以接受任何容器或圖形物件作為參數。你還可以指定一個 (x,y) 座標來放置物件。然而，在這個範例中，我讓那些參數預設為 (0,0)，並使用 <code>translate</code> 來決定腳的位置。以下展示了左腳如何附加到鴨子上：</p>
<img src="/2017/03/15/drawing-with-rvg/duck10.gif" class="">

<p>當然，鴨子在走路，所以我必須用 <code>rotate</code> 讓腳有點傾斜：</p>
<img src="/2017/03/15/drawing-with-rvg/duck11.gif" class="">

<p>附加右腳很簡單，再次調用 <code>use</code> 但使用不同的參數來 <code>translate</code> 和 <code>rotate</code>：</p>
<img src="/2017/03/15/drawing-with-rvg/duck12.gif" class="">

<h2 id="第-29-34-行"><a href="#第-29-34-行" class="headerlink" title="第 29 ~ 34 行"></a>第 29 ~ 34 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">canvas<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>title<span class="token operator">|</span>
  title<span class="token punctuation">.</span>tspan<span class="token punctuation">(</span><span class="token string">"duck|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:text_anchor</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token symbol">:font_size</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token symbol">:font_family</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'helvetica'</span><span class="token punctuation">,</span> <span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'black'</span><span class="token punctuation">)</span>
  title<span class="token punctuation">.</span>tspan<span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:font_size</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">22</span><span class="token punctuation">,</span>
    <span class="token symbol">:font_family</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'times'</span><span class="token punctuation">,</span> <span class="token symbol">:font_style</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'italic'</span><span class="token punctuation">,</span> <span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'red'</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我現在需要的是一個圖片標題。文字在 RVG 是 <code>text</code> 方法的工作。和形狀方法相同，<code>text</code> 可以與任何容器物件一起使用。<code>text</code> 本身是一個容器，除了它只能包含文字相關的物件。<code>text</code> 方法接受 2 或 3 個參數，一個 (x,y) 座標對和一個可選的字串。(x,y) 座標對定義目前文字開始呈現的位置，如果有一個字串參數，它將從目前文字位置開始被呈現。呈現文字會改變目前文字位置到文字的結尾。</p>
<p>在這個範例中，文字被作為一個容器，文字物件可以包含 <code>tspan</code> 物件。每個 <code>tspan</code> 可以指定它自己的樣式。預設情況下，每個 <code>tspan</code> 會從目前文字位置開始呈現。</p>
<p>同樣地，我可以使用 <code>styles</code> 改變文字外觀。我在這裡選擇字體、字體樣式（預設是「normal」）、以點計算的大小和顏色。</p>
<img src="/2017/03/15/drawing-with-rvg/duck14.gif" class="">

<h2 id="第-35-行"><a href="#第-35-行" class="headerlink" title="第 35 行"></a>第 35 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">canvas<span class="token punctuation">.</span>rect<span class="token punctuation">(</span><span class="token number">249</span><span class="token punctuation">,</span><span class="token number">249</span><span class="token punctuation">)</span><span class="token punctuation">.</span>styles<span class="token punctuation">(</span><span class="token symbol">:stroke</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token symbol">:fill</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'none'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就快完成了，我現在需要的是加上一個藍色邊框。（我現在要刪除方格紙背景，因為我們不再需要它。）</p>
<img src="/2017/03/15/drawing-with-rvg/duck15.gif" class="">

<h2 id="第-38-行"><a href="#第-38-行" class="headerlink" title="第 38 行"></a>第 38 行</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">rvg<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'duck.gif'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>調用 <code>draw</code> 方法沒有佔用大量空間，只有 4 個字母，但是做了很多工作。<code>draw</code> 方法會遍歷我加到最外層 RVG 容器的所有圖形物件，並在背景繪製他們。繪製完成後，<code>draw</code> 將以 RMagick Image 物件的形式回傳圖像。你可以在圖像上使用任何 Image 類別方法，這裡我簡單地將圖像輸出為 GIF 檔案。</p>
<h2 id="縮放圖片"><a href="#縮放圖片" class="headerlink" title="縮放圖片"></a>縮放圖片</h2><p>RVG 圖片真的可以縮放嗎？讓我們試試看。更改 RVG.new 調用讓圖片變成 4 倍大。邊長是 5 英吋：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">rvg <span class="token operator">=</span> <span class="token constant">RVG</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">5.</span><span class="token keyword">in</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token punctuation">.</span>viewbox<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>canvas<span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>不改變其他東西。再次執行程式，看看你得到什麼。</p>
<img src="/2017/03/15/drawing-with-rvg/big-duck.gif" class="">
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Rmagick</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron API 範例</title>
    <url>/2018/01/24/electron-api-demos/</url>
    <content><![CDATA[<p><a href="https://github.com/CalvertYang/electron-api-demos-zh-Hant"><img src="/2018/01/24/electron-api-demos/screenshot.png" class=""></a></p>
<p>因為最近在工作時需要使用 <a href="https://electronjs.org/">Electron</a>，發現官方提供的 <a href="https://github.com/electron/electron-api-demos">Electron API 應用程式範例</a>很適合讓想入門的人了解一些基本 API 的用法以及實際執行的效果。</p>
<p>在 Github 上搜尋這個範例程式發現沒有正體中文版覺得有點可惜，於是就花了點時間來翻譯此範例程式。</p>
<p>原始碼可從 <a href="https://github.com/CalvertYang/electron-api-demos-zh-Hant">Github</a> 下載，若有任何翻譯建議也歡迎提出。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Heroku 使用 Active Storage</title>
    <url>/2018/05/22/active-storage-on-heroku/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>HEROKU BLOG</strong> — <a href="https://blog.heroku.com/rails-active-storage">Rails 5.2 Active Storage: Previews, Poppler, and Solving Licensing Pitfalls</a></p>
</blockquote>
<p>上個月剛剛發佈的 Rails 5.2 有一個重要的新功能：Active Storage。Active Storage 支援各種後端服務（如 AWS S3），為 Active Record 模型提供檔案上傳和附件功能。雖然有像 <a href="https://github.com/thoughtbot/paperclip">Paperclip</a> 這樣的函式庫來做類似的工作，但這是 Rails 第一次發佈這樣的功能。在 Heroku，我們認為雲端儲存是最佳實作規範，所以我們確保它能在我們的平台上執行。在這篇文章中，我們將分享如何準備發佈 Rails 5.2，以及如何在部署的應用程式中使用新的 Active Storage 功能。</p>
<span id="more"></span>

<h3 id="信任但要驗證"><a href="#信任但要驗證" class="headerlink" title="信任但要驗證"></a>信任但要驗證</h3><p>在 Heroku，信任是我們的第一價值。當我們得知 Active Storage 隨著 Rails 5.2 發佈時，我們開始嘗試使用它的所有功能。Active Storage 其中一個最便利的功能就是能夠預覽 PDF 和影片。PDF 或影片的小截圖將從檔案中擷取並呈現在頁面上，而不是透過文字連結到資源。</p>
<p>測試版的 Rails 5.2 使用了熱門的開源工具 FFmpeg 和 MuPDF 來產生影片和 PDF 預覽。透過我們的安全及法務部門審查了這些新的二進位相依檔案，我們發現 MuPDF 採用 AGPL 授權條款，並且需要商業許可才能使用。如果我們在預設情況下簡單地將 MuPDF 加到 Rails 5.2+ 的應用程式中，我們的許多客戶會不知道他們需要購買 MuPDF 才能在商業上使用它。</p>
<p>AGPL 授權條款的限制在 2017 年 9 月引起<a href="https://github.com/rails/rails/pull/30667#issuecomment-332276198">公眾關注</a>。為了準備 5.2 版本，我們的工程師 <a href="https://twitter.com/hone02">Terence Lee</a> 致力於更新 Active Storage，以便 PDF 預覽功能也可以使用沒有商業許可的開源後端程式。我們在 2018 年 2 月向 Rails 提交了一個 PR，<a href="https://github.com/rails/rails/pull/31906">介紹採用 poppler PDF 作為 MuPDF 的替代方案的能力</a>。該 PR 大約在 1 個月後被合併，現在任何 Rails 5.2 使用者，無論是否在 Heroku，都無需購買商業許可即可呈現 PDF 預覽。</p>
<h3 id="展示在-Heroku-使用-Active-Storage"><a href="#展示在-Heroku-使用-Active-Storage" class="headerlink" title="展示在 Heroku 使用 Active Storage"></a>展示在 Heroku 使用 Active Storage</h3><p>如果你已經有實作 Active Storage 的應用程式，則可以<a href="https://devcenter.heroku.com/articles/active-storage-on-heroku?preview=1">跳轉到我們開發中心的 Active Storage 文件</a>。</p>
<p>或者，你可以使用我們的應用程式範例。這是一個 Rails 5.2 應用程式，它是數位布告欄，允許使用者張貼影片、PDF 和圖片。你可以<a href="https://github.com/heroku/active_storage_with_previews_example">在 Github 檢視原始碼</a>或用 Heroku 按鈕部署應用程式：</p>
<p><a href="https://heroku.com/deploy?template=https://github.com/heroku/active_storage_with_previews_example"><img src="/2018/05/22/active-storage-on-heroku/deploy-button.svg" class="" title="發佈到heroku"></a></p>
<blockquote>
<p>注意：這個應用程式範例需要付費的 S3 附加元件。</p>
</blockquote>
<p>以下是該應用程式的範例影片。</p>
<img src="/2018/05/22/active-storage-on-heroku/active-storage.gif" class="" title="範例影片">

<p>當你開啟首頁時，選擇適當的資源檔，然後送出表單。在影片中，<code>mp4</code> 檔案被上傳到 S3，然後透過 <code>ffmpeg</code> 幫助 Rails 產生預覽。很簡約。</p>
<h3 id="在-Heroku-使用-Active-Storage"><a href="#在-Heroku-使用-Active-Storage" class="headerlink" title="在 Heroku 使用 Active Storage"></a>在 Heroku 使用 Active Storage</h3><p>如果你使用按鈕部署應用程式範例，它已經透過 <code>app.json</code> 設定能在 Heroku 上運作，但是，如果你有自己的應用程式想要部署，你要如何設定它以便在 Heroku 上運作？</p>
<p>根據<a href="https://devcenter.heroku.com/articles/active-storage-on-heroku?preview=1">開發中心的 Active Storage 文件</a>，你將需要一個檔案儲存服務，讓你所有的 dynos 都可以與其溝通。該範例使用名為 <a href="https://elements.heroku.com/addons/bucketeer">Bucketeer</a> 的 Heroku S3 附加元件，但你也可以使用現有的 S3 憑證。</p>
<p>馬上開始，請將 S3 的 AWS gem 加到 Gemfile，如果你要修改圖片，請加入 Mini Magick：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">gem <span class="token string">"aws-sdk-s3"</span><span class="token punctuation">,</span> <span class="token keyword">require</span><span class="token punctuation">:</span> <span class="token boolean">false</span>
gem <span class="token string">'mini_magick'</span><span class="token punctuation">,</span> <span class="token string">'~> 4.8'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>更新 Gemfile 後別忘了 <code>$ bundle install</code>。</p>
<p>接下來，在你的 <code>config/storage.yml</code> 檔案中加入一個 <code>amazon</code> 選項來指向 S3 設定，在這個範例中我們使用了由 Bucketeer 設定的配置：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">amazon:
  service: S3
  access_key_id: &lt;%&#x3D; ENV[&#39;BUCKETEER_AWS_ACCESS_KEY_ID&#39;] %&gt;
  secret_access_key: &lt;%&#x3D; ENV[&#39;BUCKETEER_AWS_SECRET_ACCESS_KEY&#39;] %&gt;
  region: &lt;%&#x3D; ENV[&#39;BUCKETEER_AWS_REGION&#39;] %&gt;
  bucket: &lt;%&#x3D; ENV[&#39;BUCKETEER_BUCKET_NAME&#39;] %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後確保你的應用程式設定為在生產環境中使用 <code>:amazon</code> 儲存配置：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">config<span class="token punctuation">.</span>active_storage<span class="token punctuation">.</span>service <span class="token operator">=</span> <span class="token symbol">:amazon</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你忘記了這一步，預設的儲存是使用 <code>:local</code> 將檔案儲存到磁碟。這不是處理生產環境中上傳檔案的可擴展方式。如果你不小心將它部署到 Heroku，首先它會顯示檔案已上傳，但是如果你執行超過一個 dyno，他們會在隨機的請求中消失。當重新啟動 dynos 時，這些檔案將完全消失。你可以在開發中心取得有關 <a href="https://devcenter.heroku.com/articles/active-storage-on-heroku?preview=1#ephemeral-disk">Heroku 的臨時磁碟</a>的更多資訊。</p>
<p>最後，要使其在生產環境中運作的最後一件事是安裝一個客制的建置套件，它將安裝用來產生資源預覽的二進位相依檔案 <code>ffmpeg</code> 和 <code>poppler</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ heroku buildpacks:add -i <span class="token number">1</span> https://github.com/heroku/heroku-buildpack-activestorage-preview<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>一但你完成了，就可以部署到 Heroku！</p>
<h3 id="將-Active-Storage-加到現有應用程式"><a href="#將-Active-Storage-加到現有應用程式" class="headerlink" title="將 Active Storage 加到現有應用程式"></a>將 Active Storage 加到現有應用程式</h3><p>如果你的應用程式還沒有 Active Storage，可以把它加入。首先，你需要執行以下指令啟用 Active Storage：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails active_storage:install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這會新增一個遷移，讓 Rails 追蹤上傳的檔案。</p>
<p>接下來，你需要一個模型來「附加」檔案。你可以使用現有模型或建立新模型。在應用程式範例中，使用了幾乎是空的 <code>bulletin</code> 模型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails generate scaffold bulletin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來，在應用程式上執行遷移：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在資料庫遷移後，更新模型讓 Rails 知道你打算讓它能夠附加檔案：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">Bulletin</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationRecord</span>
  has_one_attached <span class="token symbol">:attachment</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>一旦完成，我們還需要三個部分：上傳附件的表單、儲存附件的控制器以及呈現附件的視圖。</p>
<p>如果你有一個現有的表單，你可以透過 <code>file_field</code> 視圖輔助方法加入一個附件欄位：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form<span class="token punctuation">.</span>file_field <span class="token symbol">:attachment</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你可以在<a href="https://github.com/heroku/active_storage_with_previews_example/blob/ab0370f77f35f8eb0813727b8d49758926450f5e/app/views/welcome/_upload.html.erb#L14">應用程式範例</a>中看到帶有附件的表單範例。一旦有了表單，你將需要保存附件。</p>
<p>在這個應用程式範例中，首頁包含了表單和視圖。附件在 <a href="https://github.com/heroku/active_storage_with_previews_example/blob/ab0370f77f35f8eb0813727b8d49758926450f5e/app/controllers/bulletins_controller.rb#L26-L32">bulletin 控制器</a>被儲存，然後將使用者導回主布告列表：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
  <span class="token variable">@bulletin</span> <span class="token operator">=</span> <span class="token constant">Bulletin</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token variable">@bulletin</span><span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:bulletin</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token symbol">:attachment</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token variable">@bulletin</span><span class="token punctuation">.</span>save<span class="token operator">!</span>

  redirect_back<span class="token punctuation">(</span>fallback_location<span class="token punctuation">:</span> root_path<span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後，在 <a href="https://github.com/heroku/active_storage_with_previews_example/blob/ab0370f77f35f8eb0813727b8d49758926450f5e/app/views/welcome/index.erb">welcome 視圖</a>中，我們迭代每個布告項目，並根據我們的附件類型，以不同的方式呈現。</p>
<p>在 Active Storage 中，對於 PDF 和影片，只要系統安裝了正確的二進位檔案，<code>previewable?</code> 方法將回傳 true。對於圖片，如果安裝了 <code>mini_magick</code>，<code>variable?</code> 方法將回傳 true。如果這些都不是 true，那麼附件可能是一個最好在下載後查看的檔案。下面展示了<a href="https://github.com/heroku/active_storage_with_previews_example/blob/ab0370f77f35f8eb0813727b8d49758926450f5e/app/views/welcome/index.erb#L24-L37">我們如何表示該邏輯</a>：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-bullet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token variable">@bulletin_list</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>bulletin<span class="token operator">|</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">if</span> bulletin<span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>previewable<span class="token operator">?</span> <span class="token delimiter punctuation">%></span></span>
        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to<span class="token punctuation">(</span>image_tag<span class="token punctuation">(</span>bulletin<span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>preview<span class="token punctuation">(</span>resize<span class="token punctuation">:</span> <span class="token string">"200x200>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rails_blob_path<span class="token punctuation">(</span>bulletin<span class="token punctuation">.</span>attachment<span class="token punctuation">,</span> disposition<span class="token punctuation">:</span> <span class="token string">"attachment"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">elsif</span> bulletin<span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>variable<span class="token operator">?</span> <span class="token delimiter punctuation">%></span></span>
        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to<span class="token punctuation">(</span>image_tag<span class="token punctuation">(</span>bulletin<span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>variant<span class="token punctuation">(</span>resize<span class="token punctuation">:</span> <span class="token string">"200x200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rails_blob_path<span class="token punctuation">(</span>bulletin<span class="token punctuation">.</span>attachment<span class="token punctuation">,</span> disposition<span class="token punctuation">:</span> <span class="token string">"attachment"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">else</span> <span class="token delimiter punctuation">%></span></span>
        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">"Download file"</span><span class="token punctuation">,</span> rails_blob_path<span class="token punctuation">(</span>bulletin<span class="token punctuation">.</span>attachment<span class="token punctuation">,</span> disposition<span class="token punctuation">:</span> <span class="token string">"attachment"</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一旦你完成以上所有步驟，並將 Active Storage 設定為在生產環境中運作，使用者就可以輕鬆上傳和下載檔案。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Active Storage</tag>
        <tag>Heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>什麼時候應該在類別內使用 self</title>
    <url>/2018/07/31/when-should-you-use-self-in-your-classes/</url>
    <content><![CDATA[<p>在 Ruby 類別內，你不知道什麼時候需要使用 self，而什麼時候又可以省略，本文將透過範例來做簡單的說明。</p>
<h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">Foo</span>
  attr_writer <span class="token symbol">:bar</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">do_something</span></span>
    bar <span class="token operator">=</span> <span class="token number">123</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在此範例中 <code>bar = 123</code> 會建立一個名稱為 <code>bar</code> 的區域變數，而不是呼叫由 <code>attr_writer</code> 所產生的 <code>bar=</code> 方法，只要加上 <code>self</code> 就可以修正這個問題。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">Foo</span>
  attr_writer <span class="token symbol">:bar</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">do_something</span></span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">123</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>self.bar</code> 便會呼叫我們所預期的 <code>bar=</code> 方法。</p>
<span id="more"></span>

<h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><p>你也可以使用 <code>self</code> 來呼叫與區域變數名稱相同的屬性閱讀器：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">Foo</span>
  attr_reader <span class="token symbol">:bar</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">do_something</span></span>
    bar <span class="token operator">=</span> <span class="token number">123</span>
    puts <span class="token keyword">self</span><span class="token punctuation">.</span>bar
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此處的 <code>bar</code> 與 <code>self.bar</code> 分別為區域變數與實例變數，是兩個不同的東西，因此通常為了避免混淆，最好避免區域變數與存取器名稱相同。</p>
<h3 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h3><pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">People</span>
  attr_accessor <span class="token symbol">:name</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Calvert'</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">greeting</span></span>
    <span class="token string">"Hello, <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>name<span class="token delimiter tag">&#125;</span></span>"</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在這個範例中，可以看到在 <code>greeting</code> 方法中沒有使用 <code>self</code> 來讀取實例變數 <code>name</code>，因為 <code>attr_accessor</code> 會產生以下兩個方法，因此可以省略 <code>self</code> 來讀取 <code>name</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">name</span></span>
  <span class="token variable">@name</span>
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">name</span></span><span class="token operator">=</span><span class="token punctuation">(</span>new_name<span class="token punctuation">)</span>
  <span class="token variable">@name</span> <span class="token operator">=</span> new_name
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>當呼叫設值方法時你必須使用 <code>self.foo = 123</code> 而不是 <code>foo = 123</code>，這樣 Ruby 才會知道你不是要嘗試建立一個新的區域變數。</p>
<p>同樣的，如果你有一個與區域變數相同名稱的方法 <code>greeting</code>，則必須使用 <code>self.greeting</code> 來呼叫該方法，因為使用 <code>greeting</code> 會讀取區域變數而不是呼叫該方法。</p>
<hr>
<p>參考資料</p>
<ul>
<li><a href="https://stackoverflow.com/questions/5068304/in-ruby-when-should-you-use-self-in-your-classes">https://stackoverflow.com/questions/5068304/in-ruby-when-should-you-use-self-in-your-classes</a></li>
<li><a href="https://stackoverflow.com/questions/4699687/when-to-use-self-foo-instead-of-foo-in-ruby-methods">https://stackoverflow.com/questions/4699687/when-to-use-self-foo-instead-of-foo-in-ruby-methods</a></li>
<li><a href="https://stackoverflow.com/questions/10805136/when-to-use-self-in-model">https://stackoverflow.com/questions/10805136/when-to-use-self-in-model</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Ruby on Rails 使用時區</title>
    <url>/2018/09/18/working-with-time-zones-in-ruby-on-rails/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>VARVET BLOG</strong> — <a href="https://www.varvet.com/blog/working-with-time-zones-in-ruby-on-rails">WORKING WITH TIME ZONES IN RUBY ON RAILS</a></p>
</blockquote>
<p>Rails 提供了很好的工具來處理時區，但仍有很多事情可能會出錯。這篇文章會點出這些問題並提供解決方案。</p>
<p>讓我被欺騙最多次的應該是，Rails 會愚弄你，讓你誤以為它替你處理好了所有和時間有關的部分。別誤會我的意思，我希望 Rails 盡可能的為我做更多事情，但在學習的過程中由於不夠熟悉 Rails 為我做了些什麼，因此碰到了許多困難。另外需要注意的是，在處理時區上，有更多是你意想不到需要處理的。需要考慮資料庫、伺服器、開發機器、系統設定、使用者設定和瀏覽器。</p>
<span id="more"></span>

<h3 id="設定你的-Rails-應用程式"><a href="#設定你的-Rails-應用程式" class="headerlink" title="設定你的 Rails 應用程式"></a>設定你的 Rails 應用程式</h3><p>作為 Rails 開發人員，我們可以使用哪些工具？最重要的一個是 <code>config/application.rb</code> 檔案中的 <code>config.time_zone</code> 設定。Active Record 會協助你轉換 UTC 和你選擇的時區（文件沒有解釋）。也就是，如果你所做的只是要透過表單取得用戶文章發佈時間，並使用 Active Record 來保存它，那麼你可以開始了。</p>
<h3 id="處理時間資訊"><a href="#處理時間資訊" class="headerlink" title="處理時間資訊"></a>處理時間資訊</h3><p>那麼在保存時間資訊前要做些什麼呢？</p>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>重要的是永遠不要在沒有指定時區的情況下解析時間資訊。最好的方法是使用 <code>Time.zone.parse</code>（會使用 <code>config.time_zone</code> 指定的時區）而不是使用 <code>Time.parse</code>（會使用電腦的時區）。</p>
<h4 id="使用數字和-Active-Record-屬性"><a href="#使用數字和-Active-Record-屬性" class="headerlink" title="使用數字和 Active Record 屬性"></a>使用數字和 Active Record 屬性</h4><p>如果可以，請使用如 <code>2.hours.ago</code> 這樣的方法，它會使用你設定的時區！Active Record 模型的時間屬性也是如此。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">post <span class="token operator">=</span> <span class="token constant">Post</span><span class="token punctuation">.</span>first
post<span class="token punctuation">.</span>published_at
<span class="token comment"># => Fri, 10 Aug 2018 00:00:00 JST +09:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>Active Record 從資料庫取得 UTC 時間，並將其轉換為 <code>config.time_zone</code> 中設定的時區。</p>
<h4 id="Date-與-Time"><a href="#Date-與-Time" class="headerlink" title="Date 與 Time"></a>Date 與 Time</h4><p><code>Time</code> 包含日期和時間資訊，但是 <code>Date</code> 只有日期資訊。即使你認為時間資訊並不重要，但很快地就會意識到它的重要性。安全地使用 <code>Time</code>（或 <code>DateTime</code>，如果你需要支援較遠的時間）。</p>
<p>假設你需要將日期視為時間，至少要確保將它轉換為你設定的時區：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token number">1.</span>day<span class="token punctuation">.</span>from_now
<span class="token comment"># => Sat, 11 Aug 2018 12:11:11 JST +09:00</span>

<span class="token constant">Date</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>in_time_zone
<span class="token comment"># => Fri, 10 Aug 2018 00:00:00 JST +09:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>永遠別用：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Date</span><span class="token punctuation">.</span>today<span class="token punctuation">.</span>to_time
<span class="token comment"># => 2018-08-10 00:00:00 +0800</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="查詢"><a href="#查詢" class="headerlink" title="查詢"></a>查詢</h3><p>由於 Rails 知道時間資訊是以 UTC 格式儲存於資料庫中，它會將你給它的任何時間轉換為 UTC。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Post</span><span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'posts.published_at > ?'</span><span class="token punctuation">,</span> <span class="token builtin">Time</span><span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>永遠不要手動建立查詢字串，應使用 <code>Time.current</code> 取得目前時間，以確保時間資訊是正確的。</p>
<h3 id="使用於-APIs"><a href="#使用於-APIs" class="headerlink" title="使用於 APIs"></a>使用於 APIs</h3><h4 id="提供端"><a href="#提供端" class="headerlink" title="提供端"></a>提供端</h4><p>建立 Web API 提供其他人使用？請確保始終以 UTC 格式傳送所有時間資料。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token builtin">Time</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>utc<span class="token punctuation">.</span>iso8601
<span class="token comment"># => "2018-08-10T03:11:35Z"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在此閱讀更多關於為什麼 iso8601 是好的：<a href="http://devblog.avdi.org/2009/10/25/iso8601-dates-in-ruby/">http://devblog.avdi.org/2009/10/25/iso8601-dates-in-ruby/</a></p>
<h4 id="用戶端"><a href="#用戶端" class="headerlink" title="用戶端"></a>用戶端</h4><p>當你從外部 API 取得時間資訊時，你無法掌控它，只需要確定它傳送給你的格式和時區。因為 <code>Time.zone.parse</code> 可能無法使用在你收到的格式，你可能需要使用：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token builtin">Time</span><span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>time_string<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%dT%H:%M:%S%z'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>in_time_zone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面的範例假設了 time_string 是 iso8601 格式的字串。當時間字串的格式與格式樣板參數不匹配時，<code>strptime</code> 會拋出一個非常不直覺的錯誤。<code>in_time_zone</code> 預設會使用 Rails 設定的時區。</p>
<blockquote>
<p>目前可以使用 <code>Time.zone.strptime</code> 或 <code>Time.zone.parse</code> 來解析時間資訊。</p>
</blockquote>
<h3 id="使用用戶時區"><a href="#使用用戶時區" class="headerlink" title="使用用戶時區"></a>使用用戶時區</h3><p>許多系統需要支援用戶在各種時區輸入和查看時間資訊。要實現此目的，你需要儲存每個用戶的時區（可能只是一個在 <code>rake time:zones:all</code> 中找到的時區字串名稱）。然後，要實際使用該時區最常見的方式是在 ActionController 中建立一個私有方法，並將其作為 <code>around_action</code> 執行。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">around_action <span class="token symbol">:user_time_zone</span><span class="token punctuation">,</span> <span class="token keyword">if</span><span class="token punctuation">:</span> <span class="token symbol">:current_user</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">user_time_zone</span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
  <span class="token builtin">Time</span><span class="token punctuation">.</span>use_zone<span class="token punctuation">(</span>current_user<span class="token punctuation">.</span>time_zone<span class="token punctuation">,</span> <span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這與 <code>config.time_zone</code> 做的事完全相同，但是是基於每個請求。我仍然建議將預設的 <code>config.time_zone</code> 更改為用戶的預設時區。</p>
<h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>以上所有內容都是測試應該涵蓋的範圍。問題是你作為開發伺服器的用戶和電腦恰好位於同一時區。在生產環境中這種情況很少發生。</p>
<p>有一個 <a href="https://github.com/alindeman/zonebie">Zonebie</a> gem 可以幫助你解決這個問題。我還沒有時間試試看，但看起來很有希望。如果你覺得這有點矯枉過正，至少要確保你的測試執行時將 <code>Time.zone</code> 設定為另一時區，而不是開發機所在的時區！</p>
<h3 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h3><h4 id="可以做"><a href="#可以做" class="headerlink" title="可以做"></a>可以做</h4><pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token number">2.</span>hours<span class="token punctuation">.</span>ago
<span class="token comment"># => Fri, 10 Aug 2018 10:12:02 JST +09:00</span>

<span class="token number">1.</span>day<span class="token punctuation">.</span>from_now
<span class="token comment"># => Sat, 11 Aug 2018 12:12:15 JST +09:00</span>

<span class="token builtin">Time</span><span class="token punctuation">.</span>zone<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'2018-08-08T12:34:56Z'</span><span class="token punctuation">)</span>
<span class="token comment"># => Wed, 08 Aug 2018 21:34:56 JST +09:00</span>

<span class="token builtin">Time</span><span class="token punctuation">.</span>current
<span class="token comment"># => Fri, 10 Aug 2018 12:12:40 JST +09:00</span>

<span class="token builtin">Time</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>utc<span class="token punctuation">.</span>iso8601
<span class="token comment"># 當提供 API 時（"2018-08-10T03:12:47Z"）</span>

<span class="token builtin">Time</span><span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2018-08-08T12:34:56Z'</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%dT%H:%M:%S%z'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>in_time_zone
<span class="token comment"># 如果你不能使用 Time.zone.parse（Wed, 08 Aug 2018 21:34:56 JST +09:00）</span>

<span class="token constant">Date</span><span class="token punctuation">.</span>current
<span class="token comment"># 如果由於某種原因你真的不能有 Time 或 DateTime（Fri, 10 Aug 2018）</span>

<span class="token constant">Date</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>in_time_zone
<span class="token comment"># 如果你有日期並希望充分利用它（Fri, 10 Aug 2018 00:00:00 JST +09:00）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="不可以做"><a href="#不可以做" class="headerlink" title="不可以做"></a>不可以做</h4><pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token builtin">Time</span><span class="token punctuation">.</span>now
<span class="token comment"># 返回系統時間並忽略你設定的時區。（2018-08-10 11:13:30 +0800）</span>

<span class="token builtin">Time</span><span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'2015-08-27T12:09:36Z'</span><span class="token punctuation">)</span>
<span class="token comment"># 會假設時間字串是在系統的時區。（2015-08-27 12:09:36 UTC）</span>

<span class="token builtin">Time</span><span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2015-08-27T12:09:36Z'</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%dT%H:%M:%S%z'</span><span class="token punctuation">)</span>
<span class="token comment"># 與 Time.parse 相同的問題。（2015-08-27 12:09:36 UTC）</span>

<span class="token constant">Date</span><span class="token punctuation">.</span>today
<span class="token comment"># 取決於機器的時區，這可能是昨天或明天，更多相關資訊，請參閱 https://github.com/ramhoj/time-zone-article/issues/1。（Fri, 10 Aug 2018）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝、設定 Golang 的 GOPATH 和 Go 工作區</title>
    <url>/2019/11/01/golang-installation-setup-gopath-workspace/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-installation-setup-gopath-workspace">Golang Installation, Setup, GOPATH, and Go Workspace</a></p>
</blockquote>
<p>Go 是 Google 建立的開源、靜態型別的編譯語言。</p>
<p>它結合了靜態型別和動態型別語言的優點，並為你提供了有效率和輕鬆撰寫程式的完美組合。它主要適合用於快速建立、高效能和可靠的伺服器端應用程式。</p>
<span id="more"></span>

<p>以下是 Go 最著名的功能：</p>
<ul>
<li><p>安全：型別安全及記憶體安全</p>
</li>
<li><p>對並發和通訊的良好支援</p>
</li>
<li><p>高效能且無延遲的垃圾回收</p>
</li>
<li><p>編譯快速</p>
</li>
<li><p>卓越的工具支援</p>
</li>
</ul>
<p>這是我們 Go <a href="/tags#Golang">教學系列</a>的第一部份。在本文中，你將學到如何在系統中安裝 Go，以及如何為 Go 專案設定開發環境。</p>
<h3 id="安裝-Go"><a href="#安裝-Go" class="headerlink" title="安裝 Go"></a>安裝 Go</h3><p>Go 二進位發行版適用於所有主要作業系統，如 Linux、Windows 和 macOS。從二進位發行版安裝 Go 非常簡單。</p>
<p>如果沒有適用於你的作業系統的二進位發行版，可以嘗試<a href="https://golang.org/doc/install/source">從原始碼安裝 Go</a>。</p>
<h4 id="Mac-OS-X"><a href="#Mac-OS-X" class="headerlink" title="Mac OS X"></a>Mac OS X</h4><h5 id="使用-Homebrew"><a href="#使用-Homebrew" class="headerlink" title="使用 Homebrew"></a>使用 Homebrew</h5><p>在 macOS 中安裝 Go 最簡單的方法是使用 <a href="https://brew.sh/">Homebrew</a>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="使用-macOS-package-安裝程式"><a href="#使用-macOS-package-安裝程式" class="headerlink" title="使用 macOS package 安裝程式"></a>使用 macOS package 安裝程式</h5><p>從 <a href="https://golang.org/dl">Go 的官方下載頁面</a>下載最新的 Go 安裝程式（<code>.pkg</code>）。開啟安裝程式並按照畫面上的說明安裝 Go。預設情況下，Go 會安裝在 <code>/usr/local/go</code> 中。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>從 <a href="https://golang.org/dl">Go 的官方下載頁面</a>下載 Linux 發行版，並解壓縮到 <code>/usr/local</code> 目錄中。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> -C /usr/local -xzf go<span class="token variable">$VERSION</span><span class="token builtin class-name">.</span><span class="token variable">$OS</span>-<span class="token variable">$ARCH</span>.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來，將 <code>/usr/local/go/bin</code> 目錄加到 PATH 環境變數中。你可以透過將下面這行加到 <code>~/.bash_profile</code> 檔案中來完成此操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/go/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你也可以使用 <code>/opt/go</code> 之類的任何其他目錄代替 <code>/usr/local</code> 來安裝 Go。</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>從 <a href="https://golang.org/dl">Go 的官方下載頁面</a>下載 Windows MSI 安裝程式。開啟安裝程式並按照畫面上的說明安裝 Go。預設情況下，Go 會安裝在 <code>C:\Go</code> 中。</p>
<h3 id="Go-工具"><a href="#Go-工具" class="headerlink" title="Go 工具"></a>Go 工具</h3><p>Go 發行版包含了 <a href="https://golang.org/cmd/go">Go 工具</a>。它是一個命令列工具，可讓你自動執行常見任務，如下載和安裝相依套件，建置和測試程式碼等。</p>
<p>按照上一節中的說明安裝 <code>Go</code> 之後，你應該可以透過在命令列中輸入 <code>go</code> 來執行 <em>Go 工具</em> ：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go
Go is a tool <span class="token keyword">for</span> managing Go <span class="token builtin class-name">source</span> code.

Usage:

    go <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>arguments<span class="token punctuation">]</span>

The commands are:

    build       compile packages and dependencies
    clean       remove object files
    doc         show documentation <span class="token keyword">for</span> package or symbol
    <span class="token function">env</span>         print Go environment information
    bug         start a bug report
    fix         run go tool fix on packages
    <span class="token function">fmt</span>         run gofmt on package sources
    generate    generate Go files by processing <span class="token builtin class-name">source</span>
    get         download and <span class="token function">install</span> packages and dependencies
    <span class="token function">install</span>     compile and <span class="token function">install</span> packages and dependencies
    list        list packages
    run         compile and run Go program
    <span class="token builtin class-name">test</span>        <span class="token builtin class-name">test</span> packages
    tool        run specified go tool
    version     print Go version
    vet         run go tool vet on packages

Use <span class="token string">"go help [command]"</span> <span class="token keyword">for</span> <span class="token function">more</span> information about a command.

Additional <span class="token builtin class-name">help</span> topics:

    c           calling between Go and C
    buildmode   description of build modes
    filetype    <span class="token function">file</span> types
    gopath      GOPATH environment variable
    environment environment variables
    importpath  <span class="token function">import</span> path syntax
    packages    description of package lists
    testflag    description of testing flags
    testfunc    description of testing functions

Use <span class="token string">"go help [topic]"</span> <span class="token keyword">for</span> <span class="token function">more</span> information about that topic.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="GOPATH、Go-工作區及程式碼組織"><a href="#GOPATH、Go-工作區及程式碼組織" class="headerlink" title="GOPATH、Go 工作區及程式碼組織"></a>GOPATH、Go 工作區及程式碼組織</h3><p>Go 要求你以特定方式組織程式碼：</p>
<blockquote>
<p>按照慣例，你所有的 Go 程式碼和匯入的程式碼必須位於單一<strong>工作區</strong>中。工作區只是檔案系統中的目錄，其路徑儲存於環境變數 <code>GOPATH</code> 中。</p>
</blockquote>
<p><strong>工作區</strong>的根目錄中包含以下子目錄：</p>
<ul>
<li><p><strong><code>src</code></strong>: <em>包含 Go 原始碼檔案</em>.</p>
<p><code>src</code> 目錄通常包含許多版本控制儲存庫，其中包含一個或多個 Go package。每個 Go 原始檔都屬於一個 package。通常，你會在儲存庫內為每個獨立的 Go package 建立一個新的子目錄。</p>
</li>
<li><p><strong><code>bin</code></strong>: <em>包含執行檔</em>.</p>
<p>Go 工具會建置和安裝執行檔到這個目錄。所有想要成為可執行檔的 Go 程式都必須包含名為 <code>main</code> 的特殊 package 原始檔，並在名為 <code>main()</code> 的特殊函數中定義程式的進入點。</p>
</li>
<li><p><strong><code>pkg</code></strong>: <em>包含 Go package 檔案（<code>.a</code>）</em>.</p>
<p>所有不可執行的 package（共享函式庫）都儲存在此目錄中。你不能直接執行這些 package，因為他們不是可執行檔。他們通常是在其他可執行 package 中匯入和使用。</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># A typical Go workspace</span>
bin/
    myapp                           <span class="token comment"># Executable binary</span>
    hello                           <span class="token comment"># Executable binary</span>
pkg/
   github.com/callicoder/example/
       numbers.a                    <span class="token comment"># Package archive</span>
       strings.a                    <span class="token comment"># Package archive</span>
   github.com/gorilla/
       mux.a                        <span class="token comment"># Package archive</span>
   go.uber.org/
       zap.a                        <span class="token comment"># Package archive</span>
src/
    github.com/callicoder/example/  <span class="token comment"># Project repository</span>
       .git/
       myapp/
          app.go                    <span class="token comment"># Executable program containing main package and function</span>
       numbers/                     <span class="token comment"># Go Package (contains utility functions for working with numbers)</span>
          prime.go
          prime_test.go
       strings/                     <span class="token comment"># Go Package (contains utility functions for working with strings)</span>
          reverse.go
          trim.go
    github.com/gorilla/mux/         <span class="token comment"># 3rd Party package</span>
       <span class="token comment">#... package contents</span>
    go.uber.org/zap/                <span class="token comment"># 3rd Party package</span>
       <span class="token comment">#... package contents</span>
    hello/                          <span class="token comment"># Local package (not published anywhere)</span>
       hello.go

    <span class="token comment"># ... (more repositories and packages omitted) ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="設定-GOPATH"><a href="#設定-GOPATH" class="headerlink" title="設定 GOPATH"></a>設定 GOPATH</h4><p>GOPATH 環境變數指定了工作區的位置。預設情況下，在 Unix 系統上 <code>GOPATH</code> 被假定為 <code>$HOME/go</code>，在 Windows 上被假定為 <code>%USERPROFILE%\go</code>。如果你滿意這個路徑，則無需執行任何操作。你可以在家目錄中建立名為 <code>go</code> 的工作區目錄，然後開始撰寫 Go 程式碼。</p>
<p>如果想要使用自訂位置作為工作區，你可以按照以下說明設定 <code>GOPATH</code> 環境變數：</p>
<h5 id="Unix-系統（Linux-和-macOS）"><a href="#Unix-系統（Linux-和-macOS）" class="headerlink" title="Unix 系統（Linux 和 macOS）"></a>Unix 系統（Linux 和 macOS）</h5><p>在 Bash shell 中設定 <code>GOPATH</code>，將下面一行加到 <code>~/.bash_profile</code> 檔案中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你使用 <strong>Zsh</strong> shell，那麼你需要將上面一行加到 <code>~/.zshrc</code> 檔案中。</p>
<h5 id="Windows-系統"><a href="#Windows-系統" class="headerlink" title="Windows 系統"></a>Windows 系統</h5><p>假設你要將工作區目錄放置在 <code>C:\go-workspace</code>。以下是設定 <code>GOPATH</code> 環境變數以使用此工作區位置的方法：</p>
<ul>
<li><p>在 <code>C:\go-workspace</code> 建立工作區資料夾。</p>
</li>
<li><p>Right click on <strong>Start</strong> → click <strong>Control Panel</strong> → Select <strong>System and Security</strong> → click on <strong>System</strong>.</p>
</li>
<li><p>From the menu on the left, select the <strong>Advanced systems settings</strong>.</p>
</li>
<li><p>Click the <strong>Environment Variables</strong> button at the bottom.</p>
</li>
<li><p>Click <strong>New</strong> from the <strong>User variables</strong> section.</p>
</li>
<li><p>Type <code>GOPATH</code> into the <strong>Variable name</strong> field.</p>
</li>
<li><p>Type <code>C:\go-workspace</code> into the <strong>Variable value</strong> field.</p>
</li>
<li><p>Click OK.</p>
</li>
</ul>
<p>注意，<code>GOPATH</code> 必須與 Go 安裝路徑不同。</p>
<h3 id="使用-Hello-World-程式測試-Go-是否正確安裝"><a href="#使用-Hello-World-程式測試-Go-是否正確安裝" class="headerlink" title="使用 Hello World 程式測試 Go 是否正確安裝"></a>使用 <code>Hello World</code> 程式測試 Go 是否正確安裝</h3><p>首先，確定已經在 <code>$HOME/go</code> 建立了 Go 工作區目錄。接下來，在工作區中建立一個新目錄 <code>src/hello</code>。最後，使用以下程式碼建立一個名為 <code>hello.go</code> 的檔案：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ cd $HOME&#x2F;go&#x2F;src&#x2F;hello
$ ls
hello.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>執行以上程式最簡單的方法是使用 <code>go run</code> 指令：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go run hello.go
Hello, World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="使用-go-build-建置執行檔"><a href="#使用-go-build-建置執行檔" class="headerlink" title="使用 go build 建置執行檔"></a>使用 <code>go build</code> 建置執行檔</h4><p><code>go run</code> 指令會編譯和執行程式一次。但是，如果你想從 Go 原始碼產生一個執行檔，可以在不使用 Go 工具的情況下將其作為獨立的可執行檔來執行，則可以使用 <code>go build</code> 指令：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cd $HOME&#x2F;go&#x2F;src&#x2F;hello
$ go build
$ ls
hello hello.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>go build</code> 指令會建立一個名稱與 package（<code>hello</code>）相同的可執行檔。你可以像這樣執行它：</p>
<pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;hello
Hello, World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="使用-go-install-安裝-package-到-bin-目錄中"><a href="#使用-go-install-安裝-package-到-bin-目錄中" class="headerlink" title="使用 go install 安裝 package 到 bin 目錄中"></a>使用 <code>go install</code> 安裝 package 到 <code>bin</code> 目錄中</h4><p>你可以使用 <code>go install</code> 指令來建置並安裝執行檔到工作區的 <code>bin</code> 目錄：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cd $HOME&#x2F;go&#x2F;src&#x2F;hello
$ go install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ cd $HOME&#x2F;go&#x2F;bin
$ ls
hello
$ .&#x2F;hello
Hello, World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你也可以將 <code>$HOME/go/bin</code> 目錄加到 <code>PATH</code> 變數，以便從任何位置執行 go 可執行檔。</p>
<p><strong>別忘了查看：<code>go help run</code>、<code>go help build</code> 和 <code>go help install</code>。</strong></p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>希望你能深入研究並進一步了解 Go 程式語言，你可以從 <a href="/tags#Golang">Golang 分類</a>中找到所有用 Go 撰寫的教學。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>哈囉 Golang：撰寫你的第一個 Golang 程式</title>
    <url>/2019/11/04/writing-your-first-golang-program/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-introduction-hello-world">Hello Golang: Writing your first Golang Program</a></p>
</blockquote>
<p>當我們開始學習一種新的程式語言時，通常會先要撰寫經典的「Hello, World」程式。</p>
<p>讓我們用 Go 撰寫「Hello, World」程式，並了解其工作原理。開啟你慣用的文字編輯器，建立一個名為 <code>hello.go</code> 的新檔案，然後輸入以下程式碼：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// My first Program</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>你可以像這樣使用 <code>go run</code> 指令來執行上面的程式：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go run hello.go
Hello, World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>go run</code> 指令做了兩件事：它先將程式編譯成機器碼，然後執行編譯後的程式碼。</p>
<p>但是，如果你想從 Go 原始碼產生一個執行檔，可以在不使用 Go 工具的情況下將其作為獨立的可執行檔來執行，則可以使用 <code>go build</code> 指令：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go build hello.go
$ ls
hello		hello.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>你可以像這樣執行它：</p>
<pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;hello
Hello, World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="了解「Hello-World」程式"><a href="#了解「Hello-World」程式" class="headerlink" title="了解「Hello, World」程式"></a>了解「Hello, World」程式</h3><p>讓我們逐行瀏覽「Hello, World」程式並了解它：</p>
<ul>
<li><p><strong>第 1 行：</strong> 以 <code>//</code> 開頭的是註解：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// My first Program</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Go 編譯器會忽略註解。他們用來讓其他人更容易理解你的程式碼。</p>
<p>Go 支援兩種不同樣式的註解：</p>
<ul>
<li><p>單行註解</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// This is a Single line Comment. Everything in this line is ignored by the compiler</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>多行註解</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*
  This is a Multi line Comment.
  As the name suggests, It can span multiple lines.
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><strong>第 2 行：</strong> package 宣告：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>每個 Go 程式都始於 package 宣告。Package 用於將相關的 Go 原始碼檔案組織在一起，使其可重複使用。</p>
<p>Package「main」是一個特殊的 Go package，與預計要可以執行的程式一起使用。</p>
<p>Go 中有兩種類型的程式：可執行程式和函式庫。可執行程式是可以從命令列執行的程式。函式庫是可重複使用的程式碼片段，被其他程式用來執行某些任務。</p>
</li>
<li><p><strong>第 3 行：</strong> import 陳述式：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"fmt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>關鍵字 <code>import</code> 用於從其他 package 中匯入可重複使用的程式碼片段，以便在我們的程式中使用。</p>
<p>Package「fmt」包含用於處理 I/O 的程式碼。</p>
</li>
<li><p><strong>第 4 行：</strong> 函數宣告：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  函數是程式碼單元，包含一個或多個用來執行任務的指令。通常，我們將程式分解為一些較小的函數，這些函數接受一些輸入，對輸入進行一些處理並產生輸出。</p>
<p>  在 Go 中是使用 <code>func</code> 關鍵字宣告函數。</p>
<p><code>main()</code> 函數是 Go 中可執行程式的進入點。這是執行可執行程式時先被呼叫的地方。</p>
</li>
<li><p><strong>第 5 行：</strong> 這行包含對 <code>fmt</code> package 的 <code>Println()</code> 函數的呼叫：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我們將字串「Hello, World」傳遞給 <code>Println()</code> 函數，該函數將它連同新的一行一起列印到標準輸出中。</p>
</li>
</ul>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>恭喜！你撰寫了你的第一個 Go 的程式，謝謝你的閱讀。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 基本型別、運算子和型別轉換</title>
    <url>/2019/11/05/golang-basic-types-operators-type-conversion/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-basic-types-operators-type-conversion">Golang Basic Types, Operators and Type Conversion</a></p>
</blockquote>
<p>Go 是靜態型別的程式語言。Golang 中的每個變數都有關聯的型別。</p>
<p>資料型別會對一組相關的資料集進行分類。它們定義了資料如何儲存在記憶體中、特定資料型別的變數可能儲存的值以及可以對其執行的運算。</p>
<p>Golang 具有多種內建的資料型別，用於表示常見的值，如數字、布林值、字串等。在本文中，我們將逐一介紹這些基本資料型別，並了解它們的工作原理。</p>
<span id="more"></span>

<h3 id="數字型別"><a href="#數字型別" class="headerlink" title="數字型別"></a>數字型別</h3><p>數字型別用於表示數字。可以分為整數和浮點數型別：</p>
<h4 id="1-整數"><a href="#1-整數" class="headerlink" title="1. 整數"></a>1. 整數</h4><p>整數用於儲存整數。Go 具有多種大小不一的內建整數型別，用於儲存有號數和無號數：</p>
<h5 id="有號數"><a href="#有號數" class="headerlink" title="有號數"></a>有號數</h5><table>
<thead>
<tr>
<th>型別</th>
<th>大小</th>
<th>範圍</th>
</tr>
</thead>
<tbody><tr>
<td>int8</td>
<td>8 bits</td>
<td>-128 到 127</td>
</tr>
<tr>
<td>int16</td>
<td>16 bits</td>
<td>-2<sup>15</sup> 到 2<sup>15</sup> -1</td>
</tr>
<tr>
<td>int32</td>
<td>32 bits</td>
<td>-2<sup>31</sup> 到 2<sup>31</sup> -1</td>
</tr>
<tr>
<td>int64</td>
<td>64 bits</td>
<td>-2<sup>63</sup> 到 2<sup>63</sup> -1</td>
</tr>
<tr>
<td>int</td>
<td>取決於平台</td>
<td>取決於平台</td>
</tr>
</tbody></table>
<p>泛型 <code>int</code> 型別的大小取決於平台。在 32 位元系統上，它的大小為 32 位元，在 64 位元系統上，它的大小為 64 位元。</p>
<h5 id="無號數"><a href="#無號數" class="headerlink" title="無號數"></a>無號數</h5><table>
<thead>
<tr>
<th>型別</th>
<th>大小</th>
<th>範圍</th>
</tr>
</thead>
<tbody><tr>
<td>uint8</td>
<td>8 bits</td>
<td>0 到 255</td>
</tr>
<tr>
<td>uint16</td>
<td>16 bits</td>
<td>0 到 2<sup>16</sup> -1</td>
</tr>
<tr>
<td>uint32</td>
<td>32 bits</td>
<td>0 到 2<sup>32</sup> -1</td>
</tr>
<tr>
<td>uint64</td>
<td>64 bits</td>
<td>0 到 2<sup>64</sup> -1</td>
</tr>
<tr>
<td>uint</td>
<td>取決於平台</td>
<td>取決於平台</td>
</tr>
</tbody></table>
<p><code>uint</code> 型別的大小取決於平台。在 32 位元系統上，它的大小為 32 位元，在 64 位元系統上，它的大小為 64 位元。</p>
<p><em>使用整數值時，除非有充分的理由使用有號數或無號數，否則應該始終使用 <code>int</code> 資料型別。</em></p>
<p>在 Golang 中，你可以使用前綴 <code>0</code> 來宣告八進制數字，以及使用前綴 <code>0x</code> 或 <code>0X</code> 來宣告十六進制數字。以下是整數型別的完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> myInt8 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">97</span>

	<span class="token comment">/*
	  When you don't declare any type explicitly, the type inferred is `int`
	  (The default type for integers)
	*/</span>
	<span class="token keyword">var</span> myInt <span class="token operator">=</span> <span class="token number">1200</span>

	<span class="token keyword">var</span> myUint <span class="token builtin">uint</span> <span class="token operator">=</span> <span class="token number">500</span>

	<span class="token keyword">var</span> myHexNumber <span class="token operator">=</span> <span class="token number">0xFF</span>  <span class="token comment">// Use prefix '0x' or '0X' for declaring hexadecimal numbers</span>
	<span class="token keyword">var</span> myOctalNumber <span class="token operator">=</span> <span class="token number">034</span> <span class="token comment">// Use prefix '0' for declaring octal numbers</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d, %#x, %#o\n"</span><span class="token punctuation">,</span> myInt8<span class="token punctuation">,</span> myInt<span class="token punctuation">,</span> myUint<span class="token punctuation">,</span> myHexNumber<span class="token punctuation">,</span> myOctalNumber<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
97, 1200, 500, 0xff, 034<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="整數型別別名"><a href="#整數型別別名" class="headerlink" title="整數型別別名"></a>整數型別別名</h5><p>Golang 還有另外兩個稱為 <code>byte</code> 和 <code>rune</code> 的整數型別，分別是 <code>uint8</code> 和 <code>int32</code> 資料型別的別名。</p>
<table>
<thead>
<tr>
<th>別名</th>
<th>型別</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>uint8</td>
</tr>
<tr>
<td>rune</td>
<td>int32</td>
</tr>
</tbody></table>
<p>在 Go 語言中，<code>byte</code> 和 <code>rune</code> 資料型別用於區分字元和整數值。</p>
<p>Golang 沒有 <code>char</code> 資料型別。它使用 <code>byte</code> 和 <code>rune</code> 來表示字元值。<code>byte</code> 資料型別用於表示 <a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a> 字元，以及 <code>rune</code> 資料型別用於表示以 <a href="http://www.utf-8.com/">UTF-8</a> 格式編碼的一組更廣泛的 <a href="http://www.unicode.org/">Unicode</a> 字元。</p>
<p>要在 Golang 中表示字元可以像這樣透過單引號將它們括起來：<code>&#39;A&#39;</code>。</p>
<p>字元值的預設型別是 <code>rune</code>。也就是說，當宣告帶有字元值的變數而未明確指定型別時，則 Go 會將型別推斷為 <code>rune</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> firstLetter <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token comment">// Type inferred as `rune` (Default type for character values)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你可以透過明確地指定型別來建立 <code>byte</code> 變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> lastLetter <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'Z'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>byte</code> 和 <code>rune</code> 資料型別本質上都是整數。舉例來說，具有值 <code>&#39;a&#39;</code> 的 <code>byte</code> 變數會轉換為整數 97。</p>
<p>相同的，具有 Unicode 值 <code>&#39;♥&#39;</code> 的 <code>rune</code> 變數會轉換為相應的 Unicode 代碼點 <code>U + 2665</code>，其中 <code>U+</code> 代表 Unicode，且數字是十六進制，本質上是整數。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> myByte <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'a'</span>
	<span class="token keyword">var</span> myRune <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token string">'♥'</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c = %d and %c = %U\n"</span><span class="token punctuation">,</span> myByte<span class="token punctuation">,</span> myByte<span class="token punctuation">,</span> myRune<span class="token punctuation">,</span> myRune<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
a &#x3D; 97 and ♥ &#x3D; U+2665<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在上面的範例中，我以字元和十進制格式印出變數 <code>myByte</code>，並以字元和 Unicode 格式印出變數 <code>myRune</code>。</p>
<h4 id="2-浮點數型別"><a href="#2-浮點數型別" class="headerlink" title="2. 浮點數型別"></a>2. 浮點數型別</h4><p>浮點數型別用於儲存帶小數部分的數字（如：1.24、4.50000）。Go 有兩種浮點數型別：<code>float32</code> 和 <code>float64</code>。</p>
<ul>
<li><code>float32</code> 在記憶體中佔用 32 位元，並以單精度浮點數格式儲存數值。</li>
<li><code>float64</code> 在記憶體中佔用 64 位元，並以雙精度浮點數格式儲存數值。</li>
</ul>
<p>浮點數的預設型別是 <code>float64</code>。因此，當你使用初始值初始化浮點數變數而未明確指定型別時，編譯器會將型別推斷為 <code>float64</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">9715.635</span>   <span class="token comment">// Type inferred as `float64` (the default type for floating-point numbers)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="數字型別的運算"><a href="#數字型別的運算" class="headerlink" title="數字型別的運算"></a>數字型別的運算</h4><p>Go 提供了多種用於對數字型別執行運算的運算子：</p>
<ul>
<li>算術運算子：<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></li>
<li>比較運算子：<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li>
<li>位元運算子：<code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li>
<li>遞增和遞減運算子：<code>++</code>, <code>--</code></li>
<li>賦值運算子：<code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>|=</code>, <code>^=</code></li>
</ul>
<p>以下是上述一些運算子的範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>
	<span class="token keyword">var</span> res1 <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">// Arithmetic operations</span>

	a<span class="token operator">++</span> <span class="token comment">// Increment a by 1</span>

	b <span class="token operator">+=</span> <span class="token number">10</span> <span class="token comment">// Increment b by 10</span>

	<span class="token keyword">var</span> res2 <span class="token operator">=</span> a <span class="token operator">^</span> b <span class="token comment">// Bitwise XOR</span>

	<span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">3.5</span>
	<span class="token keyword">var</span> res3 <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> r <span class="token operator">*</span> r <span class="token comment">// Operations on floating-point type</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"res1 : %v, res2 : %v, res3 : %v\n"</span><span class="token punctuation">,</span> res1<span class="token punctuation">,</span> res2<span class="token punctuation">,</span> res3<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
res1 : 40, res2 : 10, res3 : 38.48451000647496<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="布林值"><a href="#布林值" class="headerlink" title="布林值"></a>布林值</h3><p>Go 提供了一種稱為 <code>bool</code> 的資料型別來儲存布林值。它有兩個可能的值：<code>true</code> 和 <code>false</code>。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myBoolean <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">var</span> anotherBoolean <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="布林值型別的運算"><a href="#布林值型別的運算" class="headerlink" title="布林值型別的運算"></a>布林值型別的運算</h4><p>你可以對布林值使用以下運算子：</p>
<p><strong>邏輯運算子：</strong></p>
<ul>
<li><code>&amp;&amp;</code>（與，and）</li>
<li><code>||</code>（或，or）</li>
<li><code>!</code> （否定）</li>
</ul>
<p><strong>相等和不相等：</strong> <code>==</code>, <code>!=</code></p>
<p>運算子 <code>&amp;&amp;</code> 和 <code>||</code> 遵循短路規則。也就是說，在表達式 <code>E1 &amp;&amp; E2</code> 中，如果 <code>E1</code> 的評估結果為 <code>false</code>，則不會評估 <code>E2</code>。相同的，在表達式 <code>E1 || E2</code> 中，如果 <code>E1</code> 的評估結果為 <code>true</code>，則不會評估 <code>E2</code>。</p>
<p>以下是布林值型別的範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> truth <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">5</span>
	<span class="token keyword">var</span> falsehood <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">10</span>

	<span class="token comment">// Short Circuiting</span>
	<span class="token keyword">var</span> res1 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">></span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">5</span>     <span class="token comment">// Second operand is not evaluated since first evaluates to false</span>
	<span class="token keyword">var</span> res2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// Second operand is not evaluated since first evaluates to true</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>truth<span class="token punctuation">,</span> falsehood<span class="token punctuation">,</span> res1<span class="token punctuation">,</span> res2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
true false false true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="複數"><a href="#複數" class="headerlink" title="複數"></a>複數</h3><p>複數是 Golang 中的基本型別之一。Go 有兩種不同大小的複數型別：</p>
<ul>
<li><code>complex64</code>：實部和虛部都是 <code>float32</code> 型別。</li>
<li><code>complex128</code>：實部和虛部都是 <code>float64</code> 型別。</li>
</ul>
<p>Golang 中複數的預設型別是 <code>complex128</code>。你可以像這樣建立一個複數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">7i</span>  <span class="token comment">// Type inferred as `complex128`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Go 還提供了一個名為 <code>complex</code> 的內建函數，用於建立複數。如果你要使用變數而不是文字來建立複數，則需要使用 <code>complex</code> 函數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3.57</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">6.23</span>

<span class="token comment">// var c = a + bi won't work. Create the complex number like this -</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要注意的是，複數的實部和虛部都必須是相同的浮點數型別。如果你嘗試建立具有不同實部和虛部型別的複數，則編譯器將拋出錯誤：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">4.92</span>
<span class="token keyword">var</span> b <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">7.38</span>

<span class="token comment">/*
   The Following statement Won't compile.
   (Both real and imaginary parts must be of the same floating-point type)
*/</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment">// Compiler Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="複數型別的運算"><a href="#複數型別的運算" class="headerlink" title="複數型別的運算"></a>複數型別的運算</h4><p>你可以對複數執行算術運算，如加、減、乘和除：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5i</span>
	<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4i</span>

	<span class="token keyword">var</span> res1 <span class="token operator">=</span> a <span class="token operator">+</span> b
	<span class="token keyword">var</span> res2 <span class="token operator">=</span> a <span class="token operator">-</span> b
	<span class="token keyword">var</span> res3 <span class="token operator">=</span> a <span class="token operator">*</span> b
	<span class="token keyword">var</span> res4 <span class="token operator">=</span> a <span class="token operator">/</span> b

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">,</span> res3<span class="token punctuation">,</span> res4<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
(5+9i) (1+1i) (-14+22i) (1.3-0.1i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="字串"><a href="#字串" class="headerlink" title="字串"></a>字串</h3><p>在 Go 中，字串是字元組序列。</p>
<p>Golang 中的字串可以使用如 <code>&quot;Hello World&quot;</code> 中的雙引號宣告，也可以使用如 <code>`Hello World`</code> 中的反引號宣告。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Normal String (Can not contain newlines, and can have escape characters like `\n`, `\t` etc)</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Steve Jobs"</span>

<span class="token comment">// Raw String (Can span multiple lines. Escape characters are not interpreted)</span>
<span class="token keyword">var</span> bio <span class="token operator">=</span> <span class="token string">`Steve Jobs was an American entrepreneur and inventor.
           He was the CEO and co-founder of Apple Inc.`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用雙引號括起來的字串不能包含換行，但可以包含跳脫字元，如 <code>\n</code>、<code>\t</code> 等。在雙引號字串中，會用換行字元替換 <code>\n</code> 字元，並用 tab 空格替換 <code>\t</code> 字元，依此類推。</p>
<p>反引號內包含的字串是原始字串。它們可以跨越多行。此外，跳脫字元在原始字串中沒有任何特殊含義。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> website <span class="token operator">=</span> <span class="token string">"\thttps://www.callicoder.com\t\n"</span>

	<span class="token keyword">var</span> siteDescription <span class="token operator">=</span> <span class="token string">`\t\tCalliCoder is a programming blog where you can find
                           practical guides and tutorials on programming languages,
                           web development, and desktop app development.\t\n`</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>website<span class="token punctuation">,</span> siteDescription<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
        https:&#x2F;&#x2F;www.callicoder.com
 \t\tCalliCoder is a programming blog where you can find
                           practical guides and tutorials on programming languages,
                           web development, and desktop app development.\t\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上就是本文關於字串的全部內容。但還有很多關於字串的知識要了解，包括字串索引、處理 Unicode 字元以及執行各種操作如字串連接、分離等。我們將在以後的文章中了解它們。</p>
<h3 id="型別轉換"><a href="#型別轉換" class="headerlink" title="型別轉換"></a>型別轉換</h3><p>Golang 有個強型別系統。它不允許你在表達式中混合數字型別。舉例來說，你不能將 <code>int</code> 變數加到 <code>float64</code> 變數中，也不能將 <code>int</code> 變數加到 <code>int64</code> 變數中。你甚至無法在混合型別之間執行分派：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> a <span class="token comment">// Compiler Error (Cannot use a (type in64) as type int in assignment)</span>

<span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">500</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> a <span class="token operator">+</span> c <span class="token comment">// Compiler Error (Invalid Operation: mismatched types int64 and int)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>與 C、C++ 和 Java 等其他靜態型別語言不同，Go 不提供任何隱式型別轉換。要了解為何採用這種方式設計 Go，請查看下一篇文章：<a href="/2019/11/06/working-with-constants-in-golang/" title="在 Golang 中使用常數">在 Golang 中使用常數</a>。</p>
<p>好吧！即使它們是數字型別，我們也不能對兩種不同型別進行加、減、比較或任何類型的運算。但如果我們需要執行這樣的運算該怎麼辦？</p>
<p>嗯，你需要將變數明確地轉換為目標型別：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// Explicit Type Conversion</span>

<span class="token keyword">var</span> c <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">6.5</span>

<span class="token comment">// Explicit Type Conversion</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> c <span class="token comment">// Works</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一般將值 <code>v</code> 轉換為型別 <code>T</code> 的語法是 <code>T(v)</code>。這裡有幾個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myInt <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">65</span>
<span class="token keyword">var</span> myUint <span class="token builtin">uint</span> <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span>myInt<span class="token punctuation">)</span>
<span class="token keyword">var</span> myFloat <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>myInt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本文中，你了解了 Golang 提供的各種基本資料型別、可以對這些型別執行的操作，以及如何將一種型別轉換為另一種型別。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 變數、零值和型別推斷</title>
    <url>/2019/11/05/golang-variables-zero-values-type-inference/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-variables-zero-values-type-inference">Golang Variables, Zero Values, and Type inference</a></p>
</blockquote>
<h3 id="變數和資料型別入門"><a href="#變數和資料型別入門" class="headerlink" title="變數和資料型別入門"></a>變數和資料型別入門</h3><p>每個程式都需要在記憶體中儲存一些資料。資料被儲存在特定的記憶體位置。</p>
<p>變數只是為儲存資料的記憶體位置所取的一個方便的名稱。除了名稱外，每個變數還有關聯的型別。</p>
<span id="more"></span>

<img src="/2019/11/05/golang-variables-zero-values-type-inference/golang-variables-data-types-illustration.jpg" class="">

<p>資料型別或簡易型別會對相關的資料集進行分類，定義它們的儲存方式、可以儲存的值的範圍以及可以對其執行的運算。</p>
<p>舉例來說，Golang 有個資料型別為 <code>int8</code>。它表示 8 位元整數值的範圍可以從 -128 到 127。它也定義了可以對 <code>int8</code> 資料型別執行的運算，如加、減、乘、除等。</p>
<p>我們在 Golang 中也有一個 <code>int</code> 資料型別，其大小取決於平台。在 32 位元系統上，它的大小為 32 位元，在 64 位元系統上，它的大小為 64 位元。</p>
<p>Golang 中的其他資料型別範例有 <code>bool</code>、<code>string</code>、<code>float32</code>、<code>float64</code>等。在<a href="/2019/11/05/golang-basic-types-operators-type-conversion/" title="下一個教學">下一個教學</a>中，你將了解關於這些資料型別的更多資訊。我在這簡要介紹了資料型別，因為在深入研究 Golang 變數之前有必要了解它們。</p>
<h3 id="深入-Golang-變數"><a href="#深入-Golang-變數" class="headerlink" title="深入 Golang 變數"></a>深入 Golang 變數</h3><h4 id="宣告變數"><a href="#宣告變數" class="headerlink" title="宣告變數"></a>宣告變數</h4><p>在 Golang 中，我們使用 <code>var</code> 關鍵字來宣告變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> firstName <span class="token builtin">string</span>
<span class="token keyword">var</span> lastName <span class="token builtin">string</span>
<span class="token keyword">var</span> age <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如下所示，你也可以一次宣告多個變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>
	firstName <span class="token builtin">string</span>
	lastName  <span class="token builtin">string</span>
	age       <span class="token builtin">int</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你甚至可以使用逗號組合多個相同型別的變數宣告：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>
	firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>
	age                 <span class="token builtin">int</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h4><p>任何沒有初始值的變數宣告都會有<strong>零值</strong>，具體取決於變數的型別：</p>
<table>
<thead>
<tr>
<th>型別</th>
<th>零值</th>
</tr>
</thead>
<tbody><tr>
<td>bool</td>
<td>false</td>
</tr>
<tr>
<td>string</td>
<td>“”</td>
</tr>
<tr>
<td>int、int8、int16 等</td>
<td>0</td>
</tr>
<tr>
<td>float32、float64</td>
<td>0.0</td>
</tr>
</tbody></table>
<p>下面的範例展示了零值的概念：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>
		age                 <span class="token builtin">int</span>
		salary              <span class="token builtin">float64</span>
		isConfirmed         <span class="token builtin">bool</span>
	<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"firstName: %s, lastName: %s, age: %d, salary: %f, isConfirmed: %t\n"</span><span class="token punctuation">,</span>
		firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> isConfirmed<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
firstName: , lastName: , age: 0, salary: 0.000000, isConfirmed: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="用初始值宣告變數"><a href="#用初始值宣告變數" class="headerlink" title="用初始值宣告變數"></a>用初始值宣告變數</h4><p>以下是如何在宣告時初始化變數的方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> firstName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Satoshi"</span>
<span class="token keyword">var</span> lastName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Nakamoto"</span>
<span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>你也可以像這樣使用多個宣告：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>
	firstName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Satoshi"</span>
	lastName  <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Nakamoto"</span>
	age       <span class="token builtin">int</span>    <span class="token operator">=</span> <span class="token number">35</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>甚至使用逗號組合多個相同型別的變數宣告，並像這樣初始化它們：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>
	firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Satoshi"</span><span class="token punctuation">,</span> <span class="token string">"Nakamoto"</span>
	age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">35</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="型別推斷"><a href="#型別推斷" class="headerlink" title="型別推斷"></a>型別推斷</h4><p>儘管 Go 是一種靜態型別的程式語言，但它不需要你明確指定宣告的每個變數的型別。</p>
<p>當你宣告具有初始值的變數時，Golang 會自動從右側的值推斷出變數的型別。因此，在宣告時初始化變數不需要指定型別：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Rajeev Singh"</span> <span class="token comment">// Type declaration is optional here.</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Variable 'name' is of type %T\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Variable &#39;name&#39; is of type string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在上面的範例中，Golang 自動從右側的值推斷出變數的型別為 <code>string</code>。如果你嘗試重新分派其他型別的值給變數，則編譯器將拋出錯誤：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Rajeev Singh"</span> <span class="token comment">// Type inferred as `string`</span>
name <span class="token operator">=</span> <span class="token number">1234</span> <span class="token comment">// Compiler Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如下所示，型別推斷讓我們可以在同一行中宣告和初始化不同資料型別的多個變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Multiple variable declarations with inferred types</span>
	<span class="token keyword">var</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> salary <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Maxwell"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">50000.0</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"firstName: %T, lastName: %T, age: %T, salary: %T\n"</span><span class="token punctuation">,</span>
		firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> salary<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
firstName: string, lastName: string, age: int, salary: float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="簡短宣告"><a href="#簡短宣告" class="headerlink" title="簡短宣告"></a>簡短宣告</h4><p>Go 使用 <code>:=</code> 運算子提供了簡短的變數宣告語法。這是宣告和初始化變數的簡寫（包含型別推斷）。</p>
<p>舉例來說，<code>var name = &quot;Rajeev&quot;</code> 的簡寫是 <code>name := &quot;Rajeev&quot;</code>。以下是完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Short variable declaration syntax</span>
	name <span class="token operator">:=</span> <span class="token string">"Rajeev Singh"</span>
	age<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> isProgrammer <span class="token operator">:=</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">50000.0</span><span class="token punctuation">,</span> <span class="token boolean">true</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> isProgrammer<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Rajeev Singh 35 50000 true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>要注意的是，簡短的變數宣告只能在函數內使用。在函數外，每個陳述式都需要以 <code>var</code>、<code>func</code> 等關鍵字開頭，因此，不可使用 <code>:=</code> 運算子。</p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>變數是任何程式語言中的基本概念之一。在本文中，你學到了如何在 Golang 宣告變數、型別推斷如何運作，以及如何使用複合式宣告和簡短宣告。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Golang 中使用常數</title>
    <url>/2019/11/06/working-with-constants-in-golang/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-typed-untyped-constants">Working with Constants in Golang</a></p>
</blockquote>
<h3 id="常數"><a href="#常數" class="headerlink" title="常數"></a>常數</h3><p>在 Golang 中，我們使用 <code>constant</code> 語法來表示固定（不改變）的值，如 <code>5</code>、<code>1.34</code>、<code>true</code> 和 <code>&quot;Hello&quot;</code> 等。</p>
<h4 id="定數是常數"><a href="#定數是常數" class="headerlink" title="定數是常數"></a>定數是常數</h4><p>Golang 中的所有定數，如整數 <code>5</code>、<code>1000</code>、浮點數 <code>4.76</code>、<code>1.89</code>、布林值 <code>true</code>、<code>false</code> 或字串 <code>&quot;Hello&quot;</code>、<code>&quot;Jhon&quot;</code> 都是<strong>常數</strong>。</p>
<table>
<thead>
<tr>
<th>常數</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td>整數常數</td>
<td><code>1000</code>、<code>67413</code></td>
</tr>
<tr>
<td>浮點數常數</td>
<td><code>4.56</code>、<code>128.372</code></td>
</tr>
<tr>
<td>布林常數</td>
<td><code>true</code>、<code>false</code></td>
</tr>
<tr>
<td>表示字元的常數</td>
<td><code>&#39;C&#39;</code>、<code>&#39;ä&#39;</code></td>
</tr>
<tr>
<td>複數常數</td>
<td><code>2.7i</code>、<code>3 + 5i</code></td>
</tr>
<tr>
<td>字串常數</td>
<td><code>&quot;Hello&quot;</code>、<code>&quot;Rajeev&quot;</code></td>
</tr>
</tbody></table>
<span id="more"></span>

<h4 id="宣告常數"><a href="#宣告常數" class="headerlink" title="宣告常數"></a>宣告常數</h4><p>定數是沒有名稱的常數。你可以使用 <code>const</code> 關鍵字來要宣告一個常數並幫它命名：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> myFavLanguage <span class="token operator">=</span> <span class="token string">"Python"</span>
<span class="token keyword">const</span> sunRisesInTheEast <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你也可以像這樣在宣告時指定型別：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1234</span>
<span class="token keyword">const</span> b <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Hi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在單一陳述式中也可以有多個宣告：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> country<span class="token punctuation">,</span> code <span class="token operator">=</span> <span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token number">91</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	employeeId <span class="token builtin">string</span>  <span class="token operator">=</span> <span class="token string">"E101"</span>
	salary     <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">50000.0</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>正如你所期望的，常數無法更改。也就是說，你無法在初始化常數後重新分派給它：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">123</span>
a <span class="token operator">=</span> <span class="token number">321</span> <span class="token comment">// Compiler Error (Cannot assign to constant)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="已型別化和未型別化常數"><a href="#已型別化和未型別化常數" class="headerlink" title="已型別化和未型別化常數"></a>已型別化和未型別化常數</h3><p>Golang 中的常數很特別。它們的運作方式與其他語言的運作方式不同。要了解它們為何如此特別以及它們如何正常運作，我們需要關於 Go 型別系統的背景知識。讓我們直接進入正題吧！</p>
<h4 id="背景知識"><a href="#背景知識" class="headerlink" title="背景知識"></a>背景知識</h4><p>Go 是一種靜態型別的程式語言。也就是說編譯器在編譯時期就知道或推斷了每個變數的型別。</p>
<p>但是它的型別系統更進一步的不允許你執行混合數字型別的操作。舉例來說，你不能將 <code>float64</code> 變數加到 <code>int</code>，也不能將 <code>int64</code> 變數加到 <code>int</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myFloat <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">21.54</span>
<span class="token keyword">var</span> myInt <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">562</span>
<span class="token keyword">var</span> myInt64 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">120</span>

<span class="token keyword">var</span> res1 <span class="token operator">=</span> myFloat <span class="token operator">+</span> myInt <span class="token comment">// Not Allowed (Compiler Error)</span>
<span class="token keyword">var</span> res2 <span class="token operator">=</span> myInt <span class="token operator">+</span> myInt64 <span class="token comment">// Not Allowed (Compiler Error)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要使上述操作正常運作，你需要明確地轉換變數，讓它們都屬於相同型別：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> res1 <span class="token operator">=</span> myFloat <span class="token operator">+</span> <span class="token function">float64</span><span class="token punctuation">(</span>myInt<span class="token punctuation">)</span> <span class="token comment">// Works</span>
<span class="token keyword">var</span> res2 <span class="token operator">=</span> myInt <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>myInt64<span class="token punctuation">)</span>     <span class="token comment">// Works</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果你使用過其他靜態型別的語言，如 C、C++ 或 Java，那麼你必須知道，只要在任何操作中將它們混合使用，它們會自動將較小的型別轉換為較大的型別。舉例來說，<code>int</code> 可以自動轉換為 <code>long</code>、<code>float</code> 或 <code>double</code>。</p>
<p>所以顯而易見的問題是：為什麼 Go 不會做同樣的事？它為什麼不像 C、C++ 或 Java 一樣執行隱式型別轉換？</p>
<p>以下是 Go 設計師所說的（節錄自 <a href="https://golang.org/doc/faq#conversions">Golang 的官方文件</a>）：</p>
<blockquote>
<p>C 語言籠罩在數字型別間便利的自動轉換所引起的混亂中。表達式什麼時候是無號數？可容納多大數值範圍？它會溢位嗎？結果是否可移植、不受執行它的機器影響？這也使得編譯器複雜化；「一般算術轉換」不容易實作且跨架構不一致。出於可移植性的原因，我們決定以程式碼中明確地型別轉換作為代價，讓事情變得清晰明瞭。</p>
</blockquote>
<p>好吧！因此 Go 不提供隱式型別轉換，它要求我們在混合操作多個型別的變數時，必須使用明確地型別轉換。</p>
<p>但是 Go 的型別系統如何與常數一起使用？以下所有陳述式在 Golang 中皆有效：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myInt32 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> myInt <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> myFloat64 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> myComplex <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在以上範例中，常數值 <code>10</code> 的型別是什麼？此外，如果 Golang 中沒有隱式型別轉換，那麼我們就不需要像這樣寫上面的陳述式：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myInt32 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> myFloat64 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// etc..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>好吧！所有這些問題的答案都在於 Golang 處理常數的方式。因此，讓我們找出它們的處理方式。</p>
<h4 id="未型別化常數"><a href="#未型別化常數" class="headerlink" title="未型別化常數"></a>未型別化常數</h4><p>除非明確地給定型別，否則 Golang 中任何已命名或未命名的常數都是未型別化的。舉例來說，以下所有常數都是未型別化的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">1</span>       <span class="token comment">// untyped integer constant</span>
<span class="token number">4.5</span>     <span class="token comment">// untyped floating-point constant</span>
<span class="token boolean">true</span>    <span class="token comment">// untyped boolean constant</span>
<span class="token string">"Hello"</span> <span class="token comment">// untyped string constant</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>即使你給它們名字，它們還是未型別化：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token number">4.5</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>現在，你可能會想說我使用的是如 <code>integer</code> 常數、<code>string</code> 常數之類的語法，而我還說它們是未型別化。</p>
<p>是的，<code>1</code> 是整數、<code>4.5</code> 是浮點數以及 <code>&quot;Hello&quot;</code> 是字串。但它們只是數值，還沒有給它們如 <code>int32</code>、<code>float64</code> 或 <code>string</code> 的<strong>固定</strong>型別，這會迫使它們遵守 Go 的嚴格型別規則。</p>
<p>事實上，<code>1</code> 是未型別化的，這讓我們可以將其分派給型別與整數<strong>相容</strong>的任何變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myInt <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> myFloat <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> myComplex <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>要注意的是，雖然 <code>1</code> 未型別化，但它是未型別化的整數。因此，它只能在允許整數的地方使用。舉例來說，你不能將它分派給 <code>string</code> 或 <code>boolean</code> 變數。</p>
<p>同樣地，可以在任何允許使用浮點數的地方使用如 <code>4.5</code> 之類的未型別化浮點數常數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myFloat32 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">4.5</span>
<span class="token keyword">var</span> myComplex64 <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token number">4.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>現在來看一個未型別化字串常數的範例：</strong></p>
<p>在 Golang 中，你可以使用 <code>type</code> 關鍵字來建立型別別名：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> RichString <span class="token builtin">string</span> <span class="token comment">// Type alias of `string`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>鑑於 Golang 的強型別特性，你不能將 <code>string</code> 變數分派給 <code>RichString</code> 變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myString <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Hello"</span>
<span class="token keyword">var</span> myRichString RichString <span class="token operator">=</span> myString <span class="token comment">// Won't work.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>但是，你可以將一個未型別化的字串常數分派給 <code>RichString</code> 變數，因為它與字串相容：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> myUntypedString <span class="token operator">=</span> <span class="token string">"Hello"</span>
<span class="token keyword">var</span> myRichString RichString <span class="token operator">=</span> myUntypedString <span class="token comment">// Works</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="常數和型別推斷：預設型別"><a href="#常數和型別推斷：預設型別" class="headerlink" title="常數和型別推斷：預設型別"></a>常數和型別推斷：預設型別</h4><p>Go 支援型別推斷。也就是說，它可以從初始化變數的值推斷出變數的型別。因此，你可以宣告一個具有初始值但沒有任何型別資訊的變數，而 Go 會自動決定型別：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// Go compiler automatically infers the type of the variable `a`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但是它是如何運作的呢？鑑於 Golang 中的常數是未型別化的，在上面的範例中，變數 <code>a</code> 的型別是什麼？是 <code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code> 還是 <code>int</code>？</p>
<p>好吧，事實證明，Golang 中每個未型別化的常數都有一個<strong>預設型別</strong>。當我們將常數分派給沒有任何明確型別的變數時，將使用預設型別。</p>
<p>以下是 Golang 中各種常數的預設型別：</p>
<table>
<thead>
<tr>
<th>常數</th>
<th>預設型別</th>
</tr>
</thead>
<tbody><tr>
<td>整數（10、76)</td>
<td>int</td>
</tr>
<tr>
<td>浮點數（3.14、7.92）</td>
<td>float64</td>
</tr>
<tr>
<td>複數（3 + 5i）</td>
<td>complex128</td>
</tr>
<tr>
<td>字元（<code>&#39;a&#39;</code>、<code>&#39;♠&#39;</code>）</td>
<td>rune</td>
</tr>
<tr>
<td>布林值（true, false）</td>
<td>bool</td>
</tr>
<tr>
<td>字串（”Hello”）</td>
<td>string</td>
</tr>
</tbody></table>
<p>因此，在陳述式 <code>var a = 5</code> 中，由於沒有明確地型別資訊，整數常數的預設型別將決定 <code>a</code> 的型別，即 <code>int</code>。</p>
<h4 id="已型別化常數"><a href="#已型別化常數" class="headerlink" title="已型別化常數"></a>已型別化常數</h4><p>在 Golang 中，當你像這樣在宣告常數時<strong>明確地</strong>指定型別，常數是已型別化的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> typedInt <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// Typed constant</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就像變數一樣，Go 型別系統的所有規則都適用於已型別化的常數。舉例來說，你不能分派已型別化的整數常數到浮點數變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> myFloat64 <span class="token builtin">float64</span> <span class="token operator">=</span> typedInt <span class="token comment">// Compiler Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用已型別化常數，你將失去未型別化常數帶來的所有靈活性，例如將它們分派給相容型別的任何變數，或將它們混合在算術運算中。因此，僅在絕對必要時，才應該為常數宣告型別。否則，只宣告沒有型別的常數。</p>
<h3 id="常數表達式"><a href="#常數表達式" class="headerlink" title="常數表達式"></a>常數表達式</h3><p>常數是未型別化的（除非明確地給定型別），這讓你可以在任何表達式中自由混合它們。</p>
<p>因此，你可以擁有一個混合各種未型別化常數的表達式，只要這些未型別化的常數彼此相容：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">7.5</span> <span class="token comment">// Valid</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">/</span> <span class="token number">5</span>  <span class="token comment">// Valid</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">'z'</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// Valid</span>

<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token string">"Hey"</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token comment">// Invalid (untyped string constant and untyped boolean constant are not compatible with each other)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>對常數表達式及其結果的評估遵循某些規則。讓我們看看這些規則：</p>
<p><strong>常數表達式的規則</strong></p>
<ul>
<li><p>比較兩個未型別化的常數，會輸出未型別化的布林值常數。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">7.5</span> <span class="token operator">></span> <span class="token number">5</span>       <span class="token comment">// true (untyped boolean constant)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">"xyz"</span> <span class="token operator">&lt;</span> <span class="token string">"uvw"</span> <span class="token comment">// false (untyped boolean constant)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>對於其他運算（除了位移）：</p>
<ul>
<li><p>如果兩個運算元型別相同（例如，皆為未型別化的整數常數），則結果也是相同型別。舉例來說，表達式 <code>25 / 2</code> 的結果是 <code>12</code>，不是 <code>12.5</code>。由於兩個運算元均為未型別化整數，因此結果將被截斷為整數。</p>
</li>
<li><p>如果兩個運算元型別不同，則結果是該運算元的型別且根據規則取較大的：<code>integer &lt; rune &lt; floating-point &lt; complex</code>。</p>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">/</span> <span class="token number">2</span>       <span class="token comment">// 12 (untyped integer constant)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token number">8i</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">// (3 + 4i) (untyped complex constant)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>位移運算規則有點複雜。首先，有一些必要條件：</p>
<ul>
<li><p>位移表達式右側的運算元必須是未型別化的整數型別，或是可以表示 <code>uint</code> 型別的未型別化常數。</p>
</li>
<li><p>左側的運算元必須是整數型別，或是可以表示 <code>int</code> 型別的未型別化常數。</p>
</li>
</ul>
<p><strong>規則</strong>：如果位移表達式左側的運算元是未型別化常數，則結果是未型別化的整數常數；否則結果與左側運算元的型別相同。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span>         <span class="token comment">// 32 (untyped integer constant)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span>  <span class="token comment">// 16 (int32)</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">16.0</span> <span class="token operator">>></span> <span class="token number">2</span>      <span class="token comment">// 4 (untyped integer constant) - 16.0 can represent a value of type `int`</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">>></span> <span class="token number">3.0</span>      <span class="token comment">// 4 (untyped integer constant) - 3.0 can represent a value of type `uint`</span>

<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token number">10.50</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>     <span class="token comment">// ILLEGAL (10.50 can't represent a value of type `int`)</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">>></span> <span class="token operator">-</span><span class="token number">2</span>       <span class="token comment">// ILLEGAL (The right operand must be an unsigned int or an untyped constant compatible with `uint`)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="常數表達式範例"><a href="#常數表達式範例" class="headerlink" title="常數表達式範例"></a>常數表達式範例</h4><p>讓我們來看一些常數表達式的範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">/</span> <span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"result is %v which is of type %T\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
result is 12 which is of type int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>由於 <code>25</code> 和 <code>2</code> 都是未型別化的整數常數，因此結果會被截斷為未型別化的整數 <code>12</code>。</p>
<p><em>若要得到正確的結果，你可以執行以下任一操作：</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Use a float value in numerator or denominator</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">25.0</span> <span class="token operator">/</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Explicitly cast the numerator or the denominator</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>讓我們來看另一個範例：</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">4.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上程式會產生什麼結果？</p>
<p>嗯，不是 <code>17</code>。以上程式的實際結果是 <code>16.5</code>。我們來看一下表達式的求值順序，以了解為什麼結果是 <code>16.5</code>。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">4.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
          ↓
  <span class="token number">4.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
          ↓
   <span class="token number">4.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
          ↓
     <span class="token number">4.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
          ↓
      <span class="token number">4.5</span> <span class="token operator">+</span> <span class="token number">12</span>
          ↓
        <span class="token number">16.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>了解了嗎？結果是錯誤的，因為表達式 <code>25/2</code> 的計算結果是 <code>12</code>。</p>
<p>要得到正確的結果，可以執行以下任一操作：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Use a float value in the numerator or denominator</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">4.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Explicitly cast numerator or the denominator</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">4.5</span> <span class="token operator">+</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>未型別化常數是 Go 創造者做出的驚人設計決策。儘管 Go 有強大的型別系統，但你可以使用未型別化的常數來擺脫 Go 的型別系統，並在處理任何表達式中的混合資料型別時具有更強大的靈活性。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 流程控制陳述式：if、switch 與 for</title>
    <url>/2019/11/11/golang-control-flow-statements/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-control-flow">Golang Control Flow Statements: If, Switch and For</a></p>
</blockquote>
<h3 id="if-陳述式"><a href="#if-陳述式" class="headerlink" title="if 陳述式"></a>if 陳述式</h3><p><code>if</code> 陳述式用於根據給定的條件，決定是否應執行程式碼區塊。</p>
<p>以下是 Golang 中 <code>if</code> 陳述式的語法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Code to be executed if the condition is true.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這裡有個簡單的範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">25</span>
	<span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is a multiple of 5\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
25 is a multiple of 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<span id="more"></span>

<p><strong>注意</strong>，你可以在 Golang 中的 <code>if</code> 陳述式省略 <code>()</code>，但大括號 <code>&#123;&#125;</code> 是必需的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">if</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is negative\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如下所示，你可以使用捷徑運算子 <code>&amp;&amp;</code> 和 <code>||</code> 來組合多個條件：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">21</span>
<span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">17</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"My Age is between 17 and 30"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="if-Else-陳述式"><a href="#if-Else-陳述式" class="headerlink" title="if-Else 陳述式"></a>if-Else 陳述式</h4><p><code>if</code> 陳述式可以與 <code>else</code> 區塊結合使用。如果 <code>if</code> 陳述式中指定的條件不成立，則執行 <code>else</code> 區塊。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> condition <span class="token punctuation">&#123;</span>
	<span class="token comment">// code to be executed if the condition is true</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// code to be executed if the condition is false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這裡有個簡單的範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>
	<span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You're eligible to vote!"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You're not eligible to vote!"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
You&#39;re eligible to vote!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="if-else-if-鏈"><a href="#if-else-if-鏈" class="headerlink" title="if-else-if 鏈"></a>if-else-if 鏈</h4><p><code>if</code> 陳述式也可以包含多個 <code>else if</code> 部分，從而構成一系列條件，例如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> BMI <span class="token operator">=</span> <span class="token number">21.0</span>
	<span class="token keyword">if</span> BMI <span class="token operator">&lt;</span> <span class="token number">18.5</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You are underweight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> BMI <span class="token operator">>=</span> <span class="token number">18.5</span> <span class="token operator">&amp;&amp;</span> BMI <span class="token operator">&lt;</span> <span class="token number">25.0</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Your weight is normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> BMI <span class="token operator">>=</span> <span class="token number">25.0</span> <span class="token operator">&amp;&amp;</span> BMI <span class="token operator">&lt;</span> <span class="token number">30.0</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You're overweight"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You're obese"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Your weight is normal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="if-搭配簡短宣告"><a href="#if-搭配簡短宣告" class="headerlink" title="if 搭配簡短宣告"></a>if 搭配簡短宣告</h4><p>Golang 中的 <code>if</code> 陳述式還可以在條件表達式之前包含一個<a href="/2019/11/05/golang-variables-zero-values-type-inference/" title="簡短宣告">簡短宣告</a>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> n <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is even\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在簡短宣告中宣告的變數僅可在 <code>if</code> 區塊及它的 <code>else</code> 或 <code>else-if</code> 分支內使用：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> n <span class="token operator">:=</span> <span class="token number">15</span><span class="token punctuation">;</span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is even\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is odd\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意，如果你使用簡短陳述式，則不能使用括號。因此，以下程式碼將產生語法錯誤：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// You can't use parentheses when `if` contains a short statement</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">:=</span> <span class="token number">15</span><span class="token punctuation">;</span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Syntax Error</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="switch-陳述式"><a href="#switch-陳述式" class="headerlink" title="switch 陳述式"></a>switch 陳述式</h3><p>Switch 陳述式採用表達式並將其與可能的條件清單匹配。找到匹配項目後，它會執行指定匹配條件區塊內的程式碼。</p>
<p>這裡有個簡單的 switch 陳述式範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> dayOfWeek <span class="token operator">=</span> <span class="token number">6</span>
	<span class="token keyword">switch</span> dayOfWeek <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Monday"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Tuesday"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Wednesday"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Thursday"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Friday"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Saturday"</span><span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Weekend. Yaay!"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sunday"</span><span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Weekend. Yaay!"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Invalid day"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Saturday
Weekend. Yaay!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>Go 會從上到下逐一評估所有 switch 條件，直到條件成功為止。它會執行該指定條件區塊內的程式碼，然後停止（不會再評估其他條件）。</p>
<p>與其他語言如 C、C++ 和 Java 相反的是，你需要明確地在每個條件區塊之後插入一個 <code>break</code> 陳述式，來停止對後續條件的評估。</p>
<p>如果所有條件都不成功，則執行預設條件。</p>
<h4 id="switch-搭配簡短宣告"><a href="#switch-搭配簡短宣告" class="headerlink" title="switch 搭配簡短宣告"></a>switch 搭配簡短宣告</h4><p>就像 <code>if</code> 一樣，<code>switch</code> 也可以在條件表達式之前包含一個簡短宣告。因此，你也可以像這樣撰寫先前的 switch 範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> dayOfWeek <span class="token operator">:=</span> <span class="token number">6</span><span class="token punctuation">;</span> dayOfWeek <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Monday"</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Tuesday"</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Wednesday"</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Thursday"</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Friday"</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Saturday"</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Weekend. Yaay!"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sunday"</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Weekend. Yaay!"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Invalid day"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>唯一不同的是，簡短陳述式宣告的變數 <code>dayOfWeek</code> 僅可在 switch 區塊內使用。</p>
<h4 id="合併多個-switch-條件"><a href="#合併多個-switch-條件" class="headerlink" title="合併多個 switch 條件"></a>合併多個 switch 條件</h4><p>你可以像這樣將多個 <code>switch</code> 條件合併成一個：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> dayOfWeek <span class="token operator">:=</span> <span class="token number">5</span><span class="token punctuation">;</span> dayOfWeek <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Weekday"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Weekend"</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Invalid Day"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Weekday<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>當你需要針對多種情況執行共同的邏輯時，這非常方便。</p>
<h4 id="不帶表達式的-switch"><a href="#不帶表達式的-switch" class="headerlink" title="不帶表達式的 switch"></a>不帶表達式的 switch</h4><p>在 Golang 中，我們在 <code>switch</code> 陳述式中指定的表達式是非必要的。不帶表達式的 <code>switch</code> 與 <code>switch true</code> 相同。它逐一評估所有條件，並執行第一個條件成功的區塊：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> BMI <span class="token operator">=</span> <span class="token number">21.0</span>
	<span class="token keyword">switch</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> BMI <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You're underweight"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> BMI <span class="token operator">>=</span> <span class="token number">18.5</span> <span class="token operator">&amp;&amp;</span> BMI <span class="token operator">&lt;</span> <span class="token number">25.0</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Your weight is normal"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> BMI <span class="token operator">>=</span> <span class="token number">25.0</span> <span class="token operator">&amp;&amp;</span> BMI <span class="token operator">&lt;</span> <span class="token number">30.0</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You're overweight"</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You're obese"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不帶表達式的 switch 只是一個撰寫 <code>if-else-if</code> 鏈的簡潔方式。</p>
<h3 id="for-迴圈"><a href="#for-迴圈" class="headerlink" title="for 迴圈"></a>for 迴圈</h3><p>迴圈用於重複執行程式碼區塊。Golang 只有一個迴圈陳述式：<code>for</code> 迴圈。</p>
<p>以下是 Go 中 <code>for</code> 迴圈的一般語法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> initialization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> increment <span class="token punctuation">&#123;</span>
	<span class="token comment">// loop body</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>初始化</strong>陳述式只會在迴圈的第一次迭代前執行一次。在每次迭代時，都會檢查<strong>條件</strong>。如果條件評估為 <code>true</code>，則執行迴圈的主體，否則就終止迴圈。每次迭代結束時都會執行<strong>遞增</strong>陳述式。</p>
<p>這裡有個簡單的 for 迴圈範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
0 1 2 3 4 5 6 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>與 C、C++ 和 Java 等其他語言不同，Go 的 for 迴圈不包含括號，但大括號 <code>&#123;&#125;</code> 是必需的。</p>
<p><strong>注意，<code>for</code> 迴圈的初始化和遞增陳述式都是非必要的，可以省略</strong></p>
<ul>
<li><p>省略初始化陳述式</p>
  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	i <span class="token operator">:=</span> <span class="token number">2</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <pre class="line-numbers language-none"><code class="language-none"># Output
2 4 6 8 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>省略遞增陳述式</p>
  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	i <span class="token operator">:=</span> <span class="token number">2</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		i <span class="token operator">*=</span> <span class="token number">2</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <pre class="line-numbers language-none"><code class="language-none"># Output
2 4 8 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  注意，在上面的 <code>for</code> 迴圈範例中，你也可以省略分號，並這樣寫：</p>
  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	i <span class="token operator">:=</span> <span class="token number">2</span>
	<span class="token keyword">for</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		i <span class="token operator">*=</span> <span class="token number">2</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  上面的 <code>for</code> 迴圈與其他語言中的 <code>while</code> 迴圈類似。Go 沒有 <code>while</code> 迴圈，因為我們可以使用 <code>for</code> 輕鬆表示 <code>white</code> 迴圈。</p>
<p>  <strong>最後，在 Golang 中你也可以省略 <code>for</code> 迴圈的條件。這會給你一個無限迴圈：</strong></p>
  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Infinite Loop</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="break-陳述式"><a href="#break-陳述式" class="headerlink" title="break 陳述式"></a>break 陳述式</h4><p>你可以使用 <code>break</code> 陳述式在正常終止之前中斷循環。這裡有個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> num <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> num<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> num<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num<span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"First positive number divisible by both 3 and 5 is %d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
First positive number divisible by both 3 and 5 is 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="continue-陳述式"><a href="#continue-陳述式" class="headerlink" title="continue 陳述式"></a>continue 陳述式</h4><p><code>continue</code> 陳述式用於中途停止執行迴圈主體，並繼續執行迴圈的下一個迭代。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> num <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> num <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> num<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> num<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
1 3 5 7 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本文中，你學到了如何在 Golang 中使用流程控制陳述式，如 <code>if</code>、<code>switch</code> 和 <code>for</code>。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 函數介紹</title>
    <url>/2019/11/11/introduction-to-functions-in-golang/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-functions">Introduction to Functions in Golang</a></p>
</blockquote>
<p>函數是一個程式碼區塊，它接受一些輸入，對該輸入進行一些處理，並產生一些輸出。</p>
<img src="/2019/11/11/introduction-to-functions-in-golang/golang-functions-illustration.jpg" class="">

<p>函數可以協助你將程式劃分為可重複使用的小段程式碼。它們提高了程式的可讀性、可維護性和可測試性。</p>
<span id="more"></span>

<h3 id="在-Golang-宣告和呼叫函數"><a href="#在-Golang-宣告和呼叫函數" class="headerlink" title="在 Golang 宣告和呼叫函數"></a>在 Golang 宣告和呼叫函數</h3><p>在 Golang 中，我們使用 <code>func</code> 關鍵字宣告函數。函數具有一個<strong>名稱</strong>、以逗號分隔的<strong>輸入參數</strong>及其型別的列表、<strong>結果型別</strong>和<strong>主體</strong>。</p>
<p>以下是一個簡單函數 <code>avg</code> 的範例，該函數接受兩個型別為 <code>float64</code> 的輸入參數，並返回輸入的平均值。結果也是 <code>float64</code> 型別：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">avg</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>現在，呼叫函數非常簡單。你只需要像這樣將所需數量的參數傳遞給函數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">avg</span><span class="token punctuation">(</span><span class="token number">6.56</span><span class="token punctuation">,</span> <span class="token number">13.44</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這是一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">avg</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	x <span class="token operator">:=</span> <span class="token number">5.75</span>
	y <span class="token operator">:=</span> <span class="token number">6.25</span>

	result <span class="token operator">:=</span> <span class="token function">avg</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Average of %.2f and %.2f = %.2f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Average of 5.75 and 6.25 &#x3D; 6.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="函數參數和返回型別是非必要的"><a href="#函數參數和返回型別是非必要的" class="headerlink" title="函數參數和返回型別是非必要的"></a>函數參數和返回型別是非必要的</h4><p>輸入參數和返回型別對於函數是非必要的。可以宣告一個沒有任何輸入和輸出的函數。</p>
<p><code>main()</code> 函數是此類函數的範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這是另一個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>你只需要為同一型別的多個連續參數指定一次型別</strong></p>
<p>如果一個函數具有兩個或更多個相同型別的連續參數，那麼只需為該型別的最後一個參數指定一次即可。</p>
<p>舉例來說，我們也可以像這樣宣告我們在上一節中看到的 <code>avg</code> 函數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">avg</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// Same as - func avg(x float64, y float64) float64 &#123; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這是另一個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">printPersonDetails</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// Same as - func printPersonDetails(firstName string, lastName string, age int) &#123; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="具有多個返回值的函數"><a href="#具有多個返回值的函數" class="headerlink" title="具有多個返回值的函數"></a>具有多個返回值的函數</h3><p>Go 函數能夠返回多個值。沒錯！大多數程式語言都不支援此功能。但 Go 是不同的。</p>
<p>假設你要建立一個函數，該函數接受股票的_先前價格_和_目前價格_，並返回價格變動的金額和百分比。</p>
<p>以下是你如何在 Go 實作這種函數的方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getStockPriceChange</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> currentPrice <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	change <span class="token operator">:=</span> currentPrice <span class="token operator">-</span> prevPrice
	percentChange <span class="token operator">:=</span> <span class="token punctuation">(</span>change <span class="token operator">/</span> prevPrice<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
	<span class="token keyword">return</span> change<span class="token punctuation">,</span> percentChange
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>很間單，對吧？你只需要在括號內用逗號分隔指定的返回型別，然後從函數中返回多個逗號分隔的值即可。</p>
<p>讓我們來看一個具有 <code>main()</code> 函數的完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">getStockPriceChange</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> currentPrice <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	change <span class="token operator">:=</span> currentPrice <span class="token operator">-</span> prevPrice
	percentChange <span class="token operator">:=</span> <span class="token punctuation">(</span>change <span class="token operator">/</span> prevPrice<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
	<span class="token keyword">return</span> change<span class="token punctuation">,</span> percentChange
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	prevStockPrice <span class="token operator">:=</span> <span class="token number">75000.0</span>
	currentStockPrice <span class="token operator">:=</span> <span class="token number">100000.0</span>

	change<span class="token punctuation">,</span> percentChange <span class="token operator">:=</span> <span class="token function">getStockPriceChange</span><span class="token punctuation">(</span>prevStockPrice<span class="token punctuation">,</span> currentStockPrice<span class="token punctuation">)</span>

	<span class="token keyword">if</span> change <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The Stock Price decreased by $%.2f which is %.2f%% of the prev price\n"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>percentChange<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The Stock Price increased by $%.2f which is %.2f%% of the prev price\n"</span><span class="token punctuation">,</span> change<span class="token punctuation">,</span> percentChange<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
The Stock Price increased by $25000.00 which is 33.33% of the prev price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="從函數返回錯誤值"><a href="#從函數返回錯誤值" class="headerlink" title="從函數返回錯誤值"></a>從函數返回錯誤值</h4><p>Golang 中經常使用多個返回值來從函數返回錯誤與結果。</p>
<p>我們來看一個範例：如果 <code>prevPrice</code> 是 <code>0</code>，則在上一節看到的 <code>getStockPriceChange</code> 函數將返回 <code>±Inf</code>（無限大）。如果你想返回錯誤，則可以透過增加一個型別為 <code>error</code> 的返回值，並像這樣返回錯誤值：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getStockPriceChangeWithError</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> currentPrice <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> prevPrice <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Previous price cannot be zero"</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	change <span class="token operator">:=</span> currentPrice <span class="token operator">-</span> prevPrice
	percentChange <span class="token operator">:=</span> <span class="token punctuation">(</span>change <span class="token operator">/</span> prevPrice<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
	<span class="token keyword">return</span> change<span class="token punctuation">,</span> percentChange<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>error</code> 型別是 Golang 中內建的型別。Go 程式使用 <code>error</code> 值來顯示異常情況。如果你現在不了解 <code>error</code> 請別擔心。你將在以後的文章中了解更多有關錯誤處理的資訊。</p>
<p>以下是使用 <code>main()</code> 函數示範上述觀念的完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"errors"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">getStockPriceChangeWithError</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> currentPrice <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> prevPrice <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Previous price cannot be zero"</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	change <span class="token operator">:=</span> currentPrice <span class="token operator">-</span> prevPrice
	percentChange <span class="token operator">:=</span> <span class="token punctuation">(</span>change <span class="token operator">/</span> prevPrice<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
	<span class="token keyword">return</span> change<span class="token punctuation">,</span> percentChange<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	prevStockPrice <span class="token operator">:=</span> <span class="token number">0.0</span>
	currentStockPrice <span class="token operator">:=</span> <span class="token number">100000.0</span>

	change<span class="token punctuation">,</span> percentChange<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getStockPriceChangeWithError</span><span class="token punctuation">(</span>prevStockPrice<span class="token punctuation">,</span> currentStockPrice<span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorry! There was an error: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> change <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The Stock Price decreased by $%.2f which is %.2f%% of the prev price\n"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>percentChange<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The Stock Price increased by $%.2f which is %.2f%% of the prev price\n"</span><span class="token punctuation">,</span> change<span class="token punctuation">,</span> percentChange<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Sorry! There was an error:  Previous price cannot be zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="具有命名返回值的函數"><a href="#具有命名返回值的函數" class="headerlink" title="具有命名返回值的函數"></a>具有命名返回值的函數</h3><p>在 Golang 中，函數的返回值可以被命名。命名返回值的行為就像你在函數頂部定義它們一樣。</p>
<p>讓我們用命名的返回值重寫在上一節看到的 <code>getStockPriceChange</code> 函數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Function with named return values</span>
<span class="token keyword">func</span> <span class="token function">getNamedStockPriceChange</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> currentPrice <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>change<span class="token punctuation">,</span> percentChange <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	change <span class="token operator">=</span> currentPrice <span class="token operator">-</span> prevPrice
	percentChange <span class="token operator">=</span> <span class="token punctuation">(</span>change <span class="token operator">/</span> prevPrice<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
	<span class="token keyword">return</span> change<span class="token punctuation">,</span> percentChange
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意我們如何在函數主體中將 <code>:=</code>（簡短宣告）更改為 <code>=</code>（賦值）。這是因為 Go 本身定義了所有命名的返回值，並讓它們可以在函數中使用。由於它們已經定義，因此你無法使用簡短宣告再次定義它們。</p>
<p>命名返回值允許你使用所謂的<strong>裸返回</strong>（不帶任何參數的 <code>return</code> 陳述式）。當你指定一個不帶任何參數的 <code>return</code> 陳述式時，預設情況下它會返回命名的返回值。因此，你也可以像這樣撰寫以上功能：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Function with named return values and naked return</span>
<span class="token keyword">func</span> <span class="token function">getNamedStockPriceChange</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> currentPrice <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>change<span class="token punctuation">,</span> percentChange <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	change <span class="token operator">=</span> currentPrice <span class="token operator">-</span> prevPrice
	percentChange <span class="token operator">=</span> <span class="token punctuation">(</span>change <span class="token operator">/</span> prevPrice<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>讓我們在帶有 <code>main()</code> 函數的完整範例中使用上述函數，並驗證輸出：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">getNamedStockPriceChange</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> currentPrice <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>change<span class="token punctuation">,</span> percentChange <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	change <span class="token operator">=</span> currentPrice <span class="token operator">-</span> prevPrice
	percentChange <span class="token operator">=</span> <span class="token punctuation">(</span>change <span class="token operator">/</span> prevPrice<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	prevStockPrice <span class="token operator">:=</span> <span class="token number">100000.0</span>
	currentStockPrice <span class="token operator">:=</span> <span class="token number">90000.0</span>

	change<span class="token punctuation">,</span> percentChange <span class="token operator">:=</span> <span class="token function">getNamedStockPriceChange</span><span class="token punctuation">(</span>prevStockPrice<span class="token punctuation">,</span> currentStockPrice<span class="token punctuation">)</span>

	<span class="token keyword">if</span> change <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The Stock Price decreased by $%.2f which is %.2f%% of the prev price\n"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>percentChange<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The Stock Price increased by $%.2f which is %.2f%% of the prev price\n"</span><span class="token punctuation">,</span> change<span class="token punctuation">,</span> percentChange<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
The Stock Price decreased by $10000.00 which is 10.00% of the prev price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>命名返回值提高了函數的可讀性。使用有意義的名稱可讓函數的使用者僅透過查看其簽名即可知道函數將返回什麼。</p>
<p>裸返回陳述式適合較短的函數。但如果你的函數比較長，請不要使用它們。它們可能會損害可讀性。你應該在更長的函數中明確地指定返回值。</p>
<h3 id="空白識別符號"><a href="#空白識別符號" class="headerlink" title="空白識別符號"></a>空白識別符號</h3><p>有時候你可能想忽略返回多個值的函數的某些結果。</p>
<p>舉例來說，假設你在使用我們上一節定義的 <code>getStockPriceChange</code> 函數，但你只對價格變動感興趣，而不是變動百分比。</p>
<p>現在，你可以像這樣宣告區域變數並儲存從函數返回的所有值：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">change<span class="token punctuation">,</span> percentChange <span class="token operator">:=</span> <span class="token function">getStockPriceChange</span><span class="token punctuation">(</span>prevStockPrice<span class="token punctuation">,</span> currentStockPrice<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但是在那種情況下，你將被迫使用 <code>percentChange</code> 變數，因為 Go 不允許建立你從未使用過的變數。</p>
<p>那有什麼解決方案？嗯，你可以改用_空白識別符號_：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">change<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">getStockPriceChange</span><span class="token punctuation">(</span>prevStockPrice<span class="token punctuation">,</span> currentStockPrice<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>空白識別符號用來告訴 Go 你不需要這個值。以下範例示範了此觀念：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">getStockPriceChange</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> currentPrice <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	change <span class="token operator">:=</span> currentPrice <span class="token operator">-</span> prevPrice
	percentChange <span class="token operator">:=</span> <span class="token punctuation">(</span>change <span class="token operator">/</span> prevPrice<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
	<span class="token keyword">return</span> change<span class="token punctuation">,</span> percentChange
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	prevStockPrice <span class="token operator">:=</span> <span class="token number">80000.0</span>
	currentStockPrice <span class="token operator">:=</span> <span class="token number">120000.0</span>

	change<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">getStockPriceChange</span><span class="token punctuation">(</span>prevStockPrice<span class="token punctuation">,</span> currentStockPrice<span class="token punctuation">)</span>

	<span class="token keyword">if</span> change <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The Stock Price decreased by $%.2f\n"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The Stock Price increased by $%.2f\n"</span><span class="token punctuation">,</span> change<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
The Stock Price increased by $40000.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本文中，你學到了如何在 Golang 中定義和呼叫函數、如何定義具有多個返回值和命名返回值的函數、如何從函數返回錯誤，以及如何使用空白識別符號。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang Package 初學者指南</title>
    <url>/2019/11/12/a-beginners-guide-to-packages-in-golang/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-packages">A beginners guide to Packages in Golang</a></p>
</blockquote>
<p>Go 旨在鼓勵良好的軟體工程實踐。高品質軟體的指導原則之一是 DRY 原則：<strong>D</strong>on’t <strong>R</strong>epeat <strong>Y</strong>ourself，這意味著你永遠不應重複撰寫相同的程式碼。你應該重複使用並儘可能建立在現有程式碼上。</p>
<p>允許程式碼重複使用的最基本的建構區塊是<a href="/2019/11/11/introduction-to-functions-in-golang/" title="函數">函數</a>。<strong>Package</strong> 是程式碼可重複使用性的下一步。他們可幫助你將相關的 Go 原始檔組織到同一單元中，使他們模組化、可重複使用和可維護。</p>
<p><em>在本文中，你將學到如何將 Go 程式碼組織到可重複使用的 package 中，如何匯入 package，如何將函數、型別或變數匯出到外部 package，以及如何安裝第三方 package。</em></p>
<span id="more"></span>

<p>讓我們開始吧！</p>
<h3 id="Go-工作區及程式碼組織"><a href="#Go-工作區及程式碼組織" class="headerlink" title="Go 工作區及程式碼組織"></a>Go 工作區及程式碼組織</h3><p>在學習 Go package 之前，了解 Go 程式碼在所謂的 Go 工作區中的組織方式非常重要。請查看以下文章，以複習有關 Go 組織程式碼的概念：</p>
<blockquote>
<a href="/2019/11/01/golang-installation-setup-gopath-workspace/" title="安裝、設定 Golang 的 GOPATH 和 Go 工作區">安裝、設定 Golang 的 GOPATH 和 Go 工作區</a>
</blockquote>
<h3 id="Go-Package"><a href="#Go-Package" class="headerlink" title="Go Package"></a>Go Package</h3><p>基本上來說，package 不過是 Go 工作區中包含一個或多個 Go 原始檔案或其他 Go package 的目錄。</p>
<img src="/2019/11/12/a-beginners-guide-to-packages-in-golang/go-package-illustration.jpg" class="">

<p>每個 Go 原始檔案都隸屬於一個 package。我們使用以下語法將原始檔案宣告為 package 的一部分：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> <span class="token operator">&lt;</span>packagename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面的 package 宣告必須是 Go 原始檔案中的第一行程式碼。Go 原始檔案中定義的所有函數、型別和變數都會成為所宣告 package 的一部分。</p>
<p>你可以選擇將 package 中定義的成員匯出到外部 package，或保持其私有化在相同 package。其他 package 可以匯入並使用從 package 中匯出的函數或型別。</p>
<p><strong>讓我們來看個範例</strong>：到目前為止，我們在本<a href="/tags#Golang">系列教學</a>中幾乎會看到所有程式碼都包含以下這行：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"fmt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>fmt</code> 是一個核心函式庫，包含格式化和列印輸出或從各種 I/O 來源讀取輸入等相關的功能。它匯出如 <code>Println()</code>、<code>Printf()</code>、<code>Scanf()</code>等函數，以供其他 package 重複使用。</p>
<p><strong>以這種方式封裝功能具有以下優點：</strong></p>
<ul>
<li><p>它減少了命名衝突。你可以在不同的 package 中使用相同的函數名稱。這讓我們的函數名稱簡短明瞭。</p>
</li>
<li><p>它將相關程式碼組織在一起，以便更輕鬆地找到要重複使用的程式碼。</p>
</li>
<li><p>它僅需要重新編譯程式實際上有更改的一小部分，進而加速了編譯過程。儘管我們使用了 <code>fmt</code> package，但我們不需要在每次修改我們的程式時重新編譯它。</p>
</li>
</ul>
<h3 id="main-package-和-main-函數"><a href="#main-package-和-main-函數" class="headerlink" title="main package 和 main() 函數"></a><code>main</code> package 和 <code>main()</code> 函數</h3><p>Go 程式從 <code>main</code> package 開始執行。這是一個特殊的 package，用於想要執行的程式。</p>
<p>按照慣例，可執行程式（有 <code>main</code> package 的程式）稱為<i>指令</i>。其他則簡稱為 <i>Package</i>。</p>
<p><code>main()</code> 函數是一個特殊的函數，它是可執行程式的進入點。讓我們來看一個 Go 的可執行程式範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Package declaration</span>
<span class="token keyword">package</span> main

<span class="token comment">// Importing packages</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
	<span class="token string">"math"</span>
	<span class="token string">"math/rand"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Finding the Max of two numbers</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">73.15</span><span class="token punctuation">,</span> <span class="token number">92.46</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// Calculate the square root of a number</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">225</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// Printing the value of `𝜋`</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span>

	<span class="token comment">// Epoch time in milliseconds</span>
	epoch <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>

	<span class="token comment">// Generating a random integer between 0 to 100</span>
	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ go run main.go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
92.46
15
3.141592653589793
1538045386
40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="匯入-Package"><a href="#匯入-Package" class="headerlink" title="匯入 Package"></a>匯入 Package</h3><p>Go 中有兩種匯入 package 的方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Multiple import statements</span>
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">import</span> <span class="token string">"time"</span>
<span class="token keyword">import</span> <span class="token string">"math"</span>
<span class="token keyword">import</span> <span class="token string">"math/rand"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Factored import statements</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
	<span class="token string">"math"</span>
	<span class="token string">"math/rand"</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Go 的慣例是：_package 的名稱與匯入路徑的最後一個元素相同_。舉例來說，匯入為 <code>math/rand</code> 的 package 的名稱為 <code>rand</code>。它是透過 <code>math/rand</code> 路徑匯入的，因為它是 <code>math</code> package 中的巢狀子目錄。</p>
<h3 id="匯出與未匯出的名稱"><a href="#匯出與未匯出的名稱" class="headerlink" title="匯出與未匯出的名稱"></a>匯出與未匯出的名稱</h3><blockquote>
<p>以大寫字母開頭的所有內容（變數、型別或函數）都會被匯出，並可被外部 package 看見。</p>
<p>任何不以大寫字母開頭的內容都不會被匯出，並且僅在同一 package 中可見。</p>
</blockquote>
<p>匯入 package 時，只能存取其匯出的名稱。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// MaxInt64 is an exported name</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Max value of int64: "</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt64<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// Phi is an exported name</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value of Phi (ϕ): "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>Phi<span class="token punctuation">)</span>

	<span class="token comment">// pi starts with a small letter, so it is not exported</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value of Pi (𝜋): "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
.&#x2F;exported_names.go:16:38: cannot refer to unexported name math.pi
.&#x2F;exported_names.go:16:38: undefined: math.pi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>要修正以上錯誤，需要將 <code>math.pi</code> 更改為 <code>math.Pi</code>。</p>
<h3 id="建立和管理自訂-Package"><a href="#建立和管理自訂-Package" class="headerlink" title="建立和管理自訂 Package"></a>建立和管理自訂 Package</h3><p>到目前為止，我們只有在 <code>main</code> package 中撰寫程式碼，並使用從 Go 核心函式庫匯入的功能。</p>
<p>讓我們建立一個 Go 專案範例，該專案具有多個自訂 package 以及一堆原始碼檔案，並了解相同的 package 宣告、匯入和匯出概念如何套用在自訂 package。</p>
<p>這是我們在 Go 工作區內組織專案的方式：</p>
<img src="/2019/11/12/a-beginners-guide-to-packages-in-golang/go-custom-package-organization.jpg" class="">

<p><code>src</code> 資料夾包含我們的 Go 專案，該專案位於名為 <code>example</code> 的 git 儲存庫中。<code>bin</code> 和 <code>pkg</code> 資料夾分別包含可執行檔和 package 檔案。他們在我們安裝程式時由 <a href="/2019/11/01/golang-installation-setup-gopath-workspace/" title="Go 工具">Go 工具</a>自動產生。</p>
<p>讓我們逐一查看程式中的每個原始檔案中的程式碼：</p>
<h4 id="numbers-prime-go"><a href="#numbers-prime-go" class="headerlink" title="numbers/prime.go"></a>numbers/prime.go</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> numbers

<span class="token keyword">import</span> <span class="token string">"math"</span>

<span class="token comment">// Checks if a number is prime or not</span>
<span class="token keyword">func</span> <span class="token function">IsPrime</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> num<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> num <span class="token operator">></span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="strings-reverse-go"><a href="#strings-reverse-go" class="headerlink" title="strings/reverse.go"></a>strings/reverse.go</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> strings

<span class="token comment">// Reverses a string</span>
<span class="token comment">/*
	Since strings in Go are immutable, we first convert the string to a mutable array of runes ([]rune),
	perform the reverse operation on that, and then re-cast to a string.
*/</span>
<span class="token keyword">func</span> <span class="token function">Reverse</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	runes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	reversedRunes <span class="token operator">:=</span> <span class="token function">reverseRunes</span><span class="token punctuation">(</span>runes<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>reversedRunes<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="strings-reverse-runes-go"><a href="#strings-reverse-runes-go" class="headerlink" title="strings/reverse_runes.go"></a>strings/reverse_runes.go</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> strings

<span class="token comment">// Reverses an array of runes</span>
<span class="token comment">// This function is not exported (It is only visible inside the `strings` package)</span>
<span class="token keyword">func</span> <span class="token function">reverseRunes</span><span class="token punctuation">(</span>r <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>
		r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="strings-greeting-texts-go-Nested-package"><a href="#strings-greeting-texts-go-Nested-package" class="headerlink" title="strings/greeting/texts.go (Nested package)"></a>strings/greeting/texts.go (Nested package)</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Nested Package</span>
<span class="token keyword">package</span> greeting

<span class="token comment">// Exported</span>
<span class="token keyword">const</span>  <span class="token punctuation">(</span>
	WelcomeText <span class="token operator">=</span> <span class="token string">"Hello, World to Golang"</span>
	MorningText <span class="token operator">=</span> <span class="token string">"Good Morning"</span>
	EveningText <span class="token operator">=</span> <span class="token string">"Good Evening"</span>
<span class="token punctuation">)</span>

<span class="token comment">// Not exported (only visible inside the `greeting` package)</span>
<span class="token keyword">var</span> loremIpsumText <span class="token operator">=</span> <span class="token string">`Lorem ipsum dolor sit amet, consectetur adipiscing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
commodo consequat.`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="myapp-app-go-The-main-package-entry-point-of-our-program"><a href="#myapp-app-go-The-main-package-entry-point-of-our-program" class="headerlink" title="myapp/app.go (The main package: entry point of our program)"></a>myapp/app.go (The main package: entry point of our program)</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"github.com/callicoder/example/numbers"</span>
	<span class="token string">"github.com/callicoder/example/strings"</span>
	<span class="token string">"github.com/callicoder/example/strings/greeting"</span> <span class="token comment">// Importing a nested package</span>
	str <span class="token string">"strings"</span>	<span class="token comment">// Package Alias</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">IsPrime</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span>WelcomeText<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token string">"callicoder"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">"Go is Awesome. I love Go"</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Installing the Go package
$ go install github.com&#x2F;callicoder&#x2F;example&#x2F;myapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Running the executable binary
$ myapp
true
Hello, World to Golang
redocillac
2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul>
<li><p>匯入路徑</p>
<p>所有匯入路徑都相對於 Go 工作區的 <code>src</code> 目錄。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/callicoder/example/numbers"</span>
	<span class="token string">"github.com/callicoder/example/strings"</span>
	<span class="token string">"github.com/callicoder/example/strings/greeting"</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>Package 別名</p>
<p>你可以使用 package 別名來解決相同名稱的不同 package 之間的衝突，或只是為匯入的 package 取一個簡短的名字。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>
	str <span class="token string">"strings"</span>   <span class="token comment">// Package Alias</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>巢狀 Package</p>
<p>  你可以在 package 中放入另一個 package。就像建立子目錄一樣簡單：</p>
<pre class="line-numbers language-none"><code class="language-none">src
    github.com&#x2F;callicoder&#x2F;example
        strings                     # Package
            greeting                # Nested Package
                texts.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以如同根 package 一樣匯入巢狀 package。只要提供他相對於 <code>$GOPATH/src</code> 目錄的路徑：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/callicoder/example/strings/greeting"</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="安裝第三方-Package"><a href="#安裝第三方-Package" class="headerlink" title="安裝第三方 Package"></a>安裝第三方 Package</h3><p>你可以使用 <code>go get</code> 指令從遠端儲存庫中取得第三方 package。</p>
<pre class="line-numbers language-none"><code class="language-none">$ go get -u github.com&#x2F;jinzhu&#x2F;gorm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面的指令從 Github 取得 <code>gorm</code> package，並將其儲存在 Go 工作區中的 <code>src/github.com/jinzhu/gorm</code> 路徑中。</p>
<p>你現在可以像這樣在程式中匯入並使用以上 package：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/jinzhu/gorm"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要注意的是，與其他語言和 package 管理工具（<code>npm</code>、<code>maven</code> 等）不同，Go 沒有集中的官方 package 儲存庫。因此，他要求你在 <code>go get</code> 指令中提供 package 的主機名稱和路徑。</p>
<p>這裡有另一個 <code>go get</code> 指令的範例，該指令從 <code>go.uber.org</code>（Uber 的 Go package 託管網站）下載 package：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go get -u go.uber.org&#x2F;zap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面的指令下載並儲存 <code>zap</code> package 在 <code>$GOPATH/src/go.uber.org/zap</code> 路徑中。你可以這樣匯入它：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"go.uber.org/zap"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本文中，你學到了如何將 Go 程式碼組織到可重複使用的 package 中、如何匯入 package、如何匯出 package 中的成員、如何建立自訂 package 以及如何安裝第三方 package。</p>
<p>在之後的文章中，你將會學習有關 package 初始化、空白識別字元和 package 文件。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Golang 中使用陣列</title>
    <url>/2019/11/12/working-with-arrays-in-golang/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-arrays">Working with Arrays in Golang</a></p>
</blockquote>
<p>陣列是固定長度的相同型別元素的集合。陣列的元素按順序儲存，並且可以使用它們的 <code>index</code> 來存取。</p>
<img src="/2019/11/12/working-with-arrays-in-golang/golang-array.jpg" class="">

<span id="more"></span>

<h3 id="在-Golang-中宣告陣列"><a href="#在-Golang-中宣告陣列" class="headerlink" title="在 Golang 中宣告陣列"></a>在 Golang 中宣告陣列</h3><p>你可以像這樣宣告一個長度為 <code>n</code> 且型別為 <code>T</code> 的陣列：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>舉例來說，以下是如何宣告一個長度為 10 的整數陣列：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// An array of 10 integers</span>
<span class="token keyword">var</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>現在，讓我們看一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> x <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// An array of 5 integers</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>

	<span class="token keyword">var</span> y <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// An array of 8 strings</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>

	<span class="token keyword">var</span> z <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">complex128</span> <span class="token comment">// An array of 3 complex numbers</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
[0 0 0 0 0]
[       ]
[(0+0i) (0+0i) (0+0i)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>預設情況下，所有陣列元素皆使用與陣列型別一致的<a href="/2019/11/05/golang-variables-zero-values-type-inference/" title="零值">零值</a>初始化。</p>
<p>舉例來說，如果我們宣告一個整數陣列，則所有元素都將以 <code>0</code> 初始化。如果我們宣告一個字串陣列，則所有元素都將以空字串 <code>&quot;&quot;</code> 初始化，依此類推。</p>
<h3 id="透過索引存取陣列元素"><a href="#透過索引存取陣列元素" class="headerlink" title="透過索引存取陣列元素"></a>透過索引存取陣列元素</h3><p>陣列的元素按順序儲存，可以透過它們的 <code>index</code> 存取。<code>index</code> 從零開始，結束於 <code>length - 1</code>。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> x <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// An array of 5 integers</span>

	x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
	x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101</span>
	x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">103</span>
	x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">105</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x[0] = %d, x[1] = %d, x[2] = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x = "</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
x[0] &#x3D; 100, x[1] &#x3D; 101, x[2] &#x3D; 0
x &#x3D;  [100 101 0 103 105]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在上面的範例中，由於我們沒有分派 <code>x[2]</code> 任何值，因此它的值為 <code>0</code>（整數的零值）。</p>
<h3 id="使用陣列定數初始化陣列"><a href="#使用陣列定數初始化陣列" class="headerlink" title="使用陣列定數初始化陣列"></a>使用陣列定數初始化陣列</h3><p>你可以像這樣同時宣告並初始化陣列：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Declaring and initializing an array at the same time</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面表達式右側的陳述式稱為陣列定數。</p>
<p>注意，我們不需要像 <code>var a [5]int</code> 中那樣指定變數 <code>a</code> 的型別，因為編譯器可以從右側的表達式自動推斷型別。</p>
<p>你也可以使用 Golang 的<a href="/2019/11/05/golang-variables-zero-values-type-inference/" title="簡短變數宣告">簡短變數宣告</a>來宣告和初始化陣列。上面的陣列宣告也可以在任何函數內撰寫如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Short hand declaration</span>
a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這是一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Declaring and initializing an array at the same time</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

	<span class="token comment">// Short declaration for declaring and initializing an array</span>
	b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

	<span class="token comment">// You don't need to initialize all the elements of the array.</span>
	<span class="token comment">// The un-initialized elements will be assigned the zero value of the corresponding array type</span>
	c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
[2 4 6 8 10]
[2 4 6 8 10]
[2 0 0 0 0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="讓-Go-編譯器推斷陣列的長度"><a href="#讓-Go-編譯器推斷陣列的長度" class="headerlink" title="讓 Go 編譯器推斷陣列的長度"></a>讓 Go 編譯器推斷陣列的長度</h4><p>你還可以從陣列的初始化表達式中省略長度宣告，並讓編譯器為你計算元素的數量：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Letting Go compiler infer the length of the array</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
[3 5 7 9 11 13 17]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="探索有關-Golang-陣列的更多資訊"><a href="#探索有關-Golang-陣列的更多資訊" class="headerlink" title="探索有關 Golang 陣列的更多資訊"></a>探索有關 Golang 陣列的更多資訊</h3><ol>
<li><strong>陣列的長度是其型別的一部分</strong></li>
</ol>
<p>  陣列的長度是其型別的一部分。因此陣列 <code>a[5]int</code> 和 <code>a[10]int</code> 是完全不同的型別，且你不能將一個分派給另一個。</p>
<p>  也就是說你無法調整陣列長度，因為調整陣列的長度將意味著更改其型別，而你無法在 Golang 中更改變數的型別。</p>
  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> a  <span class="token comment">// Error, a and b are distinct types</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><strong>Golang 中的陣列是數值型別</strong></li>
</ol>
<p>  Golang 中的陣列是數值型別，不像其他語言，如 C、C++ 和 Java 的陣列是參考型別。</p>
<p>  這意味著當你將陣列賦值給新變數或將陣列傳遞給函數時，將複製整個陣列。因此，如果你對此複製的陣列進行任何更改，原始陣列將不會受到影響且保持不變。</p>
<p>  這有一個範例：</p>
  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"English"</span><span class="token punctuation">,</span> <span class="token string">"Japanese"</span><span class="token punctuation">,</span> <span class="token string">"Spanish"</span><span class="token punctuation">,</span> <span class="token string">"French"</span><span class="token punctuation">,</span> <span class="token string">"Hindi"</span><span class="token punctuation">&#125;</span>
	a2 <span class="token operator">:=</span> a1 <span class="token comment">// A copy of the array `a1` is assigned to `a2`</span>

	a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"German"</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a1 = "</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span> <span class="token comment">// The array `a1` remains unchanged</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a2 = "</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <pre class="line-numbers language-none"><code class="language-none"># Output
a1 &#x3D;  [English Japanese Spanish French Hindi]
a2 &#x3D;  [English German Spanish French Hindi]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="在-Golang-中迭代陣列"><a href="#在-Golang-中迭代陣列" class="headerlink" title="在 Golang 中迭代陣列"></a>在 Golang 中迭代陣列</h3><p>你可以像這樣使用 <code>for</code> 迴圈迭代陣列：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	names <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Mark Zuckerberg"</span><span class="token punctuation">,</span> <span class="token string">"Bill Gates"</span><span class="token punctuation">,</span> <span class="token string">"Larry Page"</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Mark Zuckerberg
Bill Gates
Larry Page<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的範例中，<code>len()</code> 函數用於找出陣列的長度。</p>
<p>讓我們來看另一個範例。在下面的範例中，我們透過迭代陣列，將元素逐一加到變數 <code>sum</code> 中，找出陣列所有元素的總和：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">9.5</span><span class="token punctuation">&#125;</span>
	sum <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		sum <span class="token operator">=</span> sum <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Sum of all the elements in array  %v = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> sum<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Sum of all the elements in array  [3.5 7.2 4.8 9.5] &#x3D; 25.000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="使用-range-迭代陣列"><a href="#使用-range-迭代陣列" class="headerlink" title="使用 range 迭代陣列"></a>使用 <code>range</code> 迭代陣列</h3><p>Golang 使用 <code>range</code> 運算子提供了一種更強大的 <code>for</code> 迴圈形式。以下是如何將 <code>range</code> 運算子與 <code>for</code> 迴圈一起使用來迭代陣列：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	daysOfWeek <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Mon"</span><span class="token punctuation">,</span> <span class="token string">"Tue"</span><span class="token punctuation">,</span> <span class="token string">"Wed"</span><span class="token punctuation">,</span> <span class="token string">"Thu"</span><span class="token punctuation">,</span> <span class="token string">"Fri"</span><span class="token punctuation">,</span> <span class="token string">"Sat"</span><span class="token punctuation">,</span> <span class="token string">"Sun"</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> daysOfWeek <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Day %d of week = %s\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Day 0 of week &#x3D; Mon
Day 1 of week &#x3D; Tue
Day 2 of week &#x3D; Wed
Day 3 of week &#x3D; Thu
Day 4 of week &#x3D; Fri
Day 5 of week &#x3D; Sat
Day 6 of week &#x3D; Sun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>現在，讓我們使用 <code>range</code> 形式的 <code>for</code> 迴圈來撰寫一個與普通 <code>for</code> 迴圈相同的 <code>sum</code> 範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">9.5</span><span class="token punctuation">&#125;</span>
	sum <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>
		sum <span class="token operator">=</span> sum <span class="token operator">+</span> value
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Sum of all the elements in array %v = %f"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> sum<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當你執行上面的程式時，它會產生以下錯誤：</p>
<pre class="line-numbers language-none"><code class="language-none"># Output
.&#x2F;array_iteration_range.go:9:13: index declared and not used<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Go 編譯器不允許建立從未使用過的變數。你可以透過使用 <code>_</code>（底線） 代替 <code>index</code> 來解決此問題：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">9.5</span><span class="token punctuation">&#125;</span>
	sum <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>
		sum <span class="token operator">=</span> sum <span class="token operator">+</span> value
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Sum of all the elements in array %v = %f"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> sum<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>底線（<code>_</code>）用於告訴編譯器我們不需要此變數。上面的程式現在可以成功執行並輸出陣列的總和：</p>
<pre class="line-numbers language-none"><code class="language-none"># Output
Sum of all the elements in array [3.5 7.2 4.8 9.5] &#x3D; 25.000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Golang-中的多維陣列"><a href="#Golang-中的多維陣列" class="headerlink" title="Golang 中的多維陣列"></a>Golang 中的多維陣列</h3><p>到目前為止，我們在本文中建立的所有陣列都是一維的。你也可以在 Golang 中建立多維陣列。</p>
<p>以下範例示範了如何建立多維陣列：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>	<span class="token comment">// This trailing comma is mandatory</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

	<span class="token comment">// Just like 1D arrays, you don't need to initialize all the elements in a multi-dimensional array.</span>
	<span class="token comment">// Un-initialized array elements will be assigned the zero value of the array type.</span>
	b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7.4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
[[3 5] [7 9]]
[[1 3 0 0] [4.5 -3 7.4 2] [6 2 11 0]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>陣列很有用，但由於其固定長度而造成的限制而有些不靈活。這就是為什麼 Go 提供了另一個名為 Slice 的資料結構，該資料結構建構在陣列之上，並提供了我們所需的所有靈活性。在下一篇文章中，我們將學習 Slice。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang Slice 介紹</title>
    <url>/2019/11/13/introduction-to-slices-in-golang/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-slices">Introduction to Slices in Golang</a></p>
</blockquote>
<p>Slice 是陣列的一部分。Slice 建構在陣列之上，與陣列相比提供了更多功能、靈活性和便利性。</p>
<p>如同陣列一樣，Slice 是可索引的且具有長度。但與陣列不同的是，它們可以調整長度。</p>
<p>在內部，Slice 只是對底層陣列的參考。在本文中，我們將學到如何建立和使用 Slice，並了解它們背後的運作方式。</p>
<span id="more"></span>

<h3 id="宣告-Slice"><a href="#宣告-Slice" class="headerlink" title="宣告 Slice"></a>宣告 Slice</h3><p>使用 <code>[]T</code> 宣告型別為 <code>T</code> 的 Slice。舉例來說，以下是宣告 <code>int</code> 型別的 Slice 的方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Slice of type `int`</span>
<span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Slice 的宣告就像陣列一樣，只不過我們在中括號 <code>[]</code> 中未指定任何長度。</p>
<h3 id="建立和初始化-Slice"><a href="#建立和初始化-Slice" class="headerlink" title="建立和初始化 Slice"></a>建立和初始化 Slice</h3><h4 id="1-使用-Slice-定數建立-Slice"><a href="#1-使用-Slice-定數建立-Slice" class="headerlink" title="1. 使用 Slice 定數建立 Slice"></a>1. 使用 Slice 定數建立 Slice</h4><p>你可以像這樣使用 Slice 定數來建立 Slice：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Creating a slice using a slice literal</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述陳述式右側的表達式是 Slice 定數。Slice 定數的宣告與<a href="/2019/11/12/working-with-arrays-in-golang/" title="陣列定數">陣列定數</a>一樣，不同之處在於沒有在中括號 <code>[]</code> 中指定任何長度。</p>
<p>當你使用 Slice 定數建立 Slice 時，它會先建立一個陣列，然後返回參考它的 Slice。</p>
<p>讓我們看一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Creating a slice using a slice literal</span>
	<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">&#125;</span>

	<span class="token comment">// Short hand declaration</span>
	t <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s = "</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"t = "</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
s &#x3D;  [3 5 7 9 11 13 17]
t &#x3D;  [2 4 8 16 32 64]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-從陣列建立-Slice"><a href="#2-從陣列建立-Slice" class="headerlink" title="2. 從陣列建立 Slice"></a>2. 從陣列建立 Slice</h4><p>由於 Slice 是陣列的一部分，因此我們可以從陣列建立 Slice。</p>
<p>要從陣列 <code>a</code> 建立 Slice，我們指定兩個由冒號分隔的索引 <code>low</code>（下限）和 <code>high</code>（上限）：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Obtaining a slice from an array `a`</span>
a<span class="token punctuation">[</span>low<span class="token punctuation">:</span>high<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的表達式從陣列 <code>a</code> 選擇一個 Slice。Slice 的結果包含從索引 <code>low</code> 到 <code>high</code> 的所有元素，但不包括索引 <code>high</code> 的元素。</p>
<p>讓我們來看一個範例，讓事情更清晰明瞭：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Alpha"</span><span class="token punctuation">,</span> <span class="token string">"Beta"</span><span class="token punctuation">,</span> <span class="token string">"Gamma"</span><span class="token punctuation">,</span> <span class="token string">"Delta"</span><span class="token punctuation">,</span> <span class="token string">"Epsilon"</span><span class="token punctuation">&#125;</span>

	<span class="token comment">// Creating a slice from the array</span>
	<span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Array a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Slice s = "</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">Array a &#x3D;  [Alpha Beta Gamma Delta Epsilon]
Slice s &#x3D;  [Beta Gamma Delta]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Slice 表達式中的 <code>low</code> 和 <code>high</code> 索引是非必要的。<code>low</code> 的預設值為 <code>0</code>，而 <code>high</code> 的預設值為 Slice 的長度。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">&#125;</span>

	slice1 <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
	slice2 <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
	slice3 <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	slice4 <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Array a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice1 = "</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice2 = "</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice3 = "</span><span class="token punctuation">,</span> slice3<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice4 = "</span><span class="token punctuation">,</span> slice4<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Array a &#x3D;  [C C++ Java Python Go]
slice1 &#x3D;  [C++ Java Python]
slice2 &#x3D;  [C C++ Java]
slice3 &#x3D;  [Java Python Go]
slice4 &#x3D;  [C C++ Java Python Go]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-從一個-Slice-建立另一個-Slice"><a href="#3-從一個-Slice-建立另一個-Slice" class="headerlink" title="3. 從一個 Slice 建立另一個 Slice"></a>3. 從一個 Slice 建立另一個 Slice</h4><p>也可以透過劃分現有的 Slice 來建立 Slice。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cities <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"London"</span><span class="token punctuation">,</span> <span class="token string">"Chicago"</span><span class="token punctuation">,</span> <span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token string">"Delhi"</span><span class="token punctuation">,</span> <span class="token string">"Mumbai"</span><span class="token punctuation">,</span> <span class="token string">"Bangalore"</span><span class="token punctuation">,</span> <span class="token string">"Hyderabad"</span><span class="token punctuation">,</span> <span class="token string">"Hong Kong"</span><span class="token punctuation">&#125;</span>

	asianCities <span class="token operator">:=</span> cities<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	indianCities <span class="token operator">:=</span> asianCities<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cities = "</span><span class="token punctuation">,</span> cities<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"asianCities = "</span><span class="token punctuation">,</span> asianCities<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"indianCities = "</span><span class="token punctuation">,</span> indianCities<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
cities &#x3D;  [New York London Chicago Beijing Delhi Mumbai Bangalore Hyderabad Hong Kong]
asianCities &#x3D;  [Beijing Delhi Mumbai Bangalore Hyderabad Hong Kong]
indianCities &#x3D;  [Delhi Mumbai Bangalore Hyderabad]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="修改-Slice"><a href="#修改-Slice" class="headerlink" title="修改 Slice"></a>修改 Slice</h3><p>Slice 是參考型別。它們參考到底層陣列。修改 Slice 的元素將會修改參考陣列中的相應元素。引用相同陣列的其他 Slice 也會看到這些修改。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Mon"</span><span class="token punctuation">,</span> <span class="token string">"Tue"</span><span class="token punctuation">,</span> <span class="token string">"Wed"</span><span class="token punctuation">,</span> <span class="token string">"Thu"</span><span class="token punctuation">,</span> <span class="token string">"Fri"</span><span class="token punctuation">,</span> <span class="token string">"Sat"</span><span class="token punctuation">,</span> <span class="token string">"Sun"</span><span class="token punctuation">&#125;</span>

	slice1 <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	slice2 <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"------- Before Modifications -------"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a  = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice1 = "</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice2 = "</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>

	slice1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"TUE"</span>
	slice1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"WED"</span>
	slice1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"THU"</span>

	slice2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"FRIDAY"</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\n-------- After Modifications --------"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a  = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice1 = "</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice2 = "</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
------- Before Modifications -------
a  &#x3D;  [Mon Tue Wed Thu Fri Sat Sun]
slice1 &#x3D;  [Tue Wed Thu Fri Sat Sun]
slice2 &#x3D;  [Thu Fri Sat Sun]

-------- After Modifications --------
a  &#x3D;  [Mon TUE WED THU FRIDAY Sat Sun]
slice1 &#x3D;  [TUE WED THU FRIDAY Sat Sun]
slice2 &#x3D;  [THU FRIDAY Sat Sun]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Slice-的長度和容量"><a href="#Slice-的長度和容量" class="headerlink" title="Slice 的長度和容量"></a>Slice 的長度和容量</h3><p>Slice 由三樣東西組成：</p>
<ul>
<li><p>指向底層陣列的<strong>指標</strong>（參考）。</p>
</li>
<li><p>Slice 包含的陣列部分的<strong>長度</strong>。</p>
</li>
<li><p><strong>容量</strong>（該部分可以增加到的最大大小）</p>
</li>
</ul>
<img src="/2019/11/13/introduction-to-slices-in-golang/golang-slices-illustration.jpg" class="">

<p>讓我們用以下陣列和從中得到的 Slice 作為範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這是上面範例中的 Slice <code>s</code> 的表示方式：</p>
<img src="/2019/11/13/introduction-to-slices-in-golang/golang-slices-length-capacity.jpg" class="">


<p>Slice 的長度是 Slice 中元素的數量，在上面的範例中為 <code>3</code>。</p>
<p>容量是從 Slice 中第一個元素開始的底層陣列中的元素數量，在上面的範例中為 <code>5</code>。</p>
<p>你可以使用內建函數 <code>len()</code> 和 <code>cap()</code> 找到 Slice 的長度和容量：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">&#125;</span>
	s <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
s &#x3D; [20 30 40], len &#x3D; 3, cap &#x3D; 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>透過重新劃分，可以將 Slice 的長度擴充到其容量。任何嘗試將其長度擴充到可用容量之外的行為將導致執行時期錯誤。</p>
<p>查看以下範例來了解如何重新劃分指定 Slice 來更改其長度和容量：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Original Slice"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

	s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nAfter slicing from index 1 to 5"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

	s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nAfter extending the length"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

	s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nAfter dropping the first two elements"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Original Slice
s &#x3D; [10 20 30 40 50 60 70 80 90 100], len &#x3D; 10, cap &#x3D; 10

After slicing from index 1 to 5
s &#x3D; [20 30 40 50], len &#x3D; 4, cap &#x3D; 9

After extending the length
s &#x3D; [20 30 40 50 60 70 80 90], len &#x3D; 8, cap &#x3D; 9

After dropping the first two elements
s &#x3D; [40 50 60 70 80 90], len &#x3D; 6, cap &#x3D; 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用內建-make-函數建立-Slice"><a href="#使用內建-make-函數建立-Slice" class="headerlink" title="使用內建 make() 函數建立 Slice"></a>使用內建 <code>make()</code> 函數建立 Slice</h3><p>現在我們知道了 Slice 的長度和容量。讓我們來看看建立 Slice 的另一種方法。</p>
<p>Golang 提供了一個名為 <code>make()</code> 的函數來建立 Slice。以下是 <code>make()</code> 函數的簽名：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>make 函數需要型別、長度和容量（非必要）。它分配了長度與給定容量相同的底層陣列，並返回參考該陣列的 Slice。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Creates an array of size 10, slices it till index 5, and returns the slice reference</span>
	s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
s &#x3D; [0 0 0 0 0], len &#x3D; 5, cap &#x3D; 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>make()</code> 函數中的容量參數是非必要的。如果省略，則預設為指定的長度：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Creates an array of size 5, and returns a slice reference to it</span>
	s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
s &#x3D; [0 0 0 0 0], len &#x3D; 5, cap &#x3D; 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Slice-的零值"><a href="#Slice-的零值" class="headerlink" title="Slice 的零值"></a>Slice 的零值</h3><p>Slice 的<a href="/2019/11/05/golang-variables-zero-values-type-inference/" title="零值">零值</a>是 <code>nil</code>。具有零值的 Slice 沒有任何底層陣列，且長度和容量為 <code>0</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s is nil"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
s &#x3D; [], len &#x3D; 0, cap &#x3D; 0
s is nil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="Slice-函數"><a href="#Slice-函數" class="headerlink" title="Slice 函數"></a>Slice 函數</h3><h4 id="1-copy-函數：複製-Slice"><a href="#1-copy-函數：複製-Slice" class="headerlink" title="1. copy() 函數：複製 Slice"></a>1. copy() 函數：複製 Slice</h4><p><code>copy()</code> 函數將元素從一個 Slice 複製到另一個 Slice。它的簽名看起來像樣這樣：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">copy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">)</span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>它需要兩個 Slice：來源 Slice 和目的 Slice。然後它會將元素從來源複製到目的，並返回複製的元素數量。</p>
<p>複製的元素數量將是 <code>len(src)</code> 和 <code>len(dst)</code> 的最小值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	src <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Sublime"</span><span class="token punctuation">,</span> <span class="token string">"VSCode"</span><span class="token punctuation">,</span> <span class="token string">"IntelliJ"</span><span class="token punctuation">,</span> <span class="token string">"Eclipse"</span><span class="token punctuation">&#125;</span>
	dest <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

	numElementsCopied <span class="token operator">:=</span> <span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"src = "</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dest = "</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Number of elements copied from src to dest = "</span><span class="token punctuation">,</span> numElementsCopied<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
src &#x3D;  [Sublime VSCode IntelliJ Eclipse]
dest &#x3D;  [Sublime VSCode]
Number of elements copied from src to dest &#x3D;  2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-append-函數：附加到-Slice"><a href="#2-append-函數：附加到-Slice" class="headerlink" title="2. append() 函數：附加到 Slice"></a>2. append() 函數：附加到 Slice</h4><p><code>append()</code> 函數在給定的 Slice 結尾附加新元素。以下是 <code>append</code> 函數的簽名。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">append</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> x <span class="token operator">...</span>T<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>它需要一個 Slice 和可變數量的參數 <strong>x …T</strong>。然後，它返回一個新的 Slice ，其中包含給定 Slice 中的所有元素及新元素。</p>
<p>如果給定的 Slice 沒有足夠的容量來容納新元素，則將分配具有更大容量的新底層陣列。現有 Slice 的底層陣列中的所有元素都將複製到新陣列，然後附加新元素。</p>
<p>但是，如果 Slice 具有足夠的容量來容納新元素，則 <code>append()</code> 函數將再使用其底層陣列並將新元素附加到同一陣列中。</p>
<p>讓我們來看一個範例，以更好地理解：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	slice1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">&#125;</span>
	slice2 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Ruby"</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice1 = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> slice1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice2 = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> slice2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span><span class="token punctuation">)</span>

	slice1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"C#"</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nslice1 = "</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice2 = "</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
slice1 &#x3D; [C C++ Java], len &#x3D; 3, cap &#x3D; 3
slice2 &#x3D; [C C++ Java Python Ruby Go], len &#x3D; 6, cap &#x3D; 6

slice1 &#x3D;  [C# C++ Java]
slice2 &#x3D;  [C C++ Java Python Ruby Go]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上面的範例中，由於 <code>slice1</code> 的容量為 3，它無法容納更多的元素。因此，當我們對它附加更多元素時，新的底層陣列分配了更大的容量。</p>
<p>所以，如果你修改 <code>slice1</code>，<code>slice2</code> 將不會看到這些更改，因為它參考了另一個陣列。</p>
<p><strong>但是，如果 <code>slice1</code> 具有足夠的容量來容納新元素呢？</strong> 嗯，在那種情況下，將不會分配新的陣列，並且會將元素附加到同一底層陣列中。</p>
<p>同樣地，在這種情況下，對 <code>slice1</code> 的更改也會影響 <code>slice2</code>，因為兩者都參考相同的底層陣列。</p>
<p>在以下範例中對此進行了示範：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	slice1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	slice2 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Ruby"</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice1 = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> slice1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice2 = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> slice2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span><span class="token punctuation">)</span>

	slice1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"C#"</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nslice1 = "</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice2 = "</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
slice1 &#x3D; [C C++ Java], len &#x3D; 3, cap &#x3D; 10
slice2 &#x3D; [C C++ Java Python Ruby Go], len &#x3D; 6, cap &#x3D; 10

slice1 &#x3D;  [C# C++ Java]
slice2 &#x3D;  [C# C++ Java Python Ruby Go]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="附加到具有零值的-Slice"><a href="#附加到具有零值的-Slice" class="headerlink" title="附加到具有零值的 Slice"></a>附加到具有零值的 Slice</h5><p>當你將值附加到 <code>nil</code> 的 Slice，它分配一個新的 Slice，並返回新 Slice 的參考。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

	<span class="token comment">// Appending to a nil slice</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"Cat"</span><span class="token punctuation">,</span> <span class="token string">"Dog"</span><span class="token punctuation">,</span> <span class="token string">"Lion"</span><span class="token punctuation">,</span> <span class="token string">"Tiger"</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s = %v, len = %d, cap = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
s &#x3D; [Cat Dog Lion Tiger], len &#x3D; 4, cap &#x3D; 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="將一個-Slice-附加到另一個-Slice"><a href="#將一個-Slice-附加到另一個-Slice" class="headerlink" title="將一個 Slice 附加到另一個 Slice"></a>將一個 Slice 附加到另一個 Slice</h5><p>你可以使用 <code>...</code> 運算子將一個 Slice 直接附加到另一個 Slice。該運算元將 Slice 展開為參數列表。以下的範例示範了其用法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	slice1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Peter"</span><span class="token punctuation">&#125;</span>
	slice2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Bill"</span><span class="token punctuation">,</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Steve"</span><span class="token punctuation">&#125;</span>

	slice3 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span> slice2<span class="token operator">...</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice1 = "</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice2 = "</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"After appending slice1 &amp; slice2 = "</span><span class="token punctuation">,</span> slice3<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
slice1 &#x3D;  [Jack John Peter]
slice2 &#x3D;  [Bill Mark Steve]
After appending slice1 &amp; slice2 &#x3D;  [Jack John Peter Bill Mark Steve]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Slice-中的-Slice"><a href="#Slice-中的-Slice" class="headerlink" title="Slice 中的 Slice"></a>Slice 中的 Slice</h3><p>Slice 可以是任何型別。它們還可以包含其他 Slice。以下範例建立了 Slice 中的 Slice：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"USA"</span><span class="token punctuation">,</span> <span class="token string">"Canada"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"Switzerland"</span><span class="token punctuation">,</span> <span class="token string">"Germany"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Slice s = "</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"length = "</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"capacity = "</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Slice s &#x3D;  [[India China] [USA Canada] [Switzerland Germany]]
length &#x3D;  3
capacity &#x3D;  3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="迭代-Slice"><a href="#迭代-Slice" class="headerlink" title="迭代 Slice"></a>迭代 Slice</h3><p>你可以用與迭代陣列相同的方式迭代 Slice。以下是迭代 Slice 的兩種方法：</p>
<h4 id="1-使用-for-迴圈迭代-Slice"><a href="#1-使用-for-迴圈迭代-Slice" class="headerlink" title="1. 使用 for 迴圈迭代 Slice"></a>1. 使用 <code>for</code> 迴圈迭代 Slice</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	countries <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token string">"America"</span><span class="token punctuation">,</span> <span class="token string">"Russia"</span><span class="token punctuation">,</span> <span class="token string">"England"</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
India
America
Russia
England<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-使用-range-形式的-for-迴圈迭代-Slice"><a href="#2-使用-range-形式的-for-迴圈迭代-Slice" class="headerlink" title="2. 使用 range 形式的 for 迴圈迭代 Slice"></a>2. 使用 <code>range</code> 形式的 <code>for</code> 迴圈迭代 Slice</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	primeNumbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> index<span class="token punctuation">,</span> number <span class="token operator">:=</span> <span class="token keyword">range</span> primeNumbers <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"PrimeNumber(%d) = %d\n"</span><span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
PrimeNumber(1) &#x3D; 2
PrimeNumber(2) &#x3D; 3
PrimeNumber(3) &#x3D; 5
PrimeNumber(4) &#x3D; 7
PrimeNumber(5) &#x3D; 11
PrimeNumber(6) &#x3D; 13
PrimeNumber(7) &#x3D; 17
PrimeNumber(8) &#x3D; 19
PrimeNumber(9) &#x3D; 23
PrimeNumber(10) &#x3D; 29<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="使用空白識別符號從-range-形式的-for-迴圈中忽略-index"><a href="#使用空白識別符號從-range-形式的-for-迴圈中忽略-index" class="headerlink" title="使用空白識別符號從 range 形式的 for 迴圈中忽略 index"></a>使用空白識別符號從 <code>range</code> 形式的 <code>for</code> 迴圈中忽略 <code>index</code></h5><p><code>range</code> 形式的 <code>for</code> 迴圈在每次迭代中為你提供 <code>index</code> 和該索引處的 <code>value</code>。如果你不想使用 <code>index</code>，可以使用底線 <code>_</code> 將其丟棄。</p>
<p>底線（<code>_</code>）稱為空白識別字元。它用於告訴編譯器我們不需要此數值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	numbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">7.4</span><span class="token punctuation">,</span> <span class="token number">9.2</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">&#125;</span>

	sum <span class="token operator">:=</span> <span class="token number">0.0</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> number <span class="token operator">:=</span> <span class="token keyword">range</span> numbers <span class="token punctuation">&#123;</span>
		sum <span class="token operator">+=</span> number
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Total Sum = %.2f\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Total Sum &#x3D; 25.50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本文中，你學到了如何建立 Slice、Slice 內部如何運作，以及如何使用內建函數 <code>copy()</code> 和 <code>append()</code> 來增加 Slice。</p>
<p>在下一篇文章中，我們將學到另一個非常有用的資料結構：map。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang map 介紹</title>
    <url>/2019/11/14/golang-maps-by-example/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-maps">Golang Maps by Example</a></p>
</blockquote>
<p>map 是沒有順序的鍵值對集合。它將鍵對應到值。鍵在 map 是唯一的，而值可能不是。</p>
<p>map 資料結構用於基於鍵的快速尋找、取得和刪除資料。它是電腦科學中最常用的資料結構之一。</p>
<p>Go 提供了內建的 map 型別。在本文中，我們將學到如何使用 Golang 內建的 map 型別。</p>
<span id="more"></span>

<h3 id="宣告-map"><a href="#宣告-map" class="headerlink" title="宣告 map"></a>宣告 map</h3><p>使用以下語法宣告 map：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span>KeyType<span class="token punctuation">]</span>ValueType<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>舉例來說，這是你如何宣告一個 <code>string</code> 鍵對應到 <code>int</code> 值的 map：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>map 的<a href="/2019/11/05/golang-variables-zero-values-type-inference/" title="零值">零值</a>是 <code>nil</code>。<code>nil</code> 的 map 沒有鍵。此外，任何嘗試將鍵加到 <code>nil</code> 的 map 的行為將導致執行時期錯誤。</p>
<p>我們來看一個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>

	<span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"m is nil"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Attempting to add keys to a nil map will result in a runtime error</span>
	<span class="token comment">// m["one hundred"] = 100</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
map[]
m is nil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果你取消陳述式 <code>m[&quot;one hundred&quot;] = 100</code> 的註解，程式將產生以下錯誤：</p>
<pre class="line-numbers language-none"><code class="language-none">panic: assignment to entry in nil map<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>因此，必需在加入項目之前初始化 map。</p>
<h3 id="初始化-map"><a href="#初始化-map" class="headerlink" title="初始化 map"></a>初始化 map</h3><h4 id="1-使用內建的-make-函數初始化-map"><a href="#1-使用內建的-make-函數初始化-map" class="headerlink" title="1. 使用內建的 make() 函數初始化 map"></a>1. 使用內建的 <code>make()</code> 函數初始化 map</h4><p>你可以使用內建的 <code>make()</code> 函數初始化 map。你只需要像下面的範例將 map 型別傳遞給 <code>make()</code> 函數即可。該函數將返回已初始化及可以使用的 map：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Initializing a map using the built-in make() function</span>
<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>讓我們來看一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>

	<span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"m is nil"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"m is not nil"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// make() function returns an initialized and ready to use map.</span>
	<span class="token comment">// Since it is initialized, you can add new keys to it.</span>
	m<span class="token punctuation">[</span><span class="token string">"one hundred"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
map[]
m is not nil
map[one hundred:100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-使用-map-定數初始化-map"><a href="#2-使用-map-定數初始化-map" class="headerlink" title="2. 使用 map 定數初始化 map"></a>2. 使用 map 定數初始化 map</h4><p>map 定數是使用某些資料初始化 map 的一種非常方便的方法。你只需要像這樣在大括號內傳遞以冒號分隔的鍵值對：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
	<span class="token string">"one"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token string">"two"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
	<span class="token string">"three"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意，最後一個逗號是必要的，否則將出現編譯器錯誤。</p>
<p>讓我們來看一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
		<span class="token string">"one"</span><span class="token punctuation">:</span>   <span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token string">"two"</span><span class="token punctuation">:</span>   <span class="token number">2</span><span class="token punctuation">,</span>
		<span class="token string">"three"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
		<span class="token string">"four"</span><span class="token punctuation">:</span>  <span class="token number">4</span><span class="token punctuation">,</span>
		<span class="token string">"five"</span><span class="token punctuation">:</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// Comma is necessary</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
map[one:1 two:2 three:3 four:4 five:5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你也可以透過將大括號留空，使用 map 定數來建立一個空 map：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Initialize an empty map</span>
<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的陳述式在功能上與使用 <code>make()</code> 函數相同。</p>
<h3 id="加入項目（鍵值對）到-map"><a href="#加入項目（鍵值對）到-map" class="headerlink" title="加入項目（鍵值對）到 map"></a>加入項目（鍵值對）到 map</h3><p>你可以使用以下語法將新項目加入到已初始化的 map：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以下的範例使用 <code>make()</code> 函數初始化 map，並對它加入一些新項目：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Initializing a map</span>
	<span class="token keyword">var</span> tinderMatch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>

	<span class="token comment">// Adding keys to a map</span>
	tinderMatch<span class="token punctuation">[</span><span class="token string">"Rajeev"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Angelina"</span> <span class="token comment">// Assigns the value "Angelina" to the key "Rajeev"</span>
	tinderMatch<span class="token punctuation">[</span><span class="token string">"James"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sophia"</span>
	tinderMatch<span class="token punctuation">[</span><span class="token string">"David"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Emma"</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>tinderMatch<span class="token punctuation">)</span>

	<span class="token comment">/*
	  Adding a key that already exists will simply override
	  the existing key with the new value
	*/</span>
	tinderMatch<span class="token punctuation">[</span><span class="token string">"Rajeev"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Jennifer"</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>tinderMatch<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
map[Rajeev:Angelina James:Sophia David:Emma]
map[Rajeev:Jennifer James:Sophia David:Emma]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果你嘗試加入一個已經存在於 map 中的鍵，那麼它將被新的值覆蓋。</p>
<h3 id="取得-map-中特定鍵所關聯的值"><a href="#取得-map-中特定鍵所關聯的值" class="headerlink" title="取得 map 中特定鍵所關聯的值"></a>取得 map 中特定鍵所關聯的值</h3><p>你可以使用語法 <code>m[key]</code> 來取得分派給 map 中的鍵的值。如果鍵已經存在於 map，則將取得分派的值。否則，你將取得 map 的值型別的零值。</p>
<p>讓我們看個範例來了解這一點：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> personMobileNo <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
		<span class="token string">"John"</span><span class="token punctuation">:</span>  <span class="token string">"+33-8273658526"</span><span class="token punctuation">,</span>
		<span class="token string">"Steve"</span><span class="token punctuation">:</span> <span class="token string">"+1-8579822345"</span><span class="token punctuation">,</span>
		<span class="token string">"David"</span><span class="token punctuation">:</span> <span class="token string">"+44-9462834443"</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">var</span> mobileNo <span class="token operator">=</span> personMobileNo<span class="token punctuation">[</span><span class="token string">"Steve"</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Steve's Mobile No : "</span><span class="token punctuation">,</span> mobileNo<span class="token punctuation">)</span>

	<span class="token comment">// If a key doesn't exist in the map, we get the zero value of the value type</span>
	mobileNo <span class="token operator">=</span> personMobileNo<span class="token punctuation">[</span><span class="token string">"Jack"</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Jack's Mobile No : "</span><span class="token punctuation">,</span> mobileNo<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Steve&#39;s Mobile No :  +1-8579822345
Jack&#39;s Mobile No :<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在上面的範例中，由於鍵 <code>&quot;Jack&quot;</code> 不存在於 map 中，我們得到 map 的值型別的零值。由於 map 的值型別是 <code>string</code>，因此我們得到 <code>&quot;&quot;</code>。</p>
<p><em>與其他語言不同，如果鍵不存在於 map 中，不會在 Golang 中出現執行時期錯誤。</em></p>
<p><strong>但是，如果你要檢查 key 是否存在怎麼辦？</strong> 在上面的範例中，即使鍵 <code>&quot;Jack&quot;</code> 具有值為 <code>&quot;&quot;</code>，map 也將返回 <code>&quot;&quot;</code>。那麼，如何區別鍵的值與型別的零值相同和鍵不存在的情況？</p>
<p>嗯，讓我們來找出答案吧。</p>
<h4 id="檢查鍵是否存在於-map"><a href="#檢查鍵是否存在於-map" class="headerlink" title="檢查鍵是否存在於 map"></a>檢查鍵是否存在於 map</h4><p>當你使用語法 <code>map[key]</code> 取得分派給特定鍵的值時，它也會返回一個額外的布林值，如果鍵存在於 map 中，則返回 <code>true</code>，否則返回 <code>false</code>。</p>
<p>因此，你可以使用以下雙值分派來檢查鍵是否存在於 map 中：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果鍵存在，則布林變數 <code>ok</code> 將為 <code>true</code>，否則為 <code>false</code>。</p>
<p>細想以下 map 範例。它將 employeeIds 對應到名稱：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> employees <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
	<span class="token number">1001</span><span class="token punctuation">:</span> <span class="token string">"Rajeev"</span><span class="token punctuation">,</span>
	<span class="token number">1002</span><span class="token punctuation">:</span> <span class="token string">"Sachin"</span><span class="token punctuation">,</span>
	<span class="token number">1003</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由於鍵 <code>1001</code> 存在於 map 中，因此存取鍵 <code>1001</code> 會返回 <code>&quot;Rajeev&quot;</code> 和 <code>true</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">name<span class="token punctuation">,</span> ok <span class="token operator">:=</span> employees<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token comment">// "Rajeev", true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但是，如果你嘗試存取不存在的鍵，map 會返回一個空字串 <code>&quot;&quot;</code>（字串的零值）和 <code>false</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">name<span class="token punctuation">,</span> ok <span class="token operator">:=</span> employees<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span> <span class="token comment">// "", false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你只是想檢查某個鍵是否存在而無需取得與該鍵關聯的值，那麼你可以使用 <code>_</code>（底線）代替第一個值：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> employees<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>現在，讓我們看一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> employees <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
		<span class="token number">1001</span><span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>
		<span class="token number">1002</span><span class="token punctuation">:</span> <span class="token string">"Steve"</span><span class="token punctuation">,</span>
		<span class="token number">1003</span><span class="token punctuation">:</span> <span class="token string">"Maria"</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printEmployee</span><span class="token punctuation">(</span>employees<span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span>
	<span class="token function">printEmployee</span><span class="token punctuation">(</span>employees<span class="token punctuation">,</span> <span class="token number">1010</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token function">isEmployeeExists</span><span class="token punctuation">(</span>employees<span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"EmployeeId 1002 found"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">printEmployee</span><span class="token punctuation">(</span>employees <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> employeeId <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> name<span class="token punctuation">,</span> ok <span class="token operator">:=</span> employees<span class="token punctuation">[</span>employeeId<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name = %s, ok = %v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"EmployeeId %d not found\n"</span><span class="token punctuation">,</span> employeeId<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">isEmployeeExists</span><span class="token punctuation">(</span>employees <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> employeeId <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> employees<span class="token punctuation">[</span>employeeId<span class="token punctuation">]</span>
	<span class="token keyword">return</span> ok
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
name &#x3D; Rajeev, ok &#x3D; true
EmployeeId 1010 not found
EmployeeId 1002 found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上面的範例中，我在 <code>if</code> 陳述式中使用了<a href="/2019/11/11/golang-control-flow-statements/" title="簡短宣告">簡短宣告</a>來初始化 <code>name</code> 和 <code>ok</code> 值，然後測試布林值 <code>ok</code>。它使程式碼更加簡潔。</p>
<h3 id="從-map-中刪除鍵"><a href="#從-map-中刪除鍵" class="headerlink" title="從 map 中刪除鍵"></a>從 map 中刪除鍵</h3><p>你可以使用內建的 <code>delete()</code> 函數從 map 中刪除鍵。語法如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Delete the `key` from the `map`</span>
<span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>delete()</code> 函數不會返回任何值。另外，如果該鍵不存在於 map，它也不會執行任何操作。</p>
<p>這是一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> fileExtensions <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
		<span class="token string">"Python"</span><span class="token punctuation">:</span> <span class="token string">".py"</span><span class="token punctuation">,</span>
		<span class="token string">"C++"</span><span class="token punctuation">:</span>    <span class="token string">".cpp"</span><span class="token punctuation">,</span>
		<span class="token string">"Java"</span><span class="token punctuation">:</span>   <span class="token string">".java"</span><span class="token punctuation">,</span>
		<span class="token string">"Golang"</span><span class="token punctuation">:</span> <span class="token string">".go"</span><span class="token punctuation">,</span>
		<span class="token string">"Kotlin"</span><span class="token punctuation">:</span> <span class="token string">".kt"</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fileExtensions<span class="token punctuation">)</span>

	<span class="token function">delete</span><span class="token punctuation">(</span>fileExtensions<span class="token punctuation">,</span> <span class="token string">"Kotlin"</span><span class="token punctuation">)</span>

	<span class="token comment">// delete function doesn't do anything if the key doesn't exist</span>
	<span class="token function">delete</span><span class="token punctuation">(</span>fileExtensions<span class="token punctuation">,</span> <span class="token string">"Javascript"</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fileExtensions<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
map[Python:.py C++:.cpp Java:.java Golang:.go Kotlin:.kt]
map[Python:.py C++:.cpp Java:.java Golang:.go]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="map-是參考型別"><a href="#map-是參考型別" class="headerlink" title="map 是參考型別"></a>map 是參考型別</h3><p>map 是參考型別。當你將 map 分派給新變數時，它們都參考相同的底層資料結構。因此，一個變數完成的更改另一個變數將會看到。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> m1 <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
		<span class="token string">"one"</span><span class="token punctuation">:</span>   <span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token string">"two"</span><span class="token punctuation">:</span>   <span class="token number">2</span><span class="token punctuation">,</span>
		<span class="token string">"three"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
		<span class="token string">"four"</span><span class="token punctuation">:</span>  <span class="token number">4</span><span class="token punctuation">,</span>
		<span class="token string">"five"</span><span class="token punctuation">:</span>  <span class="token number">5</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">var</span> m2 <span class="token operator">=</span> m1
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"m1 = "</span><span class="token punctuation">,</span> m1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"m2 = "</span><span class="token punctuation">,</span> m2<span class="token punctuation">)</span>

	m2<span class="token punctuation">[</span><span class="token string">"ten"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nm1 = "</span><span class="token punctuation">,</span> m1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"m2 = "</span><span class="token punctuation">,</span> m2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
m1 &#x3D;  map[one:1 two:2 three:3 four:4 five:5]
m2 &#x3D;  map[one:1 two:2 three:3 four:4 five:5]

m1 &#x3D;  map[one:1 two:2 three:3 four:4 five:5 ten:10]
m2 &#x3D;  map[one:1 two:2 three:3 four:4 five:5 ten:10]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將 map 傳遞給函數時，會套用相同概念。函數內部對 map 所做的任何更改，呼叫者也看得到。</p>
<h3 id="迭代-map"><a href="#迭代-map" class="headerlink" title="迭代 map"></a>迭代 map</h3><p>你可以使用 <code>range</code> 格式的 for 迴圈迭代 map。它在每次迭代中會給你 <code>key, value</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> personAge <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
		<span class="token string">"Rajeev"</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
		<span class="token string">"James"</span><span class="token punctuation">:</span>  <span class="token number">32</span><span class="token punctuation">,</span>
		<span class="token string">"Sarah"</span><span class="token punctuation">:</span>  <span class="token number">29</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> name<span class="token punctuation">,</span> age <span class="token operator">:=</span> <span class="token keyword">range</span> personAge <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
James 32
Sarah 29
Rajeev 25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意，map 是沒有順序的集合，因此每次迭代時，不能保證 map 的迭代順序都相同。</p>
<p>因此，如果多次執行上面的程式，你將得到不同順序的結果。</p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本文中，你學到了如何宣告和初始化 map、如何將鍵加到 map、如何取得 map 中特定鍵所關聯的值、如何檢查鍵是否存在於 map 中、如何從 map 中刪除鍵，以及如何迭代 map。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang struct 教學與範例</title>
    <url>/2019/11/15/golang-structs-tutorial-with-examples/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-structs">Golang Structs Tutorial with Examples</a></p>
</blockquote>
<p><code>struct</code> 是使用者定義的型別，包含已命名欄位/屬性的集合。它用於將相關資料分組在一起形成一個單位。任何具有一組屬性的現實世界實體都可以使用結構表示。</p>
<p>如果你有物件導向的背景知識，你可以將 <code>struct</code> 視為支援複合但不支援繼承的輕量級類別。</p>
<h3 id="定義-struct-型別"><a href="#定義-struct-型別" class="headerlink" title="定義 struct 型別"></a>定義 struct 型別</h3><p>你可以像這樣定義新的 <code>struct</code> 型別：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	FirstName <span class="token builtin">string</span>
	LastName  <span class="token builtin">string</span>
	Age       <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p><code>type</code> 關鍵字引進了新型別。其後是型別（<code>Person</code>）的名稱和關鍵字 <code>struct</code>，表示我們正在定義一個 <code>struct</code>。struct 包含了一個在大括號內的<code>欄位</code>列表。每個欄位都有名稱和型別。</p>
<p>注意，你可以像這樣折疊相同型別的欄位：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	FirstName<span class="token punctuation">,</span> LastName <span class="token builtin">string</span>
	Age       <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="宣告和初始化-struct"><a href="#宣告和初始化-struct" class="headerlink" title="宣告和初始化 struct"></a>宣告和初始化 struct</h3><h4 id="宣告-struct-型別的變數"><a href="#宣告-struct-型別的變數" class="headerlink" title="宣告 struct 型別的變數"></a>宣告 struct 型別的變數</h4><p>如同其他資料型別一樣，你可以像這樣宣告 <code>struct</code> 型別的變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Declares a variable of type 'Person'</span>
<span class="token keyword">var</span> p Person <span class="token comment">// All the struct fields are initialized with their zero value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的程式碼建立了一個類型為 <code>Person</code> 的變數，預設情況下將其設為零。對於 struct，零表示所有欄位均設定為其對應的<a href="/2019/11/05/golang-variables-zero-values-type-inference/" title="零值">零值</a>。因此，欄位 <code>FirstName</code> 和 <code>LastName</code> 設定為 <code>&quot;&quot;</code>，且 <code>Age</code> 設定為 <code>0</code>。</p>
<h4 id="初始化-struct"><a href="#初始化-struct" class="headerlink" title="初始化 struct"></a>初始化 struct</h4><p>你可以使用 struct 定數來初始化一個 <code>struct</code> 型別的變數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Initialize a struct by supplying the value of all the struct fields.</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"Rajeev"</span><span class="token punctuation">,</span> <span class="token string">"Singh"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意，你需要按照在 <code>struct</code> 中宣告他們的順序來傳遞欄位值。另外，你不能使用以下語法僅初始化一部分欄位：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"Rajeev"</span><span class="token punctuation">&#125;</span> <span class="token comment">// Compiler Error: too few values in struct initializer</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="初始化-struct-時命名欄位"><a href="#初始化-struct-時命名欄位" class="headerlink" title="初始化 struct 時命名欄位"></a>初始化 struct 時命名欄位</h4><p>Go 也支援用來初始化 struct 的 <code>name: value</code> 語法（使用此語法時，欄位順序無關緊要）。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">=</span> Person<span class="token punctuation">&#123;</span>FirstName<span class="token punctuation">:</span> <span class="token string">"Rajeev"</span><span class="token punctuation">,</span> LastName<span class="token punctuation">:</span> <span class="token string">"Singh"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你可以用換行符號分隔多個欄位，以提高可讀性（在這種情況下，必須使用逗號結尾）：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">=</span> Person<span class="token punctuation">&#123;</span>
	FirstName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>
	LastName<span class="token punctuation">:</span>  <span class="token string">"Snow"</span><span class="token punctuation">,</span>
	Age<span class="token punctuation">:</span>       <span class="token number">45</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>name: value</code> 語法允許你允許你僅初始化一部分欄位。所有未初始化的欄位均設定為其對應的零值：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">=</span> Person<span class="token punctuation">&#123;</span>FirstName<span class="token punctuation">:</span> <span class="token string">"Alien"</span><span class="token punctuation">&#125;</span> <span class="token comment">// LastName: "", Age: 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">=</span> Person<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// FirstName: "", LastName: "", Age: 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="完整範例：定義和初始化-struct-型別"><a href="#完整範例：定義和初始化-struct-型別" class="headerlink" title="完整範例：定義和初始化 struct 型別"></a>完整範例：定義和初始化 struct 型別</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// Defining a struct type</span>
<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	FirstName <span class="token builtin">string</span>
	LastName  <span class="token builtin">string</span>
	Age       <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Declaring a variable of a `struct` type</span>
	<span class="token keyword">var</span> p Person <span class="token comment">// // All the struct fields are initialized with their zero value</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>

	<span class="token comment">// Declaring and initializing a struct using a struct literal</span>
	p1 <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"Rajeev"</span><span class="token punctuation">,</span> <span class="token string">"Singh"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Person1: "</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>

	<span class="token comment">// Naming fields while initializing a struct</span>
	p2 <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>
		FirstName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>
		LastName<span class="token punctuation">:</span>  <span class="token string">"Snow"</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>       <span class="token number">45</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Person2: "</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>

	<span class="token comment">// Uninitialized fields are set to their corresponding zero-value</span>
	p3 <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>FirstName<span class="token punctuation">:</span> <span class="token string">"Robert"</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Person3: "</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
&#123;  0&#125;
Person1:  &#123;Rajeev Singh 26&#125;
Person2:  &#123;John Snow 45&#125;
Person3:  &#123;Robert  0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="存取-struct-的欄位"><a href="#存取-struct-的欄位" class="headerlink" title="存取 struct 的欄位"></a>存取 struct 的欄位</h3><p>你可以使用點（<code>.</code>） 運算元來存取 <code>struct</code> 的各個欄位：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Car <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name<span class="token punctuation">,</span> Model<span class="token punctuation">,</span> Color <span class="token builtin">string</span>
	WeightInKg         <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> Car<span class="token punctuation">&#123;</span>
		Name<span class="token punctuation">:</span>       <span class="token string">"Ferrari"</span><span class="token punctuation">,</span>
		Model<span class="token punctuation">:</span>      <span class="token string">"GTC4"</span><span class="token punctuation">,</span>
		Color<span class="token punctuation">:</span>      <span class="token string">"Red"</span><span class="token punctuation">,</span>
		WeightInKg<span class="token punctuation">:</span> <span class="token number">1920</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Accessing struct fields using the dot operator</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Car Name: "</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Car Color: "</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Color<span class="token punctuation">)</span>

	<span class="token comment">// Assigning a new value to a struct field</span>
	c<span class="token punctuation">.</span>Color <span class="token operator">=</span> <span class="token string">"Black"</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Car: "</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Car Name:  Ferrari
Car Color:  Red
Car:  &#123;Ferrari GTC4 Black 1920&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="指向-struct-的指標"><a href="#指向-struct-的指標" class="headerlink" title="指向 struct 的指標"></a>指向 struct 的指標</h3><p>你可以使用 <code>&amp;</code> 運算元取得指向 <code>struct</code> 的<a href="/2019/11/15/playing-with-pointers-in-golang/" title="指標">指標</a>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	RollNumber <span class="token builtin">int</span>
	Name       <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// instance of student struct type</span>
	s <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">&#125;</span>

	<span class="token comment">// Pointer to the student struct</span>
	ps <span class="token operator">:=</span> <span class="token operator">&amp;</span>s
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span>

	<span class="token comment">// Accessing struct fields via pointer</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token comment">// Same as above: No need to explicitly dereference the pointer</span>

	ps<span class="token punctuation">.</span>RollNumber <span class="token operator">=</span> <span class="token number">31</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
&amp;&#123;11 Jack&#125;
Jack
Jack
&amp;&#123;31 Jack&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em>如以上範例所示，Go 允許你透過指標直接存取 <code>struct</code> 的欄位，而不用明確的解參考。</em></p>
<h4 id="使用內建的-new-函數建立一個-struct-並取得指向它的指標"><a href="#使用內建的-new-函數建立一個-struct-並取得指向它的指標" class="headerlink" title="使用內建的 new() 函數建立一個 struct 並取得指向它的指標"></a>使用內建的 <code>new()</code> 函數建立一個 struct 並取得指向它的指標</h4><p>你也可以使用內建的 <code>new()</code> 函數來建立 <code>struct</code> 的實體。<code>new()</code> 函數分配足夠的記憶體來符合所有的 <code>struct</code> 欄位，將他們各自設為零值，並返回指向新分配的 <code>struct</code> 的指標：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Id   <span class="token builtin">int</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// You can also get a pointer to a struct using the built-in new() function</span>
	<span class="token comment">// It allocates enough memory to fit a value of the given struct type, and returns a pointer to it</span>
	pEmp <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span>

	pEmp<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token number">1000</span>
	pEmp<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Sachin"</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pEmp<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
&amp;&#123;1000 Sachin&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="匯出與未匯出的-struct-和-struct-欄位"><a href="#匯出與未匯出的-struct-和-struct-欄位" class="headerlink" title="匯出與未匯出的 struct 和 struct 欄位"></a>匯出與未匯出的 struct 和 struct 欄位</h3><p>任何以大寫字母開頭的 <code>struct</code> 型別都會被匯出，並且可以從外部的 package 中存取。同樣的，任何以大寫字母開頭的 <code>struct</code> 欄位都會被匯出。</p>
<p>相反的，所有以小寫字母開頭的名稱僅在同一 package 中可見。</p>
<p>讓我們來看個範例。細想以下 Go 程式的 package 階層：</p>
<pre class="line-numbers language-none"><code class="language-none">$GOPATH&#x2F;src
    example
      main
        main.go
      model
        address.go
        customer.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>customer.go</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> model

<span class="token keyword">type</span> Customer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// exported struct type</span>
	Id <span class="token builtin">int</span>				<span class="token comment">// exported field</span>
	Name <span class="token builtin">string</span>			<span class="token comment">// exported field</span>
	addr address        <span class="token comment">// unexported field (only accessible inside package `model`)</span>
	married <span class="token builtin">bool</span>  		<span class="token comment">// unexported field (only accessible inside package `model`)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>address.go</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> model

<span class="token comment">// Unexported struct (only accessible inside package `model`)</span>
<span class="token keyword">type</span> address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	houseNo<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> country <span class="token builtin">string</span>
	zipCode                               <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後，這是主要程式 <strong>main.go</strong>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"example/model"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> model<span class="token punctuation">.</span>Customer<span class="token punctuation">&#123;</span>
		Id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
		Name<span class="token punctuation">:</span> <span class="token string">"Rajeev Singh"</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	c<span class="token punctuation">.</span>married <span class="token operator">=</span> <span class="token boolean">true</span>	<span class="token comment">// Error: can not refer to unexported field or method</span>

	a <span class="token operator">:=</span> model<span class="token punctuation">.</span>address<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// Error: can not refer to unexported name</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Programmer = "</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如你所見，名稱 <code>address</code> 和 <code>married</code> 是未匯出的，無法從 <code>main</code> package 中存取。</p>
<h3 id="struct-是值型別"><a href="#struct-是值型別" class="headerlink" title="struct 是值型別"></a>struct 是值型別</h3><p>struct 是值型別。當你將一個 <code>struct</code> 變數分派給另一個變數時，會建立並分派一個新的 <code>struct</code> 副本。同樣的，當你將 <code>struct</code> 傳遞給另一個函數時，該函數將取得自己的 <code>struct</code> 副本。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X <span class="token builtin">float64</span>
	Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Structs are value types.</span>
	p1 <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>
	p2 <span class="token operator">:=</span> p1 <span class="token comment">// A copy of the struct `p1` is assigned to `p2`</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p1 = "</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p2 = "</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>

	p2<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">15</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nAfter modifying p2:"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p1 = "</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p2 = "</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
p1 &#x3D;  &#123;10 20&#125;
p2 &#x3D;  &#123;10 20&#125;

After modifying p2:
p1 &#x3D;  &#123;10 20&#125;
p2 &#x3D;  &#123;15 20&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="struct-等式"><a href="#struct-等式" class="headerlink" title="struct 等式"></a>struct 等式</h3><p>如果兩個 <code>struct</code> 變數的所有對應欄位都相等，則他們相等：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X <span class="token builtin">float64</span>
	Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Two structs are equal if all their corresponding fields are equal.</span>
	p1 <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">&#125;</span>
	p2 <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> p1 <span class="token operator">==</span> p2 <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Point p1 and p2 are equal."</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Point p1 and p2 are not equal."</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Point p1 and p2 are equal.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本文中，你學到了 struct 的基礎。但是還有很多值得探索的地方，如結構的方法、結構的組成、嵌入欄位、提升欄位等。我將在以後的文章中介紹這些主題。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Golang 與指標共舞</title>
    <url>/2019/11/15/playing-with-pointers-in-golang/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-pointers">Playing with Pointers in Golang</a></p>
</blockquote>
<p>指標是一個變數，用來儲存另一個變數的記憶體位址。疑惑嗎？讓我來解釋一下。</p>
<p>首先讓我們來了解什麼是變數。當我們在撰寫任何程式時，我們需要在記憶體中儲存一些資料。資料儲存在記憶體中的特定位址。記憶體位址看起來會像 <code>0xAFFFF</code>（這是以十六進制來表示記憶體位址）。</p>
<span id="more"></span>

<p>現在，要存取資料的話，我們需要知道資料的儲存位址。我們可以追蹤所有與我們的程式相關的儲存資料的記憶體位址。但是，想像一下要記住所有記憶體位址並使用它們存取資料有多麼困難。</p>
<p>這就是為什麼我們有變數的概念。變數只是為儲存資料的記憶體位置所取的一個方便的名稱。</p>
<p>指標也是一個變數。但它是一種特殊的變數，因為它儲存的資料不是一般的數值，如簡單的整數或字串，它是另一個變數的記憶體位址。</p>
<img src="/2019/11/15/playing-with-pointers-in-golang/golang-pointers-illustration.jpg" class="">

<p>在上面的例子中，指標 <code>p</code> 含有數值 <code>0x0001</code>，它是變數 <code>a</code> 的位址。</p>
<h3 id="宣告指標"><a href="#宣告指標" class="headerlink" title="宣告指標"></a>宣告指標</h3><p>使用以下語法宣告一個型別為 T 的指標：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// A pointer of type T</span>
<span class="token keyword">var</span> p <span class="token operator">*</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>型別 <code>T</code> 是指標指向的變數的型別。舉例來說，以下是型別為 <code>int</code> 的指標：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// A pointer of type int</span>
<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的指標只能儲存 <code>int</code> 變數的記憶體位址。</p>
<p>指標的<a href="/2019/11/05/golang-variables-zero-values-type-inference/" title="零值">零值</a>為 <code>nil</code>。也就是說，任何未初始化的指標都會是 <code>nil</code>。讓我們來看一個完整範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
p &#x3D;  &lt;nil&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="初始化指標"><a href="#初始化指標" class="headerlink" title="初始化指標"></a>初始化指標</h3><p>你可以使用另一個變數的記憶體位址來初始化指標。可以使用 <code>&amp;</code> 運算子取得變數的位址：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意我們如何使用 <code>&amp;</code> 運算子與變數 <code>x</code> 來取得它的位址，然後將位址指派給指標 <code>p</code>。</p>
<p>與 Golang 中的其他變數一樣，編譯器也可以推斷出指標變數的型別。因此，你可以省略上面範例中指標 <code>p</code> 的型別宣告，並像這樣撰寫它：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>讓我們看一個完整範例來更清楚的了解：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5.67</span>
	<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value stored in variable a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Address of variable a = "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value stored in variable p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Value stored in variable a &#x3D;  5.67
Address of variable a &#x3D;  0xc4200120a8
Value stored in variable p &#x3D;  0xc4200120a8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="解參考指標"><a href="#解參考指標" class="headerlink" title="解參考指標"></a>解參考指標</h3><p>你可以對指標使用 <code>*</code> 運算子來存取儲存在指標所指向的變數中的值。這稱為_解參考_或_間接取值_：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>
	<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"*p = "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
a &#x3D;  100
p &#x3D;  0xc4200120a8
*p &#x3D;  100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>你不僅可以使用 <code>*</code> 運算子來存取所指向變數的值，還可以對其進行修改。以下範例透過指標 <code>p</code> 來設定儲存在變數 <code>a</code> 中的值：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1000</span>
	<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a (before) = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>

	<span class="token comment">// Changing the value stored in the pointed variable through the pointer</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2000</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a (after) = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
a (before) &#x3D;  1000
a (after) &#x3D;  2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="使用內建的-new-函數建立指標"><a href="#使用內建的-new-函數建立指標" class="headerlink" title="使用內建的 new() 函數建立指標"></a>使用內建的 new() 函數建立指標</h3><p>你也可以使用內建的 <code>new()</code> 函數建立指標。<code>new()</code> 函數將型別當作參數，分配足夠的記憶體來容納該型別的值，然後回傳指向該型別的指標。</p>
<p>這有一個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ptr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// Pointer to an `int` type</span>
	<span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">100</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Ptr = %#x, Ptr value = %d\n"</span><span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Ptr &#x3D; 0xc420014058, Ptr value &#x3D; 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="指標的指標"><a href="#指標的指標" class="headerlink" title="指標的指標"></a>指標的指標</h3><p>指標可以指向任何型別的變數。它也可以指向另一個指標。下面的範例展示了如何建立指向另一個指標的指標：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">7.98</span>
	<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a
	<span class="token keyword">var</span> pp <span class="token operator">=</span> <span class="token operator">&amp;</span>p

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address of a = "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address of p = "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"pp = "</span><span class="token punctuation">,</span> pp<span class="token punctuation">)</span>

	<span class="token comment">// Dereferencing a pointer to pointer</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"*pp = "</span><span class="token punctuation">,</span> <span class="token operator">*</span>pp<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"**pp = "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
a &#x3D;  7.98
address of a &#x3D;  0xc4200120a8
p &#x3D;  0xc4200120a8
address of p &#x3D;  0xc42000c028
pp &#x3D;  0xc42000c028
*pp &#x3D;  0xc4200120a8
**pp &#x3D;  7.98<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Go-沒有指標運算"><a href="#Go-沒有指標運算" class="headerlink" title="Go 沒有指標運算"></a>Go 沒有指標運算</h3><p>如果你使用過 C/C++，那麼你必須知道這些語言支援指標運算。<br>舉例來說，你可以遞增/遞減指標來移動到下一個/上一個記憶體位址。<br>你可以對指標增加或減去一個整數值，你也可以使用關係運算子 <code>==</code>、<code>&lt;</code>、<code>&gt;</code> 等比較兩個指標。</p>
<p>但是 Go 不支援對指標進行此類算術運算。任何此類運算都會導致編譯時期錯誤：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">67</span>
	<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>x

	<span class="token keyword">var</span> p1 <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// Compiler Error: invalid operation</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是，你可以使用 <code>==</code> 運算子比較兩個相同型別的指標是否相等。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">75</span>
	<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a
	<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a

	<span class="token keyword">if</span> p1 <span class="token operator">==</span> p2 <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Both pointers p1 and p2 point to the same variable."</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>我希望你了解什麼是指標、如何宣告和初始化指標，以及如何解參考指標。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 介面教學與範例</title>
    <url>/2019/11/19/golang-interfaces-tutorial-with-examples/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-interfaces">Golang Interfaces Tutorial with Examples</a></p>
</blockquote>
<h3 id="Go-的介面"><a href="#Go-的介面" class="headerlink" title="Go 的介面"></a>Go 的介面</h3><p>Go 中的介面是使用一組方法簽名定義的<strong>型別</strong>。介面定義了類似物件型別的行為。</p>
<p>舉例來說，這是一個定義幾何形狀行為的介面：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Go Interface - `Shape`</span>
<span class="token keyword">type</span> Shape <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
	<span class="token function">Perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 <strong>type</strong> 關鍵字定義介面，後面接著介面名稱和關鍵字 <code>interface</code>。然後，在大括號內指定一組方法簽名。</p>
<span id="more"></span>

<h3 id="在-Go-中實作介面"><a href="#在-Go-中實作介面" class="headerlink" title="在 Go 中實作介面"></a>在 Go 中實作介面</h3><p>要實作介面，你只需要實作介面中宣告的所有方法。</p>
<p><strong>Go 的介面是隱含實作的</strong></p>
<p>與 Java 等其他語言不同，你不需要使用如 <code>implements</code> 關鍵字之類的方法來明確指定一種型別來實作介面。</p>
<p>以下是兩種實作 <code>Shape</code> 介面的 struct 型別：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Struct type `Rectangle` - implements the `Shape` interface by implementing all its methods.</span>
<span class="token keyword">type</span> Rectangle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Length<span class="token punctuation">,</span> Width <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r Rectangle<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> r<span class="token punctuation">.</span>Length <span class="token operator">*</span> r<span class="token punctuation">.</span>Width
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r Rectangle<span class="token punctuation">)</span> <span class="token function">Perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>Length <span class="token operator">+</span> r<span class="token punctuation">.</span>Width<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Struct type `Circle` - implements the `Shape` interface by implementing all its methods.</span>
<span class="token keyword">type</span> Circle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Radius <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c Circle<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> c<span class="token punctuation">.</span>Radius <span class="token operator">*</span> c<span class="token punctuation">.</span>Radius
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c Circle<span class="token punctuation">)</span> <span class="token function">Perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> c<span class="token punctuation">.</span>Radius
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c Circle<span class="token punctuation">)</span> <span class="token function">Diameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> c<span class="token punctuation">.</span>Radius
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用具有明確數值的介面型別"><a href="#使用具有明確數值的介面型別" class="headerlink" title="使用具有明確數值的介面型別"></a>使用具有明確數值的介面型別</h3><p>除非我們將其與實作所有方法的具體型別一起使用，否則介面本身並不是那麼有用。</p>
<p>讓我們來看看如何將介面與明確數值一起使用。</p>
<ul>
<li><p><strong>介面型別可以包含實作其所有方法的任何值</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> s Shape <span class="token operator">=</span> Circle<span class="token punctuation">&#123;</span><span class="token number">5.0</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Shape Type = %T, Shape Value = %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area = %f, Perimeter = %f\n\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">Perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> s1 Shape <span class="token operator">=</span> Rectangle<span class="token punctuation">&#123;</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Shape Type = %T, Shape Value = %v\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area = %f, Perimeter = %f\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">Perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Shape Type &#x3D; main.Circle, Shape Value &#x3D; &#123;5&#125;
Area &#x3D; 78.539816, Perimeter &#x3D; 31.415927

Shape Type &#x3D; main.Rectangle, Shape Value &#x3D; &#123;4 6&#125;
Area &#x3D; 24.000000, Perimeter &#x3D; 20.000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>使用介面型別作為函數的參數</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// Generic function to calculate the total area of multiple shapes of different types</span>
<span class="token keyword">func</span> <span class="token function">CalculateTotalArea</span><span class="token punctuation">(</span>shapes <span class="token operator">...</span>Shape<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	totalArea <span class="token operator">:=</span> <span class="token number">0.0</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> shapes <span class="token punctuation">&#123;</span>
		totalArea <span class="token operator">+=</span> s<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> totalArea
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	totalArea <span class="token operator">:=</span> <span class="token function">CalculateTotalArea</span><span class="token punctuation">(</span>Circle<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Rectangle<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Circle<span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Total area = "</span><span class="token punctuation">,</span> totalArea<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Total area &#x3D;  346.7256359733385<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p><strong>將介面型別用於欄位</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// Interface types can also be used as fields</span>
<span class="token keyword">type</span> MyDrawing <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	shapes  <span class="token punctuation">[</span><span class="token punctuation">]</span>Shape
	bgColor <span class="token builtin">string</span>
	fgColor <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>drawing MyDrawing<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	totalArea <span class="token operator">:=</span> <span class="token number">0.0</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> drawing<span class="token punctuation">.</span>shapes <span class="token punctuation">&#123;</span>
		totalArea <span class="token operator">+=</span> s<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> totalArea
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	drawing <span class="token operator">:=</span> MyDrawing<span class="token punctuation">&#123;</span>
		shapes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Shape<span class="token punctuation">&#123;</span>
			Circle<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			Rectangle<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			Rectangle<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		bgColor<span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>
		fgColor<span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Drawing"</span><span class="token punctuation">,</span> drawing<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Drawing Area = "</span><span class="token punctuation">,</span> drawing<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Drawing &#123;[&#123;2&#125; &#123;3 5&#125; &#123;4 7&#125;] red white&#125;
Drawing Area &#x3D; 55.56637061435917<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="介面數值：介面型別如何與明確數值一起使用？"><a href="#介面數值：介面型別如何與明確數值一起使用？" class="headerlink" title="介面數值：介面型別如何與明確數值一起使用？"></a>介面數值：介面型別如何與明確數值一起使用？</h3><p>在底層，介面值可以認為是一個由值和具體型別組成的元組：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// interface</span>
<span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>讓我們來看一個範例了解更多資訊：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> s Shape

	s <span class="token operator">=</span> Circle<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"(%v, %T)\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Shape area = %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	s <span class="token operator">=</span> Rectangle<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"(%v, %T)\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Shape area = %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
(&#123;5&#125;, main.Circle)
Shape area &#x3D; 78.53981633974483
(&#123;4 7&#125;, main.Rectangle)
Shape area &#x3D; 28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看以上程式的輸出，並注意變數 <code>s</code> 如何取得有關數值以及分配給它的 <code>Shape</code> 的型別的資訊。</p>
<p><em>當我們在介面上呼叫方法時，將執行其底層型別上同名的方法。</em></p>
<p>來說，在上面的程式中，當我們在變數 <code>s</code> 上呼叫 <code>Area()</code> 方法時，它將執行其底層型別 <code>Area()</code> 方法。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 方法教學與範例</title>
    <url>/2019/11/19/golang-methods-tutorial-with-examples/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-methods-tutorial">Golang Methods Tutorial with Examples</a></p>
</blockquote>
<p>技術上來說，Go 不是物件導向程式語言。它沒有類別、物件和繼承。</p>
<p>但是，Go 有型別。並且，你可以在型別上定義<strong>方法</strong>。這讓 Go 有物件導向程式的風格。</p>
<p>讓我們深入了解，看看如何辦到？</p>
<span id="more"></span>

<h3 id="Go-方法"><a href="#Go-方法" class="headerlink" title="Go 方法"></a>Go 方法</h3><p>方法不過是一種帶有特殊 <em>接收器</em> 參數的函數。</p>
<p><em>接收器</em> 參數有名稱和型別。它出現在 <code>func</code> 關鍵字和方法名稱之間：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver Type<span class="token punctuation">)</span> <span class="token function">MethodName</span><span class="token punctuation">(</span>parameterList<span class="token punctuation">)</span> <span class="token punctuation">(</span>returnTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>接收器可以是 struct 型別，也可以是非 struct 型別。</p>
<p>我們來看一個範例，來了解如何在 <code>type</code> 上定義方法及如何執行這種方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// Struct type - `Point`</span>
<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Method with receiver `Point`</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p Point<span class="token punctuation">)</span> <span class="token function">IsAbove</span><span class="token punctuation">(</span>y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>Y <span class="token operator">></span> y
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Point : "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Is Point p located above the line y = 1.0 ? : "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">IsAbove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">Point :  &#123;2 4&#125;
Is Point p located above the line y &#x3D; 1.0 ? :  true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意我們在 <code>Point</code> 實體 <code>p</code> 呼叫方法 <code>IsAbove()</code> 的方式。就和你使用物件導向程式語言時呼叫方法的方式一樣。</p>
<h3 id="方法就是函數"><a href="#方法就是函數" class="headerlink" title="方法就是函數"></a>方法就是函數</h3><p>因為方法只是帶有接收器參數的函數。我們也可以使用正常的函數來撰寫上述範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// Struct type - `Point`</span>
<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">IsAboveFunc</span><span class="token punctuation">(</span>p Point<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>Y <span class="token operator">></span> y
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
Compare the above function with the corresponding method -
func (p Point) IsAbove(y float64) bool &#123;
	return p.Y > y
&#125;
*/</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Point : "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Is Point p located above the line y = 1.0 ? : "</span><span class="token punctuation">,</span> <span class="token function">IsAboveFunc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="為什麼用方法代替函數？"><a href="#為什麼用方法代替函數？" class="headerlink" title="為什麼用方法代替函數？"></a>為什麼用方法代替函數？</h3><p>方法可協助你在 Go 中撰寫物件導向風格的程式碼。方法呼叫比函數呼叫更容易閱讀和理解。</p>
<p>此外，方法可幫助你避免命名衝突。由於方法與特定的接收器綁定，因此你可以在不同接收器型別上使用相同的方法名稱。</p>
<p>我們來看一個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> ArithmeticProgression <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	A<span class="token punctuation">,</span> D <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Method with receiver `ArithmeticProgression`</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ap ArithmeticProgression<span class="token punctuation">)</span> <span class="token function">NthTerm</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> ap<span class="token punctuation">.</span>A <span class="token operator">+</span> <span class="token function">float64</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>ap<span class="token punctuation">.</span>D
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> GeometricProgression <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	A<span class="token punctuation">,</span> R <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Method with receiver `GeometricProgression`</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>gp GeometricProgression<span class="token punctuation">)</span> <span class="token function">NthTerm</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> gp<span class="token punctuation">.</span>A <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>R<span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ap <span class="token operator">:=</span> ArithmeticProgression<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token comment">// AP: 1 3 5 7 9 ...</span>
	gp <span class="token operator">:=</span> GeometricProgression<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>  <span class="token comment">// GP: 1 2 4 8 16 ...</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"5th Term of the Arithmetic series = "</span><span class="token punctuation">,</span> ap<span class="token punctuation">.</span><span class="token function">NthTerm</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"5th Term of the Geometric series = "</span><span class="token punctuation">,</span> gp<span class="token punctuation">.</span><span class="token function">NthTerm</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">5th Term of the Arithmetic series &#x3D;  9
5th Term of the Geometric series &#x3D;  16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="具有指標接收器的方法"><a href="#具有指標接收器的方法" class="headerlink" title="具有指標接收器的方法"></a>具有指標接收器的方法</h3><p>我們在上一節中看到的所有範例都有一個值接收器。</p>
<p>對於值接收器，該方法對傳遞給它的值的副本進行操作。因此，呼叫者看不到方法內部對接收器所做的任何修改。</p>
<p><strong>Go 允許你使用指標接收器定義方法</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Method with pointer receiver</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>Type<span class="token punctuation">)</span> <span class="token function">MethodName</span><span class="token punctuation">(</span>parameterList<span class="token punctuation">)</span> <span class="token punctuation">(</span>returnTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>帶有指標接收器的方法可以修改接收器指向的值。這種修改對方法的呼叫者也是可見的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
  Translates the current Point, at location (X,Y), by dx along the x axis and dy along the y axis
  so that it now represents the point (X+dx,Y+dy).
*/</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">Translate</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p<span class="token punctuation">.</span>X <span class="token operator">=</span> p<span class="token punctuation">.</span>X <span class="token operator">+</span> dx
	p<span class="token punctuation">.</span>Y <span class="token operator">=</span> p<span class="token punctuation">.</span>Y <span class="token operator">+</span> dy
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Point p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>

	p<span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"After Translate, p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">Point p &#x3D;  &#123;3 4&#125;
After Translate, p &#x3D;  &#123;10 13&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="將具有指標接收器的方法當作函數"><a href="#將具有指標接收器的方法當作函數" class="headerlink" title="將具有指標接收器的方法當作函數"></a>將具有指標接收器的方法當作函數</h4><p>如同具有值接收器的方法，我們也可以將具有指標接收器的方法撰寫為函數。以下範例展示如何使用函數重寫前面的範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
  Translates the current Point, at location (X,Y), by dx along the x axis and dy along the y axis
  so that it now represents the point (X+dx,Y+dy).
*/</span>
<span class="token keyword">func</span> <span class="token function">TranslateFunc</span><span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p<span class="token punctuation">.</span>X <span class="token operator">=</span> p<span class="token punctuation">.</span>X <span class="token operator">+</span> dx
	p<span class="token punctuation">.</span>Y <span class="token operator">=</span> p<span class="token punctuation">.</span>Y <span class="token operator">+</span> dy
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Point p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>

	<span class="token function">TranslateFunc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"After Translate, p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方法和指標間接取值"><a href="#方法和指標間接取值" class="headerlink" title="方法和指標間接取值"></a>方法和指標間接取值</h3><h4 id="1-具有指標接收器的方法與具有指標參數的函數"><a href="#1-具有指標接收器的方法與具有指標參數的函數" class="headerlink" title="1. 具有指標接收器的方法與具有指標參數的函數"></a>1. 具有指標接收器的方法與具有指標參數的函數</h4><p>具有指標接收器的方法可以接受指標和值作為接收器參數。但是，具有指標參數的函數只能接受指標：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Method with Pointer receiver</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">Translate</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p<span class="token punctuation">.</span>X <span class="token operator">=</span> p<span class="token punctuation">.</span>X <span class="token operator">+</span> dx
	p<span class="token punctuation">.</span>Y <span class="token operator">=</span> p<span class="token punctuation">.</span>Y <span class="token operator">+</span> dy
<span class="token punctuation">&#125;</span>

<span class="token comment">// Function with Pointer argument</span>
<span class="token keyword">func</span> <span class="token function">TranslateFunc</span><span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p<span class="token punctuation">.</span>X <span class="token operator">=</span> p<span class="token punctuation">.</span>X <span class="token operator">+</span> dx
	p<span class="token punctuation">.</span>Y <span class="token operator">=</span> p<span class="token punctuation">.</span>Y <span class="token operator">+</span> dy
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>p
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Point p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>

	<span class="token comment">// Calling a Method with Pointer receiver</span>
	p<span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>		<span class="token comment">// Valid</span>
	ptr<span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>	<span class="token comment">// Valid</span>

	<span class="token comment">// Calling a Function with a Pointer argument</span>
	<span class="token function">TranslateFunc</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment">// Valid</span>
	<span class="token function">TranslateFunc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>   <span class="token comment">// Not Valid</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意，<code>p.Translate()</code> 和 <code>ptr.Translate()</code> 呼叫都是有效的。由於 Go 知道 <code>Translate()</code> 方法具有指標接收器，因此它將陳述式 <code>p.Translate()</code>翻譯為 <code>(&amp;p).Translate()</code>。它是 Go 為了方便所提供的語法糖。</p>
</blockquote>
<h4 id="2-具有值接收器的方法與具有值參數的函數"><a href="#2-具有值接收器的方法與具有值參數的函數" class="headerlink" title="2. 具有值接收器的方法與具有值參數的函數"></a>2. 具有值接收器的方法與具有值參數的函數</h4><p>具有值接收器的方法可以接受值和指標作為接收器參數。但是，具有值參數的函數只能接受值：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// Struct type - `Point`</span>
<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p Point<span class="token punctuation">)</span> <span class="token function">IsAbove</span><span class="token punctuation">(</span>y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>Y <span class="token operator">></span> y
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">IsAboveFunc</span><span class="token punctuation">(</span>p Point<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>Y <span class="token operator">></span> y
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>p

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Point p = "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>

	<span class="token comment">// Calling a Method with Value receiver</span>
	p<span class="token punctuation">.</span><span class="token function">IsAbove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// Valid</span>
	ptr<span class="token punctuation">.</span><span class="token function">IsAbove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Valid</span>

	<span class="token comment">// Calling a Function with a Value argument</span>
	<span class="token function">IsAboveFunc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// Valid</span>
	<span class="token function">IsAboveFunc</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Not Valid</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>在上面的範例中，<code>p.IsAbove()</code> 和 <code>ptr.IsAbove()</code> 陳述式都是有效的。Go 知道 <code>IsAbove()</code> 方法有值接收器。因此，為了方便起見，它將陳述式 <code>ptr.IsAbove()</code> 翻譯為 <code>(*ptr).IsAbove()</code>。</p>
</blockquote>
<h3 id="方法定義限制"><a href="#方法定義限制" class="headerlink" title="方法定義限制"></a>方法定義限制</h3><p>請注意，為了能夠在接收器上定義方法，必須在相同 package 中定義接收器型別。</p>
<p>Go 不允許你定義的方法的接收器型別是定義在其他 package 中（這也包括諸如 <code>int</code> 之類的內建型別）。</p>
<p>在前面的所有範例中，struct 和方法都在相同 package <code>main</code> 中定義，因此他們運作良好。但是，如果你嘗試在型別上定義方法，但該型別是在其他 package 中定義的，則會編譯失敗。</p>
<p>我們來看一個範例。細想以下 package 階層：</p>
<pre class="line-numbers language-none"><code class="language-none">src&#x2F;example
	main
		main.go
    model
        person.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以下是 <code>person.go</code> 的內容：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> model

<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	FirstName <span class="token builtin">string</span>
	LastName <span class="token builtin">string</span>
	Age <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們來嘗試在 struct <code>Person</code> 上定義一個方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"example/model"</span>

<span class="token comment">// ERROR: cannot define new methods on non-local types model.Person</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p model<span class="token punctuation">.</span>Person<span class="token punctuation">)</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>FirstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>LastName
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在非-struct-型別上定義方法"><a href="#在非-struct-型別上定義方法" class="headerlink" title="在非 struct 型別上定義方法"></a>在非 struct 型別上定義方法</h3><p>Go 也允許你在非 struct 型別上定義方法。在以下範例中，我已經在 <code>MyString</code> 型別上定義了一個名為 <code>reverse()</code> 的方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> MyString <span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>myStr MyString<span class="token punctuation">)</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>myStr<span class="token punctuation">)</span>
	runes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

	<span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>runes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>
		runes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> runes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> runes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> runes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>runes<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	myStr <span class="token operator">:=</span> <span class="token function">MyString</span><span class="token punctuation">(</span><span class="token string">"OLLEH"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>myStr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
HELLO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>希望你喜歡這篇文章。感謝你的閱讀，下篇再見。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 如何產生 Email 驗證網址</title>
    <url>/2020/06/04/how-laravel-generate-email-verification-url/</url>
    <content><![CDATA[<p>由於新專案決定使用 <a href="https://laravel.com/">Laravel</a> 開發，在實作 Email 驗證時發現與 <a href="https://github.com/heartcombo/devise">Devise</a> 不同的是，它沒有在資料表內建立 <code>confirmation_token</code> 欄位，於是便讓我想了解一下它產生驗證網址的方式。</p>
<p>在追蹤原始碼後發現驗證網址是透過 <code>verificationUrl</code> 函數所產生的。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>vendor/laravel/framework/src/Illuminate/Auth/Notifications/VerifyEmail.php</span></div><code class="language-php"><span class="token comment">/**
 * Get the verification URL for the given notifiable.
 *
 * @param  mixed  $notifiable
 * @return string
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">verificationUrl</span><span class="token punctuation">(</span><span class="token variable">$notifiable</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name static-context">URL</span><span class="token operator">::</span><span class="token function">temporarySignedRoute</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'verification.verify'</span><span class="token punctuation">,</span>
        <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">addMinutes</span><span class="token punctuation">(</span><span class="token class-name static-context">Config</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'auth.verification.expire'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$notifiable</span><span class="token operator">-></span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'hash'</span> <span class="token operator">=></span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$notifiable</span><span class="token operator">-></span><span class="token function">getEmailForVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由以上程式碼可看到它透過了 <code>UrlGenerator</code> 提供的 <code>temporarySignedRoute</code> 函數來產生暫時性的驗證網址。</p>
<span id="more"></span>

<p>傳入的參數分別為：</p>
<ul>
<li><p>行 10：路由名稱</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'verification.verify'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>行 11：到期時間</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">addMinutes</span><span class="token punctuation">(</span><span class="token class-name static-context">Config</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'auth.verification.expire'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>行 12 ~ 15：欲編碼的資料</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$notifiable</span><span class="token operator">-></span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'hash'</span> <span class="token operator">=></span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$notifiable</span><span class="token operator">-></span><span class="token function">getEmailForVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>從以下原始碼可得知上方參數中的 <code>getEmailForVerification</code> 函數是用來取得用於驗證的 Email 地址。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>vendor/laravel/framework/src/Illuminate/Auth/MustVerifyEmail.php</span></div><code class="language-php"><span class="token comment">/**
 * Get the email address that should be used for verification.
 *
 * @return string
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getEmailForVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">email</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>接著來看看 <code>temporarySignedRoute</code> 函數又做了哪些事。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>vendor/laravel/framework/src/Illuminate/Routing/UrlGenerator.php</span></div><code class="language-php"><span class="token comment">/**
 * Create a signed route URL for a named route.
 *
 * @param  string  $name
 * @param  array  $parameters
 * @param  \DateTimeInterface|\DateInterval|int|null  $expiration
 * @param  bool  $absolute
 * @return string
 *
 * @throws \InvalidArgumentException
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">signedRoute</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$expiration</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$absolute</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">formatParameters</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'signature'</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span>
            <span class="token string single-quoted-string">'"Signature" is a reserved parameter when generating signed routes. Please rename your route parameter.'</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$expiration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token variable">$parameters</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'expires'</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">availableAt</span><span class="token punctuation">(</span><span class="token variable">$expiration</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keyResolver</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span> <span class="token operator">+</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">'signature'</span> <span class="token operator">=></span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sha256'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">,</span> <span class="token variable">$absolute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$absolute</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Create a temporary signed route URL for a named route.
 *
 * @param  string  $name
 * @param  \DateTimeInterface|\DateInterval|int  $expiration
 * @param  array  $parameters
 * @param  bool  $absolute
 * @return string
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">temporarySignedRoute</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$expiration</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$absolute</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">signedRoute</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">,</span> <span class="token variable">$expiration</span><span class="token punctuation">,</span> <span class="token variable">$absolute</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>行 46：<code>temporarySignedRoute</code> 函數又將傳入的參數再傳遞給 <code>signedRoute</code> 函數。</p>
</li>
<li><p>行 14：將傳入的 <code>$parameters</code> 透過 <code>formatParameters</code> 函數做個整理，接著行 16 ~ 20 確認 <code>$parameters</code> 內沒有名為 <code>signature</code> 的 key，因為在產生簽名路由時， <code>signature</code> 是保留參數。</p>
</li>
<li><p>行 22 ~ 24：判斷是否有到期時間，若有到期時間則將其放到 <code>$parameters</code> 內。</p>
</li>
<li><p>行 26：將 <code>$parameters</code> 按照 key 排序。</p>
</li>
<li><p>行 28：<code>keyResolver</code> 則是在 <code>RoutingServiceProvider</code> 中設為讀取並回傳 <code>app.key</code>。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>vendor/laravel/framework/src/Illuminate/Routing/RoutingServiceProvider.php</span></div><code class="language-php"><span class="token variable">$url</span><span class="token operator">-></span><span class="token function">setKeyResolver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">app</span><span class="token operator">-></span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'app.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>行 30 ~ 32：使用傳入的各項參數產生用於驗證的網址，<code>signature</code> 使用了 <code>hash_hmac</code> 函數透過 sha256 演算法搭配 <code>$key</code> 將路由編碼，之後便可透過計算 <code>signature</code> 來得知網址是否遭到竄改。</p>
</li>
</ul>
<p>以上便是產生驗證網址的大致流程，以下為驗證的原始碼，以興趣的話也可以看看。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>vendor/laravel/framework/src/Illuminate/Routing/UrlGenerator.php</span></div><code class="language-php"><span class="token comment">/**
 * Determine if the given request has a valid signature.
 *
 * @param  \Illuminate\Http\Request  $request
 * @param  bool  $absolute
 * @return bool
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hasValidSignature</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$absolute</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">hasCorrectSignature</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$absolute</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">signatureHasNotExpired</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Determine if the signature from the given request matches the URL.
 *
 * @param  \Illuminate\Http\Request  $request
 * @param  bool  $absolute
 * @return bool
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hasCorrectSignature</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$absolute</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$absolute</span> <span class="token operator">?</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$request</span><span class="token operator">-></span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$original</span> <span class="token operator">=</span> <span class="token function">rtrim</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token class-name static-context">Arr</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span>
        <span class="token class-name static-context">Arr</span><span class="token operator">::</span><span class="token function">except</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'signature'</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$signature</span> <span class="token operator">=</span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sha256'</span><span class="token punctuation">,</span> <span class="token variable">$original</span><span class="token punctuation">,</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keyResolver</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">hash_equals</span><span class="token punctuation">(</span><span class="token variable">$signature</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'signature'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Determine if the expires timestamp from the given request is not from the past.
 *
 * @param  \Illuminate\Http\Request  $request
 * @return bool
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">signatureHasNotExpired</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$expires</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'expires'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">!</span> <span class="token punctuation">(</span><span class="token variable">$expires</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token variable">$expires</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 JWT 身份驗證實作 Laravel REST API</title>
    <url>/2020/06/16/implement-laravel-rest-api-using-jwt-authentication/</url>
    <content><![CDATA[<p>Laravel 預設提供了 3 種身份驗證方式，分別為 <code>auth</code>、<code>auth.basic</code> 及 <code>guest</code>，並透過 middleware 提供我們使用。</p>
<p>不過通常我們在提供 API 時會採用 JWT 來實作所需要的身份驗證功能，在 Laravel 中我們通常會使用 <code>tymon/jwt-auth</code> 來實作 JWT，以下就讓我們一起來實作吧。</p>
<p>本文實作時採用的是 <code>Laravel 7.15.0</code> 及 <code>tymon/jwt-auth 1.0.0</code>。</p>
<span id="more"></span>

<h3 id="透過-composer-安裝套件"><a href="#透過-composer-安裝套件" class="headerlink" title="透過 composer 安裝套件"></a>透過 composer 安裝套件</h3><p>執行以下指令來安裝最新版本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> require tymon/jwt-auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="加入服務提供者（Service-Provider）及別名（Alias）"><a href="#加入服務提供者（Service-Provider）及別名（Alias）" class="headerlink" title="加入服務提供者（Service Provider）及別名（Alias）"></a>加入服務提供者（Service Provider）及別名（Alias）</h3><p>開啟 <code>config/app.php</code> 設定檔，將其加到 <code>providers</code> 及 <code>aliases</code> 陣列中：</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>config/app.php</span></div><code class="language-php"><span class="token string single-quoted-string">'providers'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
    <span class="token comment">/*
     * Package Service Providers...
     */</span>
    <span class="token class-name class-name-fully-qualified static-context">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Providers<span class="token punctuation">\</span>LaravelServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'aliases'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>

    <span class="token string single-quoted-string">'JWTAuth'</span> <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>JWTAuth</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'JWTFactory'</span> <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>JWTFactory</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="加入-middleware"><a href="#加入-middleware" class="headerlink" title="加入 middleware"></a>加入 middleware</h3><p><code>jwt-auth</code> 提供了幾個 middleware，將其加到 <code>app\Http\Kernel.php</code> 中的 <code>$routeMiddleware</code> 陣列中，之後便可在路由中使用 middleware。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>app\Http\Kernel.php</span></div><code class="language-php"><span class="token comment">/**
 * The application's route middleware.
 *
 * These middleware may be assigned to groups or used individually.
 *
 * @var array
 */</span>
<span class="token keyword">protected</span> <span class="token variable">$routeMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>

    <span class="token string single-quoted-string">'jwt.auth'</span> <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>Authenticate</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'jwt.check'</span> <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>Check</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'jwt.refresh'</span> <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>RefreshToken</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'jwt.renew'</span> <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>AuthenticateAndRenew</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="建立設定檔"><a href="#建立設定檔" class="headerlink" title="建立設定檔"></a>建立設定檔</h3><p>執行以下指令來建立套件設定檔：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan vendor:publish --provider<span class="token operator">=</span><span class="token string">"Tymon\JWTAuth\Providers\LaravelServiceProvider"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="產生密鑰"><a href="#產生密鑰" class="headerlink" title="產生密鑰"></a>產生密鑰</h3><p>執行以下指令來產生一組用於對 <code>token</code> 進行簽章的密鑰，具體的簽章方式取決於你選擇的演算法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan jwt:secret<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>執行後會在你的 <code>.env</code> 檔案中加上如 <code>JWT_SECRET=foobar</code> 之類的內容。</p>
<h3 id="更新-User-model"><a href="#更新-User-model" class="headerlink" title="更新 User model"></a>更新 <code>User</code> model</h3><p>首先，你需要在 <code>User</code> model 實作 <code>Tymon\JWTAuth\Contracts\JWTSubject</code> 契約，它要求你實作 <code>getJWTIdentifier()</code> 及 <code>getJWTCustomClaims()</code> 方法。</p>
<p>以下的範例是實作後大致上的樣子。當然，在必要時你可以進行任何修改，以滿足自己的需求。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>app/User.php</span></div><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>MustVerifyEmail</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>User</span> <span class="token keyword">as</span> Authenticatable<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Notifications<span class="token punctuation">\</span>Notifiable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>JWTSubject</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Authenticatable</span> <span class="token keyword">implements</span> <span class="token class-name">JWTSubject</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Notifiable</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * The attributes that are mass assignable.
     *
     * @var array
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'email'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'password'</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$hidden</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">'password'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'remember_token'</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * The attributes that should be cast to native types.
     *
     * @var array
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$casts</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">'email_verified_at'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'datetime'</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getJWTIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getJWTCustomClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="設定-Auth-guard"><a href="#設定-Auth-guard" class="headerlink" title="設定 Auth guard"></a>設定 Auth guard</h3><p>在 <code>config/auth.php</code> 檔案中，你需要進行一些修改，以便設定 Laravel 使用 JWT guard 來增強你的應用程式驗證功能。</p>
<p>以下是我們對檔案所做的變更：</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>config/auth.php</span></div><code class="language-php"><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>

    <span class="token string single-quoted-string">'guards'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
        <span class="token operator">...</span>

        <span class="token string single-quoted-string">'api'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'driver'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'jwt'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'provider'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'users'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'hash'</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token operator">...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在這裡，我們告訴 <code>api</code> guard 使用 jwt driver。</p>
<p>現在，我們可以使用 Laravel 內建的驗證系統，並透過 <code>jwt-auth</code> 在背後工作！</p>
<h3 id="設定路由"><a href="#設定路由" class="headerlink" title="設定路由"></a>設定路由</h3><p>讓我們在 <code>routes/api.php</code> 中加入一些路由及 middleware，如下所示：</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>routes/api.php</span></div><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'AuthController@login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'middleware'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'jwt.auth'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'logout'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'AuthController@logout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'refresh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'AuthController@refresh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'me'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'AuthController@me'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="建立-Auth-Controller"><a href="#建立-Auth-Controller" class="headerlink" title="建立 Auth Controller"></a>建立 Auth Controller</h3><p>你可以手動或透過 <code>artisan</code> 指令建立 <code>AuthController</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan make:controller AuthController<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>建立完畢後，加入以下內容：</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>app/Http/Controllers/AuthController.php</span></div><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AuthController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * Get a JWT token via given credentials.
     *
     * @param  \Illuminate\Http\Request  $request
     *
     * @return \Illuminate\Http\JsonResponse
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$credentials</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">only</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">respondWithToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Unauthorized'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * Get the authenticated User
     *
     * @return \Illuminate\Http\JsonResponse
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * Log the user out (Invalidate the token).
     *
     * @return \Illuminate\Http\JsonResponse
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Successfully logged out'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * Refresh a token.
     *
     * @return \Illuminate\Http\JsonResponse
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">respondWithToken</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * Get the token array structure.
     *
     * @param  string $token
     *
     * @return \Illuminate\Http\JsonResponse
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">respondWithToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'access_token'</span> <span class="token operator">=></span> <span class="token variable">$token</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'token_type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'bearer'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'expires_in'</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getTTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * Get the guard to be used during authentication.
     *
     * @return \Illuminate\Contracts\Auth\Guard
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">guard</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'api'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>現在你可以用有效的帳密發送請求到登入 API（例如：<code>http://example.dev/api/login</code>），收到的回應會像這樣：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vZXhhbXBsZS5kZXYvYXBpL2xvZ2luIiwiaWF0IjoxNTkyMjk4NjcwLCJleHAiOjE1OTIzMDIyNzAsIm5iZiI6MTU5MjI5ODY3MCwianRpIjoiSmVxUzVhQUxha0NUamhoUCIsInN1YiI6MSwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9.KwU9iFp0vhSamDm1I0ExB9d_keK-mCkZfUBWlhWM4o4"</span><span class="token punctuation">,</span>
    <span class="token property">"token_type"</span><span class="token operator">:</span> <span class="token string">"bearer"</span><span class="token punctuation">,</span>
    <span class="token property">"expires_in"</span><span class="token operator">:</span> <span class="token number">3600</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後就可以使用該 <code>token</code> 向你的應用程式發送經過身份驗證的請求。</p>
<h3 id="發送已驗證的請求"><a href="#發送已驗證的請求" class="headerlink" title="發送已驗證的請求"></a>發送已驗證的請求</h3><p>可以使用多種方法透過 http 發送 <code>token</code>：</p>
<ul>
<li><p>授權標頭（Authorization Header）</p>
<pre class="line-numbers language-none"><code class="language-none">Authorization: Bearer eyJ0eXAiOiJKV1QiLCJ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查詢字串參數（Query String Parameter）</p>
<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;example.dev&#x2F;me?token&#x3D;eyJ0eXAiOiJKV1QiLCJ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>以上就是基本的使用 JWT 身份驗證實作 Laravel REST API 的部分，若有任何錯誤的地方也請多指教。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Go 讀寫環境變數</title>
    <url>/2021/09/14/reading-and-writing-environment-variables-in-go/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/go-read-write-environment-variables">Reading and Writing Environment Variables in Go</a></p>
</blockquote>
<p>環境變數是在程式執行時向程式提供動態設定資訊的一種方式。環境變數通常用於讓同一個程式在不同的環境中運作，如本機、驗證或生產環境。</p>
<h3 id="在-Go-取得、設定、取消設定和擴充環境變數"><a href="#在-Go-取得、設定、取消設定和擴充環境變數" class="headerlink" title="在 Go 取得、設定、取消設定和擴充環境變數"></a>在 Go 取得、設定、取消設定和擴充環境變數</h3><p>下面的程式示範了如何在 Go 中使用環境變數。它利用了 <code>os</code> package 提供的以下功能：</p>
<ul>
<li><strong>os.Setenv(key, value)</strong>: 設定環境變數。</li>
<li><strong>os.Getenv(key)</strong>: 取得環境變數。如果環境變數不存在，則返回空值。要區分空值和未設定的值，請使用 LookupEnv。</li>
<li><strong>os.Unsetenv(key)</strong>: 取消設定環境變數。</li>
<li><strong>os.LookupEnv(key)</strong>: 取得環境變數值和一個用來表示環境變數是否存在的布林值。它返回一個字串和布林值，如果環境變數不存在，布林值為 false。</li>
<li><strong>os.ExpandEnv(str)</strong>: 根據目前的環境變數，取代字串中的 <code>$&#123;var&#125;</code> 或 <code>$var</code> 來擴充字串。</li>
</ul>
<span id="more"></span>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Set an Environment Variable</span>
	os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">"DB_HOST"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">"DB_PORT"</span><span class="token punctuation">,</span> <span class="token string">"5432"</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">"DB_USERNAME"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">"DB_PASSWORD"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">"DB_NAME"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>

	<span class="token comment">// Get the value of an Environment Variable</span>
	host <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"DB_HOST"</span><span class="token punctuation">)</span>
	port <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"DB_PORT"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Host: %s, Port: %s\n"</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>

	<span class="token comment">// Unset an Environment Variable</span>
	os<span class="token punctuation">.</span><span class="token function">Unsetenv</span><span class="token punctuation">(</span><span class="token string">"DB_PORT"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"After unset, Port: %s\n"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"DB_PORT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">/*
		Get the value of an environment variable and a boolean indicating whether the
		environment variable is present or not.
	*/</span>
	driver<span class="token punctuation">,</span> ok <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">LookupEnv</span><span class="token punctuation">(</span><span class="token string">"DB_DRIVER"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DB_DRIVER is not present"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Driver: %s\n"</span><span class="token punctuation">,</span> driver<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Expand a string containing environment variables in the form of $var or $&#123;var&#125;</span>
	dbURL <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ExpandEnv</span><span class="token punctuation">(</span><span class="token string">"postgres://$DB_USERNAME:$DB_PASSWORD@DB_HOST:$DB_PORT/$DB_NAME"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DB URL: "</span><span class="token punctuation">,</span> dbURL<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Host: localhost, Port: 5432
After unset, Port:
DB_DRIVER is not present
DB URL:  postgres:&#x2F;&#x2F;root:admin@DB_HOST:&#x2F;test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="列出並清除-Go-中的所有環境變數"><a href="#列出並清除-Go-中的所有環境變數" class="headerlink" title="列出並清除 Go 中的所有環境變數"></a>列出並清除 Go 中的所有環境變數</h3><ul>
<li><strong>os.Environ()</strong>: 此函數以 <code>key=value</code> 的形式返回一個包含所有環境變數的 <code>[]string</code>。</li>
<li><strong>os.Clearenv()</strong>: 此函數會刪除所有環境變數。在撰寫測試要從乾淨的環境開始時可能會派上用場。</li>
</ul>
<p>以下範例示範了如何使用這兩個函數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os"</span>
	<span class="token string">"strings"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// Environ returns a copy of strings representing the environment,</span>
	<span class="token comment">// in the form "key=value".</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> env <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span><span class="token function">Environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// env is</span>
		envPair <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
		key <span class="token operator">:=</span> envPair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		value <span class="token operator">:=</span> envPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Delete all environment variables</span>
	os<span class="token punctuation">.</span><span class="token function">Clearenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Number of environment variables: "</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">Environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
TERM_SESSION_ID : w0t0p1:70C49068-9C87-4032-9C9B-49FB6B86687B
PATH : &#x2F;Users&#x2F;callicoder&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v10.0.0&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;Users&#x2F;callicoder&#x2F;protobuf&#x2F;bin:&#x2F;Users&#x2F;callicoder&#x2F;go&#x2F;bin:&#x2F;Users&#x2F;callicoder&#x2F;vaultproject:&#x2F;Users&#x2F;callicoder&#x2F;google-cloud-sdk&#x2F;bin:&#x2F;Users&#x2F;callicoder&#x2F;.rbenv&#x2F;bin:&#x2F;Users&#x2F;callicoder&#x2F;.rbenv&#x2F;shims:&#x2F;Users&#x2F;callicoder&#x2F;anaconda3&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;Users&#x2F;callicoder&#x2F;Library&#x2F;Android&#x2F;sdk&#x2F;platform-tools:&#x2F;opt&#x2F;flutter&#x2F;bin
.... # Output truncated for brevity

Number of environment variables:  0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Go 讀取命令列引數</title>
    <url>/2021/09/14/reading-command-line-arguments-in-go/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/go-read-command-line-arguments">Reading command line arguments in Go</a></p>
</blockquote>
<p>命令列引數是在程式啟動時向程式提供額外資訊的一種方式。提供命命列引數最簡單的方法是執行指令時在後面指定以空格分隔的數值：</p>
<pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;my-program Arg1 Arg2 Arg3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="在-Go-讀取命令列引數"><a href="#在-Go-讀取命令列引數" class="headerlink" title="在 Go 讀取命令列引數"></a>在 Go 讀取命令列引數</h3><p>在 Go 中，你可以使用 <code>os.Args</code> 變數來讀取原始命令列引數。它是一個 <a href="/2019/11/13/introduction-to-slices-in-golang/">slice</a> 且包含了以程式名稱為首的所有命令列引數。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	args <span class="token operator">:=</span> os<span class="token punctuation">.</span>Args
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"All arguments: %v\n"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>

	argsWithoutProgram <span class="token operator">:=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Arguments without program name: %v\n"</span><span class="token punctuation">,</span> argsWithoutProgram<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ go build command-line-arguments.go

$ .&#x2F;command-line-arguments Hello World From Command Line
All arguments: [.&#x2F;command-line-arguments Hello World From Command Line]
Arguments without program path: [Hello World From Command Line]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h3 id="Go-命令列引數範例"><a href="#Go-命令列引數範例" class="headerlink" title="Go 命令列引數範例"></a>Go 命令列引數範例</h3><p>這裡有另一個範例，它從命令列讀取一堆名字，並向所有名字打招呼：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	names <span class="token operator">:=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token keyword">range</span> names <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s!\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ go build say-hello-to.go
$ .&#x2F;say-hello-to Rajeev Sachin Jack Daniel
Hello, Rajeev!
Hello, Sachin!
Hello, Daniel!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 中的 Base64 編碼和解碼</title>
    <url>/2021/09/15/base64-encoding-and-decoding-in-golang/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-base64-encoding-decoding">Base64 Encoding and Decoding in Golang</a></p>
</blockquote>
<p>Base64 是一種二進位轉文字編碼方案。它用可列印的 ASCII 字串格式對二進位資料進行編碼。當需要透過僅設計用來處理文字資料無法正確處理二進位資料的通訊媒介傳輸二進位檔案時，通常會使用它。</p>
<p>Go 內建支援對 Base64 編碼和解碼。在本文中，你將學到如何在 Go 中進行 Base64 編碼和解碼。</p>
<h3 id="Go-中的-Base64-編碼"><a href="#Go-中的-Base64-編碼" class="headerlink" title="Go 中的 Base64 編碼"></a>Go 中的 Base64 編碼</h3><p>Go 的 <a href="https://pkg.go.dev/encoding/base64">encoding/base64</a> package 支援標準及與網址相容的 Base64 編碼和解碼。與網址相容的 Base64 編碼允許你將 Base64 編碼的字串安全的放在網址內。</p>
<p>讓我們來看個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"encoding/base64"</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	data <span class="token operator">:=</span> <span class="token string">"Gol@ng is Awesome?~"</span>

    <span class="token comment">// Standard Base64 Encoding</span>
	encodedData <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>encodedData<span class="token punctuation">)</span>

	<span class="token comment">// URL and filename-safe Base64 encoding</span>
	urlSafeEncodedData <span class="token operator">:=</span> base64<span class="token punctuation">.</span>URLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>urlSafeEncodedData<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<pre class="line-numbers language-none"><code class="language-none"># Output
R29sQG5nIGlzIEF3ZXNvbWU&#x2F;fg&#x3D;&#x3D;
R29sQG5nIGlzIEF3ZXNvbWU_fg&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="無填充的-Base64-編碼"><a href="#無填充的-Base64-編碼" class="headerlink" title="無填充的 Base64 編碼"></a>無填充的 Base64 編碼</h3><p>如果你想進行原始、無填充的 Base64 編碼，那麼你可以使用 <code>RawStdEncoding</code> 和 <code>RawURLEncoding</code>。它們與 <code>StdEncoding</code> 和 <code>URLEncoding</code> 相同，但省略了填充字元。請注意，在實際使用上，你應該只使用上面範例中有填充的 Base64 編碼。</p>
<p>以下是無填充的 Base64 編碼範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"encoding/base64"</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	data <span class="token operator">:=</span> <span class="token string">"Gol@ng is Awesome?~"</span>

	<span class="token comment">// Standard Base64 Encoding without padding</span>
	encodedDataWithoutPadding <span class="token operator">:=</span> base64<span class="token punctuation">.</span>RawStdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>encodedDataWithoutPadding<span class="token punctuation">)</span>

	<span class="token comment">// URL and filename-safe Base64 encoding without padding</span>
	urlSafeEncodedDataWithoutPadding <span class="token operator">:=</span> base64<span class="token punctuation">.</span>RawURLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>urlSafeEncodedDataWithoutPadding<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
R29sQG5nIGlzIEF3ZXNvbWU&#x2F;fg
R29sQG5nIGlzIEF3ZXNvbWU_fg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="Go-中的-Base64-解碼"><a href="#Go-中的-Base64-解碼" class="headerlink" title="Go 中的 Base64 解碼"></a>Go 中的 Base64 解碼</h3><p>以下範例示範了如何在 Go 中解碼 Base64 編碼的字串：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"encoding/base64"</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	encodedData <span class="token operator">:=</span> <span class="token string">"R29sQG5nIGlzIEF3ZXNvbWU/fg=="</span>

	<span class="token comment">// Standard Base64 Decoding</span>
	decodedData<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>encodedData<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error decoding Base64 encoded data %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>decodedData<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// URL and filename-safe Base64 decoding</span>
	urlSafeBase64EncodedData <span class="token operator">:=</span> <span class="token string">"R29sQG5nIGlzIEF3ZXNvbWU_fg=="</span>
	urlSafeData<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>URLEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>urlSafeBase64EncodedData<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error decoding Base64 encoded data %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>urlSafeData<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Gol@ng is Awesome?~
Gol@ng is Awesome?~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 的網址編碼和解碼</title>
    <url>/2021/09/15/golang-url-encoding-and-decoding/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-url-encoding-decoding">Golang URL Encoding and Decoding</a></p>
</blockquote>
<p>網址只能包含 US-ASCII 字元集中的有限字元。這些字元包括數字（<code>0-9</code>）、字母（<code>A-Z</code>、<code>a-z</code>）和一些特殊字元（<code>-</code>、<code>.</code>、<code>_</code>、<code>~</code>）。此字元集外的任何字元都需要進行編碼或跳脫，然後才能在網址中使用。</p>
<p>在本文中，你將學到如何對字串進行編碼，以便將其安全的放在網址中。</p>
<h3 id="在-Go-中進行網址編碼或跳脫字串"><a href="#在-Go-中進行網址編碼或跳脫字串" class="headerlink" title="在 Go 中進行網址編碼或跳脫字串"></a>在 Go 中進行網址編碼或跳脫字串</h3><p>一個網址由多個部分組成（伺服器位址、路徑、查詢字串等）。通用語法如下所示：</p>
<pre class="line-numbers language-none"><code class="language-none">scheme:[&#x2F;&#x2F;[user:password@]host[:port]]path[?query][#fragment]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Go 提供了以下兩個函數來對字串進行編碼或跳脫，以便將其安全的放在網址中：</p>
<ul>
<li><a href="https://pkg.go.dev/net/url#QueryEscape">QueryEscape()</a>: 對字串進行編碼，以便安全的放在網址查詢字串中。</li>
<li><a href="https://pkg.go.dev/net/url#PathEscape">PathEscape()</a>: 對字串進行編碼，以便安全的放在網址路徑中。</li>
</ul>
<span id="more"></span>

<p>讓我們來看個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"net/url"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// QueryEscape: Escape a string to safely place it inside a URL query string</span>
	str <span class="token operator">:=</span> <span class="token string">"Gol@ng?&amp;"</span>
	encodedStr <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>encodedStr<span class="token punctuation">)</span>

	<span class="token comment">// PathEscape: Escape a string to safely place it inside a URL path segment</span>
	pathVar <span class="token operator">:=</span> <span class="token string">"Gol@ng?&amp;"</span>
	encodedPathVar <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">PathEscape</span><span class="token punctuation">(</span>pathVar<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>encodedPathVar<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Gol%40ng%3F%26
Gol@ng%3F&amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="在-Go-中解碼／取消跳脫已編碼的網址"><a href="#在-Go-中解碼／取消跳脫已編碼的網址" class="headerlink" title="在 Go 中解碼／取消跳脫已編碼的網址"></a>在 Go 中解碼／取消跳脫已編碼的網址</h3><p>你可以使用 <a href="https://pkg.go.dev/net/url#QueryUnescape">QueryUnescape()</a> 和 <a href="https://pkg.go.dev/net/url#PathUnescape">PathUnescape()</a> 函數將已編碼的網址解碼回原始形式。以下範例示範了如何使用這些函數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"net/url"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// QueryUnescape: Decode a URL query string</span>
	encodedStr <span class="token operator">:=</span> <span class="token string">"Gol%40ng%3F%26"</span>
	decodedStr<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">QueryUnescape</span><span class="token punctuation">(</span>encodedStr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error decoding the string %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>decodedStr<span class="token punctuation">)</span>

	<span class="token comment">// PathUnescape: Decode a URL path segment</span>
	encodedPathVar <span class="token operator">:=</span> <span class="token string">"Gol@ng%3F&amp;"</span>
	decodedPathVar<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">PathUnescape</span><span class="token punctuation">(</span>encodedPathVar<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error decoding the string %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>decodedPathVar<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
Gol@ng?&amp;
Gol@ng?&amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 及 MongoDB 基本指令對應表</title>
    <url>/2013/11/14/sql-to-mongodb-mapping-chart/</url>
    <content><![CDATA[<p>由於新專案採用了 <a href="http://nodejs.org/">Node.js</a> 開發且使用 <a href="http://www.mongodb.org/">MongoDB</a> 作為儲存媒介，所以動手翻譯了官方文件方便查閱相關指令用法。</p>
<h3 id="術語和概念-Terminology-and-Concepts"><a href="#術語和概念-Terminology-and-Concepts" class="headerlink" title="術語和概念(Terminology and Concepts)"></a>術語和概念(Terminology and Concepts)</h3><h5 id="下表列出了各種-SQL-和相應的-MongoDB-的術語和概念。"><a href="#下表列出了各種-SQL-和相應的-MongoDB-的術語和概念。" class="headerlink" title="下表列出了各種 SQL 和相應的 MongoDB 的術語和概念。"></a>下表列出了各種 SQL 和相應的 MongoDB 的術語和概念。</h5><table>
<thead>
<tr>
<th align="left">SQL 術語/概念</th>
<th align="left">MongoDB 術語/概念</th>
</tr>
</thead>
<tbody><tr>
<td align="left">資料庫(database)</td>
<td align="left">資料庫(<a href="http://docs.mongodb.org/manual/reference/glossary/#term-database">database</a>)</td>
</tr>
<tr>
<td align="left">資料表(table)</td>
<td align="left">集合(<a href="http://docs.mongodb.org/manual/reference/glossary/#term-collection">collection</a>)</td>
</tr>
<tr>
<td align="left">資料列(row)</td>
<td align="left">文件(<a href="http://docs.mongodb.org/manual/reference/glossary/#term-document">document</a>) 或 <a href="http://docs.mongodb.org/manual/reference/glossary/#term-bson">BSON</a> 文件</td>
</tr>
<tr>
<td align="left">資料行(column)</td>
<td align="left">欄位(<a href="http://docs.mongodb.org/manual/reference/glossary/#term-field">field</a>)</td>
</tr>
<tr>
<td align="left">索引(index)</td>
<td align="left">索引(<a href="http://docs.mongodb.org/manual/reference/glossary/#term-index">index</a>)</td>
</tr>
<tr>
<td align="left">資料表連結(table joins)</td>
<td align="left">嵌入式文件及連結(embedded documents and linking)</td>
</tr>
<tr>
<td align="left">主索引鍵(primary key)<br /><br />指定任意一個或多個欄位組合為主索引鍵，資料內容須唯一不可重複。</td>
<td align="left">主索引鍵(<a href="http://docs.mongodb.org/manual/reference/glossary/#term-primary-key">primary key</a>)<br /><br />在 MongoDB，主索引鍵會自動設定到 <a href="http://docs.mongodb.org/manual/reference/glossary/#term-id">_id</a> 欄位。</td>
</tr>
<tr>
<td align="left">彙總(aggregation)，例如：group by</td>
<td align="left">彙總管線(aggregation pipeline)<br /><br /><a href="http://calvert.logdown.com/posts/159915-sql-to-aggregation-mapping-chart">參閱 SQL 至彙總(Aggregation)對應表</a>.</td>
</tr>
</tbody></table>
<h3 id="可執行檔案-Executables"><a href="#可執行檔案-Executables" class="headerlink" title="可執行檔案(Executables)"></a>可執行檔案(Executables)</h3><h5 id="下表列出了-MySQL-Oracle-可執行檔案和相應的-MongoDB-的可執行檔案。"><a href="#下表列出了-MySQL-Oracle-可執行檔案和相應的-MongoDB-的可執行檔案。" class="headerlink" title="下表列出了 MySQL / Oracle 可執行檔案和相應的 MongoDB 的可執行檔案。"></a>下表列出了 MySQL / Oracle 可執行檔案和相應的 MongoDB 的可執行檔案。</h5><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">MySQL / Oracle</th>
<th align="left">MongoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="left">資料庫伺服器(Database Server)</td>
<td align="left">mysqld / oracle</td>
<td align="left">mongod</td>
</tr>
<tr>
<td align="left">資料庫用戶端(Database Client)</td>
<td align="left">mysql / sqlplus</td>
<td align="left">mongo</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="範例-Examples"><a href="#範例-Examples" class="headerlink" title="範例(Examples)"></a>範例(Examples)</h3><h5 id="下表列出了各種-SQL-語句和相應的-MongoDB-語句。在表格中的範例假定有下列條件："><a href="#下表列出了各種-SQL-語句和相應的-MongoDB-語句。在表格中的範例假定有下列條件：" class="headerlink" title="下表列出了各種 SQL 語句和相應的 MongoDB 語句。在表格中的範例假定有下列條件："></a>下表列出了各種 SQL 語句和相應的 MongoDB 語句。在表格中的範例假定有下列條件：</h5><ul>
<li><p>SQL 範例假設是名為 users 的資料表</p>
</li>
<li><p>MongoDB 範例假設是名為 users 的集合，包含的文件原型如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">&#123;
　　_id: ObjectID<span class="token punctuation">(</span><span class="token string">"509a8fb2f3f4948bd2f983a0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
　　user_id: <span class="token string">"abc123"</span><span class="token punctuation">,</span>
　　age: <span class="token number">55</span><span class="token punctuation">,</span>
　　<span class="token keyword">status</span>: <span class="token string">'A'</span>
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="建立及修改資料表-Create-and-Alter"><a href="#建立及修改資料表-Create-and-Alter" class="headerlink" title="建立及修改資料表(Create and Alter)"></a>建立及修改資料表(Create and Alter)</h4><p>下面列出了關於資料表層級操作的各種 SQL 語句和相應的 MongoDB 語句。</p>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users <span class="token punctuation">(</span>
　id <span class="token keyword">MEDIUMINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
　　<span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
　user_id <span class="token keyword">Varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
　age Number<span class="token punctuation">,</span>
　<span class="token keyword">status</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
　<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句<br>在第一次插入資料操作時透過隱含方式建立。若未指定 _id 欄位，則會自動建立主索引鍵 _id。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span> &#123;
　user_id: <span class="token string">"abc123"</span><span class="token punctuation">,</span>
　age: <span class="token number">55</span><span class="token punctuation">,</span>
　<span class="token keyword">status</span>: <span class="token string">"A"</span>
 &#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然而，你也可以明確地建立一個集合：</p>
<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">db.createCollection(&quot;users&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.insert/#db.collection.insert">insert()</a> 和 <a href="http://docs.mongodb.org/manual/reference/method/db.createCollection/#db.createCollection">db.createCollection()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> users
<span class="token keyword">ADD</span> join_date <span class="token keyword">DATETIME</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句<br>集合不描述或強制其文件結構，即在集合層級沒有結構上的改變。<br>然而，在文件層級，update() 操作可以透過 $set 運算元加入欄位到已存在的文件。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>
　&#123; &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">set</span>: &#123; join_date: new <span class="token keyword">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &#125; &#125;<span class="token punctuation">,</span>
　&#123; multi: <span class="token boolean">true</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/core/data-models/">Data Modeling Concepts</a>、<a href="http://docs.mongodb.org/manual/reference/method/db.collection.update/#db.collection.update">update()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/update/set/#up._S_set">$set</a> 取得更多改變集合中文件結構的更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> users
<span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> join_date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句<br>集合不描述或強制其文件結構，即在集合層級中沒有結構上的改變。<br>然而，在文件層級，update() 操作可以透過 $unset 運算元從文件移除欄位。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>
　&#123; &#125;<span class="token punctuation">,</span>
　&#123; $unset: &#123; join_date: <span class="token string">""</span> &#125; &#125;<span class="token punctuation">,</span>
　&#123; multi: <span class="token boolean">true</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/core/data-models/">Data Modeling Concepts</a>、<a href="http://docs.mongodb.org/manual/reference/method/db.collection.update/#db.collection.update">update()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/update/unset/#up._S_unset">$unset</a> 取得更多改變集合中文件結構的更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_user_id_asc
<span class="token keyword">ON</span> users<span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>ensureIndex<span class="token punctuation">(</span> &#123; user_id: <span class="token number">1</span> &#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.ensureIndex/#db.collection.ensureIndex">ensureIndex()</a> 及 <a href="http://docs.mongodb.org/manual/core/indexes/">indexes</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span>
　idx_user_id_asc_age_desc
<span class="token keyword">ON</span> users<span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> age <span class="token keyword">DESC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>ensureIndex<span class="token punctuation">(</span> &#123; user_id: <span class="token number">1</span><span class="token punctuation">,</span> age: <span class="token operator">-</span><span class="token number">1</span> &#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.ensureIndex/#db.collection.ensureIndex">ensureIndex()</a> 及 <a href="http://docs.mongodb.org/manual/core/indexes/">indexes</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token keyword">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.drop/#db.collection.drop">drop()</a> 取得更多資訊。</p>
</li>
</ul>
<h4 id="插入-Insert"><a href="#插入-Insert" class="headerlink" title="插入(Insert)"></a>插入(Insert)</h4><p>下面列出了關於插入資料到資料表的各種 SQL 語句和相應的 MongoDB 語句。</p>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users<span class="token punctuation">(</span>
　user_id<span class="token punctuation">,</span>
　age<span class="token punctuation">,</span>
　<span class="token keyword">status</span><span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>
　<span class="token string">"bcd001"</span><span class="token punctuation">,</span>
　<span class="token number">45</span><span class="token punctuation">,</span>
　<span class="token string">"A"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span> &#123;
　user_id: <span class="token string">"bcd001"</span><span class="token punctuation">,</span>
　age: <span class="token number">45</span><span class="token punctuation">,</span>
　<span class="token keyword">status</span>: <span class="token string">"A"</span>
&#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.insert/#db.collection.insert">insert()</a> 取得更多資訊。</p>
</li>
</ul>
<h4 id="選擇-Select"><a href="#選擇-Select" class="headerlink" title="選擇(Select)"></a>選擇(Select)</h4><p>下面列出了關於從資料表讀取資料的各種 SQL 語句和相應的 MongoDB 語句。</p>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> <span class="token keyword">status</span>
<span class="token keyword">FROM</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; &#125;<span class="token punctuation">,</span>
　&#123; user_id: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">status</span>: <span class="token number">1</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token keyword">status</span>
<span class="token keyword">FROM</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; &#125;<span class="token punctuation">,</span>
　&#123; user_id: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">status</span>: <span class="token number">1</span><span class="token punctuation">,</span> _id: <span class="token number">0</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; <span class="token keyword">status</span>: <span class="token string">"A"</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token keyword">status</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; <span class="token keyword">status</span>: <span class="token string">"A"</span> &#125;<span class="token punctuation">,</span>
　&#123; user_id: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">status</span>: <span class="token number">1</span><span class="token punctuation">,</span> _id: <span class="token number">0</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">!=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; <span class="token keyword">status</span>: &#123; $ne: <span class="token string">"A"</span> &#125; &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/ne/#op._S_ne">$ne</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span>
<span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; <span class="token keyword">status</span>: <span class="token string">"A"</span><span class="token punctuation">,</span>
　　age: <span class="token number">50</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/and/#op._S_and">$and</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span>
<span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; $<span class="token operator">or</span>: <span class="token punctuation">[</span> &#123; <span class="token keyword">status</span>: <span class="token string">"A"</span> &#125; <span class="token punctuation">,</span>
　　　　 　 &#123; age: <span class="token number">50</span> &#125; <span class="token punctuation">]</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/or/#op._S_or">$or</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; age: &#123; $gt: <span class="token number">25</span> &#125; &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/gt/#op._S_gt">$gt</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> age <span class="token operator">&lt;</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; age: &#123; $lt: <span class="token number">25</span> &#125; &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/lt/#op._S_lt">$lt</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">25</span>
<span class="token operator">AND</span>　 age <span class="token operator">&lt;=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; age: &#123; $gt: <span class="token number">25</span><span class="token punctuation">,</span> $lte: <span class="token number">50</span> &#125; &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a>、<a href="http://docs.mongodb.org/manual/reference/operator/query/gt/#op._S_gt">$gt</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/lte/#op._S_lte">$lte</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> user_id <span class="token operator">like</span> <span class="token string">"%bc%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; user_id: <span class="token operator">/</span>bc<span class="token operator">/</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/regex/#op._S_regex">$regex</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> user_id <span class="token operator">like</span> <span class="token string">"bc%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
　&#123; user_id: <span class="token operator">/</span><span class="token operator">^</span>bc<span class="token operator">/</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/regex/#op._S_regex">$regex</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> user_id <span class="token keyword">ASC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span> &#123; <span class="token keyword">status</span>: <span class="token string">"A"</span> &#125; <span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span> &#123; user_id: <span class="token number">1</span> &#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/method/cursor.sort/#cursor.sort">sort()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> user_id <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span> &#123; <span class="token keyword">status</span>: <span class="token string">"A"</span> &#125; <span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span> &#123; user_id: <span class="token operator">-</span><span class="token number">1</span> &#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/method/cursor.sort/#cursor.sort">sort()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/method/cursor.count/#cursor.count">count()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span> &#123; user_id: &#123; $<span class="token keyword">exists</span>: <span class="token boolean">true</span> &#125; &#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span> &#123; user_id: &#123; $<span class="token keyword">exists</span>: <span class="token boolean">true</span> &#125; &#125; <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a>、<a href="http://docs.mongodb.org/manual/reference/method/cursor.count/#cursor.count">count()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/exists/#op._S_exists">$exists</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span> &#123; age: &#123; $gt: <span class="token number">30</span> &#125; &#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span> &#123; age: &#123; $gt: <span class="token number">30</span> &#125; &#125; <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a>、<a href="http://docs.mongodb.org/manual/reference/method/cursor.count/#cursor.count">count()</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/query/gt/#op._S_gt">$gt</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token keyword">distinct</span><span class="token punctuation">(</span> <span class="token string">"status"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.distinct/#db.collection.distinct">distinct()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">LIMIT</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>findOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a>、<a href="http://docs.mongodb.org/manual/reference/method/db.collection.findOne/#db.collection.findOne">findOne()</a> 及 <a href="http://docs.mongodb.org/manual/reference/method/cursor.limit/#cursor.limit">limit()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">LIMIT</span> <span class="token number">5</span>
SKIP <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a>、<a href="http://docs.mongodb.org/manual/reference/method/cursor.limit/#cursor.limit">limit()</a> 及 <a href="http://docs.mongodb.org/manual/reference/method/cursor.skip/#cursor.skip">skip()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span> &#123; <span class="token keyword">status</span>: <span class="token string">"A"</span> &#125; <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">explain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/#db.collection.find">find()</a> 及 <a href="http://docs.mongodb.org/manual/reference/method/cursor.explain/#cursor.explain">explain()</a> 取得更多資訊。</p>
</li>
</ul>
<h4 id="修改資料-Update-Records"><a href="#修改資料-Update-Records" class="headerlink" title="修改資料(Update Records)"></a>修改資料(Update Records)</h4><p>下面列出了關於修改現有資料表內資料的各種 SQL 語句和相應的 MongoDB 語句。</p>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> users
<span class="token keyword">SET</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"C"</span>
<span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>
　&#123; age: &#123; $gt: <span class="token number">25</span> &#125; &#125;<span class="token punctuation">,</span>
　&#123; $<span class="token keyword">set</span>: &#123; <span class="token keyword">status</span>: <span class="token string">"C"</span> &#125; &#125;<span class="token punctuation">,</span>
　&#123; multi: <span class="token boolean">true</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.update/#db.collection.update">update()</a>、<a href="http://docs.mongodb.org/manual/reference/operator/query/gt/#op._S_gt">$gt</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/update/set/#up._S_set">$set</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> users
<span class="token keyword">SET</span> age <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">3</span>
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>
　&#123; <span class="token keyword">status</span>: <span class="token string">"A"</span> &#125; <span class="token punctuation">,</span>
　&#123; $inc: &#123; age: <span class="token number">3</span> &#125; &#125;<span class="token punctuation">,</span>
　&#123; multi: <span class="token boolean">true</span> &#125;
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.update/#db.collection.update">update()</a>、<a href="http://docs.mongodb.org/manual/reference/operator/update/inc/#up._S_inc">$inc</a> 及 <a href="http://docs.mongodb.org/manual/reference/operator/update/set/#up._S_set">$set</a> 取得更多資訊。</p>
</li>
</ul>
<h4 id="刪除資料-Delete-Records"><a href="#刪除資料-Delete-Records" class="headerlink" title="刪除資料(Delete Records)"></a>刪除資料(Delete Records)</h4><p>下面列出了關於從資料表刪除資料的各種 SQL 語句和相應的 MongoDB 語句。</p>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"D"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>remove<span class="token punctuation">(</span> &#123; <span class="token keyword">status</span>: <span class="token string">"D"</span> &#125; <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.remove/#db.collection.remove">remove()</a> 取得更多資訊。</p>
</li>
</ul>
<hr>
<ul>
<li><p>SQL 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>MongoDB 架構語句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>remove<span class="token punctuation">(</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>參閱 <a href="http://docs.mongodb.org/manual/reference/method/db.collection.remove/#db.collection.remove">remove()</a> 取得更多資訊。</p>
</li>
</ul>
<p>參考資料：<a href="http://docs.mongodb.org/manual/reference/sql-comparison/">SQL to MongoDB Mapping Chart</a></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>NoSQL</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Mailboxer 實作站內信系統</title>
    <url>/2015/05/20/use-the-mailboxer-to-implement-messaging-systems/</url>
    <content><![CDATA[<p>Mailboxer 是一個 Rails gem，為 <a href="https://github.com/ging/social_stream">social_stream</a> 框架用來建立社群網路的一部分。它是具備一些通用方法的訊息系統，允許任何 model 擔任傳遞訊息的角色。</p>
<p>使用 Mailboxer，你可以與一或多個收件人建立對話（訊息會被歸納到寄件匣、收件匣及垃圾桶）並透過電子郵件發送通知。它甚至可以在不同 model 間發送訊息和附件！唯一的缺點是缺乏文件，所以我希望這邊文章是有幫助的。</p>
<p>我們要討論的範例程式為：</p>
<ul>
<li>使用 Devise 做基本身份驗證</li>
<li>使用 Gravatar 讓使用者管理頭像</li>
<li>整合 Mailboxer</li>
<li>使用圖形介面來建立／回覆對話（使用 Bootstrap 樣式及 Chosen jQuery 插件）</li>
<li>顯示資料夾，並允許在它們之間輕鬆切換</li>
<li>允許將對話標示為已讀、放到垃圾桶或還原，也可以清理垃圾桶。</li>
<li>設定電子郵件通知</li>
</ul>
<p>此範例將使用 Rails 4，但幾乎相同的解決方案也可以實作於 Rails 3.2（Mailboxer 不再支援 3.1 版）。</p>
<p>原始碼可以在 <a href="https://github.com/CalvertYang/Synergy">Github</a> 找到。</p>
<span id="more"></span>
<h1 id="前置準備"><a href="#前置準備" class="headerlink" title="前置準備"></a>前置準備</h1><p>假設我們要建立內部的私人訊息系統提供同事討論不同主旨。這個系統應該允許使用者與無數個收件人建立對話、提供通知系統並允許刪除舊的對話。</p>
<p>建立名為 Synergy 不含預設測試套件的 Rails 應用程式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails new Synergy -T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在你的 Gemfile 加入以下的 Gem（我會使用 Bootstrap，但你可以使用任何其它的 CSS 框架、自行設計或者跳過美化網站的步驟）：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>Gemfile</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
gem <span class="token string">'bootstrap-sass'</span>
gem <span class="token string">'kaminari'</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bundle <span class="token function">install</span>
$ rails generate kaminari:views bootstrap3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然後加入 Bootstrap 檔案：</p>
<pre class="line-numbers language-scss" data-language="scss"><div class="caption"><span>app/assets/stylesheets/application.scss</span></div><code class="language-scss"><span class="token keyword">@import</span> <span class="token string">"bootstrap-sprockets"</span><span class="token punctuation">;</span>
<span class="token keyword">@import</span> <span class="token string">"bootstrap"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><div class="caption"><span>app/assets/javascripts/application.js</span></div><code class="language-js"><span class="token comment">//= require bootstrap-sprockets</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著調整 layout：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/layouts/application.html.erb</span></div><code class="language-erb">[...]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> flash<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>key<span class="token punctuation">,</span> value<span class="token operator">|</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> key <span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> value <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> <span class="token keyword">yield</span> <span class="token symbol">:page_header</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> <span class="token keyword">yield</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>讓我們新增 helper 來方便呈現頁面標題：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/helpers/application_helper.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">page_header</span></span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
  content_for<span class="token punctuation">(</span><span class="token symbol">:page_header</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> text<span class="token punctuation">.</span>to_s <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="身份驗證"><a href="#身份驗證" class="headerlink" title="身份驗證"></a>身份驗證</h2><p>實作訊息功能之前，我們需要一個 model 來傳遞訊息。建立 User model：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails g model User name:string
$ rake db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你可以使用任何類型的身份驗證，但我喜歡 <a href="https://github.com/plataformatec/devise/">Devise</a>。Devise 的基本設定非常簡單，並有<a href="https://github.com/plataformatec/devise/wiki">大量文件</a>協助您進一步自訂設定。</p>
<p>加入新的 gem：</p>
<pre class="line-numbers language-rb" data-language="rb"><div class="caption"><span>Gemfile</span></div><code class="language-rb"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
gem <span class="token string">'devise'</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>並安裝它：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bundle <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>現在，我們可以利用 Devise 的產生器來幫我們做一些工作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails generate devise:install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>請務必閱讀安裝後的訊息來完成一些額外的步驟。具體來說，你需要為 development 和 production 調整 <code>config.action_mailer.default_url_options</code> 設定，因為它會被用來發送郵件給使用者（例如，幫助他們恢復遺忘的密碼）。<br>請注意，電子郵件在 development 時不會發送，除非你在 <code>config/environments/development.rb</code> 設定 <code>config.action_mailer.perform_deliveries = true</code>。</p>
<p>這裡有關於如何設定 ActionMailer 的<a href="http://guides.rubyonrails.org/action_mailer_basics.html#example-action-mailer-configuration">一些範例</a>。</p>
<p>當你準備好後，執行以下指令使用 Devise 建立 User model：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails generate devise User
$ rake db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你可能想要在套用變更前檢查指令產生的遷移檔，並加入更多欄位到資料表（啟用 Confirmable 或 Lockable 模組）。你還需要調整 model 內相應的設定。</p>
<p>最後，執行以下指令來複製 Devise 的 views 到你的專案，以便稍作修改：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails generate devise:views<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要能夠讓使用者變更他們的名字，所以新增一個欄位到註冊表單：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/devise/registrations/new.html.erb</span></div><code class="language-erb">[...]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> f<span class="token punctuation">.</span>label <span class="token symbol">:name</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> f<span class="token punctuation">.</span>text_field <span class="token symbol">:name</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同樣的將此欄位加入 <code>app/views/devise/registrations/edit.html.erb</code>（或者將它重構為 partial），讓使用者可以在註冊時提供名字，並在稍後編輯它。</p>
<p>由於 Rails 4 引進了新的保護機制 Strong Parameters，需要設定允許 <code>:name</code> 參數可以傳遞：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/application_controller.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
before_action <span class="token symbol">:configure_permitted_parameters</span><span class="token punctuation">,</span> <span class="token keyword">if</span><span class="token punctuation">:</span> <span class="token symbol">:devise_controller?</span>

<span class="token keyword">protected</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">configure_permitted_parameters</span></span>
    devise_parameter_sanitizer<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token symbol">:sign_up</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token symbol">:name</span>
    devise_parameter_sanitizer<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token symbol">:account_update</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token symbol">:name</span>
  <span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>devise_controller?</code>方法是由 Devise 提供。在這裡，我們允許建立及編輯帳號時傳遞 <code>:name</code> 屬性。如果你忘了這樣做，使用者將無法設定自己的名字。</p>
<p>此時，你也可以修改 view 的樣式。我不會涵蓋這一步驟，因為它不是太難且高度依賴於你的設定（無論你是不是使用 Bootstrap）。如果你決定使用 Bootstrap，Devise 所產生的訊息將不會有樣式。為了解決這個問題，使用 SASS <code>@extend</code> 方法，如下：</p>
<pre class="line-numbers language-scss" data-language="scss"><div class="caption"><span>app/assets/stylesheets/application.scss</span></div><code class="language-scss"><span class="token selector">[...]
.alert-notice </span><span class="token punctuation">&#123;</span>
  <span class="token keyword">@extend</span> .alert-success<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.alert-alert </span><span class="token punctuation">&#123;</span>
  <span class="token keyword">@extend</span> .alert-warning<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="整合-Mailboxer"><a href="#整合-Mailboxer" class="headerlink" title="整合 Mailboxer"></a>整合 Mailboxer</h1><p>太好了，我們準備進行主要的任務－整合及設定 Mailboxer。</p>
<p>首先，加入新的 gem：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>Gemfile</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
gem <span class="token string">'mailboxer'</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>並安裝它：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bundle <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>產生和套用所有必要的遷移並建立初始化檔案：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails generate mailboxer:install
$ rake db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>查看 <code>config/initializers/mailboxer.rb</code> 檔案看你能修改哪些選項。現在，先維持檔案內的設定，稍後我們會設定寄送電子郵件通知。</p>
<p>需要稍作調整 model 來配置 Mailboxer 的功能：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/models/user.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
acts_as_messageable
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="顯示對話"><a href="#顯示對話" class="headerlink" title="顯示對話"></a>顯示對話</h2><p>如<a href="https://github.com/mailboxer/mailboxer/wiki/GUI-Example-on-a-real-application">指南</a>所建議，為 Mailboxer 建立圖形介面的最佳方法是建立兩個 controller：一個用於訊息，一個用於對話。獨立的訊息會被歸類為對話。稍後，你會看到對話可以是不同類型。</p>
<p>首先建立對話 controller：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails generate controller conversations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/conversations_controller.rb</span></div><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ConversationsController</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationController</span>
  before_action <span class="token symbol">:authenticate_user!</span>
  before_action <span class="token symbol">:get_mailbox</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span>
    <span class="token variable">@conversations</span> <span class="token operator">=</span> <span class="token variable">@mailbox</span><span class="token punctuation">.</span>inbox<span class="token punctuation">.</span>page<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:page</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_mailbox</span></span>
      <span class="token variable">@mailbox</span> <span class="token operator">||</span><span class="token operator">=</span> current_user<span class="token punctuation">.</span>mailbox
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每個使用者都有自己的信箱，反過來說，又分為收件匣、寄件匣及垃圾桶。目前，我們先關注在收件匣就好。</p>
<p><code>authenticate_user!</code>是 Devise 的一部分。我們只希望通過驗證的使用者存取應用程式，因此它設定為 <code>before_action</code>。如果使用者沒有通過驗證，他將被導向到登入頁面。</p>
<p>如你所見，我也使用了 <code>kaminari</code> 所提供的 <code>page</code> 方法。</p>
<p>新增路由（其它 controller 方法很快就會加入）：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>config/routes.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
resources <span class="token symbol">:conversations</span><span class="token punctuation">,</span> only<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:show</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>並修改 view：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/index.html.erb</span></div><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> page_header <span class="token string">"Your Conversations"</span> <span class="token delimiter punctuation">%></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render partial<span class="token punctuation">:</span> <span class="token string">'conversations/conversation'</span><span class="token punctuation">,</span> collection<span class="token punctuation">:</span> <span class="token variable">@conversations</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> paginate <span class="token variable">@conversations</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>page_header</code> 是我們先前建立的 helper 方法。<code>paginate</code> 會顯示分頁控制項（只有超過一頁時會顯示）。</p>
<p>我們必須指定 <code>partial</code> 參數，因為 <code>@conversations</code> 是 <code>Mailboxer::Conversation::ActiveRecord_Relation</code> 的一個實例，因此 Rails 預設會在 <code>mailboxer/conversations</code> 目錄尋找 <code>_conversation</code>。</p>
<p>新增 partial：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/_conversation.html.erb</span></div><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to conversation<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>每個對話都有一個主旨和一些將被顯示於頁面上的訊息。</p>
<p>新增選單到 layout：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/layouts/application.html.erb</span></div><code class="language-erb">[...]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar navbar-inverse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Synergy'</span><span class="token punctuation">,</span> root_path<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'navbar-brand'</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">if</span> user_signed_in<span class="token operator">?</span> <span class="token delimiter punctuation">%></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Edit Profile'</span><span class="token punctuation">,</span> edit_user_registration_path <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Your Conversations'</span><span class="token punctuation">,</span> conversations_path <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Log Out'</span><span class="token punctuation">,</span> destroy_user_session_path<span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:delete</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">else</span> <span class="token delimiter punctuation">%></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Log In'</span><span class="token punctuation">,</span> new_user_session_path <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>user_signed_in?</code> 方法以及大部分的路由都是由 Devise 提供。</p>
<p>接下來是 show 動作：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/conversations_controller.rb</span></div><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ConversationsController</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationController</span>
  before_action <span class="token symbol">:authenticate_user!</span>
  before_action <span class="token symbol">:get_mailbox</span>
  before_action <span class="token symbol">:get_conversation</span><span class="token punctuation">,</span> except<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">]</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span>
    <span class="token variable">@conversations</span> <span class="token operator">=</span> <span class="token variable">@mailbox</span><span class="token punctuation">.</span>inbox<span class="token punctuation">.</span>page<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:page</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">show</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_mailbox</span></span>
      <span class="token variable">@mailbox</span> <span class="token operator">||</span><span class="token operator">=</span> current_user<span class="token punctuation">.</span>mailbox
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_conversation</span></span>
      <span class="token variable">@conversation</span> <span class="token operator">||</span><span class="token operator">=</span> <span class="token variable">@mailbox</span><span class="token punctuation">.</span>conversations<span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你可能知道，當查詢不到資料時會拋出例外錯誤。這就是我們想要的，但是應該要處理例外錯誤。為了簡單起見，我們使用 <code>rescue_from</code> 方法：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/application_controller.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
rescue_from <span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">RecordNotFound</span> <span class="token keyword">do</span>
  flash<span class="token punctuation">[</span><span class="token symbol">:warning</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Resource not found.'</span>
  redirect_back_or root_path
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">redirect_back_or</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  redirect_to request<span class="token punctuation">.</span>referer <span class="token operator">||</span> path
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們只是將使用者導向並顯示警告訊息。如果 <code>referer</code> 欄位沒有設定（例如，使用者安裝了插件清除此欄位），他們會被導向到 <code>root_path</code>。</p>
<p>接著，編輯 view：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/show.html.erb</span></div><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> page_header <span class="token string">"Conversation"</span> <span class="token delimiter punctuation">%></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>panel panel-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> <span class="token variable">@conversation</span><span class="token punctuation">.</span>subject <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token variable">@conversation</span><span class="token punctuation">.</span>receipts_for<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>receipt<span class="token operator">|</span> <span class="token delimiter punctuation">%></span></span>
        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> message <span class="token operator">=</span> receipt<span class="token punctuation">.</span>message <span class="token delimiter punctuation">%></span></span>

        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> message<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>name <span class="token delimiter punctuation">%></span></span>
          says at <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> message<span class="token punctuation">.</span>created_at<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%F %T"</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>
        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> message<span class="token punctuation">.</span>body <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們呈現了每個訊息的寄件者的名字、建立時間及訊息內容。讓我們來修改一下 <code>.messages</code> 容器的樣式，讓它不要變得太高：</p>
<pre class="line-numbers language-scss" data-language="scss"><div class="caption"><span>app/assets/stylesheets/application.scss</span></div><code class="language-scss"><span class="token selector">[...]
.messages </span><span class="token punctuation">&#123;</span>
  <span class="token property">max-height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
  <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不錯，一些基本的 view 都已經存在了。然而，我們還缺乏了一些重要的東西：</p>
<ul>
<li>使用者應該知道在和誰對話</li>
<li>使用者需要可以建立新的對話</li>
<li>使用者需要可以回覆對話</li>
<li>寄件匣和垃圾桶應該顯示在對話頁面</li>
<li>使用者應該能將對話標示為已讀</li>
</ul>
<hr>
<h2 id="顯示使用者頭像"><a href="#顯示使用者頭像" class="headerlink" title="顯示使用者頭像"></a>顯示使用者頭像</h2><p>雖然這和 Mailboxer 無關，我認為顯示頭像會讓我們的應用程式看起來更漂亮。然而，允許使用者直接上傳頭像到應用程式有點小題大作，讓我們使用 <a href="http://gravatar.com/">Gravatar</a> 並透過 <a href="https://github.com/mdeering/gravatar_image_tag">gravatar_image_tag</a> 整合到 Rails。</p>
<p>加入新的 gem：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>Gemfile</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
gem <span class="token string">'gravatar_image_tag'</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>並執行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bundle <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同樣的，新增 helper 來方便呈現頭像：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/helpers/application_helper.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">gravatar_for</span></span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> title <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  image_tag gravatar_image_url<span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> title<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'img-rounded'</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>建立單獨的 partial 來呈現對話內收件人的頭像（除了目前的使用者）：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/_participants.html.erb</span></div><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> conversation<span class="token punctuation">.</span>participants<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>participant<span class="token operator">|</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">unless</span> participant <span class="token operator">==</span> current_user <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> gravatar_for participant <span class="token delimiter punctuation">%></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>編輯以下的 view：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/show.html.erb</span></div><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> page_header <span class="token string">"Conversation"</span> <span class="token delimiter punctuation">%></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Chatting with
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render <span class="token string">'conversations/participants'</span><span class="token punctuation">,</span> conversation<span class="token punctuation">:</span> <span class="token variable">@conversation</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>panel panel-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> <span class="token variable">@conversation</span><span class="token punctuation">.</span>subject <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token variable">@conversation</span><span class="token punctuation">.</span>receipts_for<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>receipt<span class="token operator">|</span> <span class="token delimiter punctuation">%></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> message <span class="token operator">=</span> receipt<span class="token punctuation">.</span>message <span class="token delimiter punctuation">%></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> gravatar_for message<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>name <span class="token delimiter punctuation">%></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> message<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>name <span class="token delimiter punctuation">%></span></span>
              says at <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> message<span class="token punctuation">.</span>created_at<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%F %T"</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>
            <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> message<span class="token punctuation">.</span>body <span class="token delimiter punctuation">%></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/_conversation.html.erb</span></div><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to conversation<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render <span class="token string">'conversations/participants'</span><span class="token punctuation">,</span> conversation<span class="token punctuation">:</span> conversation <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>顯示對話內最後一則訊息及它的建立時間：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/_conversation.html.erb</span></div><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to conversation<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render <span class="token string">'conversations/participants'</span><span class="token punctuation">,</span> conversation<span class="token punctuation">:</span> conversation <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> conversation<span class="token punctuation">.</span>last_message<span class="token punctuation">.</span>body <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> conversation<span class="token punctuation">.</span>last_message<span class="token punctuation">.</span>created_at<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%F %T"</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們已經完成頭像了。是時候讓使用者建立新的對話。</p>
<hr>
<h2 id="建立對話"><a href="#建立對話" class="headerlink" title="建立對話"></a>建立對話</h2><p>建立對話實際上意味著建立帶有主旨的新訊息（雖然這是可選的）。這表示需要新的 controller：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails generate controller messages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/messages_controller.rb</span></div><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MessagesController</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationController</span>
  before_action <span class="token symbol">:authenticate_user!</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">new</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    recipients <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>where<span class="token punctuation">(</span>id<span class="token punctuation">:</span> params<span class="token punctuation">[</span><span class="token string">'recipients'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    conversation <span class="token operator">=</span> current_user<span class="token punctuation">.</span>send_message<span class="token punctuation">(</span>recipients<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token symbol">:message</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token symbol">:body</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token symbol">:message</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token symbol">:subject</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>conversation
    flash<span class="token punctuation">[</span><span class="token symbol">:success</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Message has been sent!"</span>
    redirect_to conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 create 動作內，尋找收件人（存放在 params[‘recipients’] 中）並利用 Mailboxer 的 <code>send_message</code> 方法，傳入收件人、訊息和主旨。稍後，我們將啟用電子郵件通知，以便讓使用者知道收到新訊息了。</p>
<p>現在來編輯 view：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/messages/new.html.erb</span></div><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> page_header <span class="token string">"Start Conversation"</span> <span class="token delimiter punctuation">%></span></span>

<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form_tag messages_path<span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:post</span> <span class="token keyword">do</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> label_tag <span class="token string">'message[subject]'</span><span class="token punctuation">,</span> <span class="token string">'Subject'</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> text_field_tag <span class="token string">'message[subject]'</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'form-control'</span><span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> label_tag <span class="token string">'message[body]'</span><span class="token punctuation">,</span> <span class="token string">'Message'</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> text_area_tag <span class="token string">'message[body]'</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> cols<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'form-control'</span><span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> label_tag <span class="token string">'recipients'</span><span class="token punctuation">,</span> <span class="token string">'Choose recipients'</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> select_tag <span class="token string">'recipients'</span><span class="token punctuation">,</span> recipients_options<span class="token punctuation">,</span> multiple<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'form-control'</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> submit_tag <span class="token string">'Send'</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-primary'</span> <span class="token delimiter punctuation">%></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>recipients_options</code> 是 helper 方法，我們需要建立它：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/helpers/messages_helper.rb</span></div><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">MessagesHelper</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">recipients_options</span></span>
    options_for_select<span class="token punctuation">(</span><span class="token constant">User</span><span class="token punctuation">.</span>all<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token operator">|</span>user<span class="token operator">|</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>別忘了設定路由：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>config/routes.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
resources <span class="token symbol">:messages</span><span class="token punctuation">,</span> only<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:new</span><span class="token punctuation">,</span> <span class="token symbol">:create</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接著在 <code>conversations#index</code> 頁面顯示「Start conversation」連結：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/index.html.erb</span></div><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> page_header <span class="token string">"Your Conversations"</span> <span class="token delimiter punctuation">%></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Start conversation'</span><span class="token punctuation">,</span> new_message_path<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-lg btn-primary'</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>技術上來說，一切都已經就緒可以發佈你的第一則訊息。你可以傳遞給自己或是註冊另一個帳號來模擬有兩個使用者的情況。</p>
<p>然而，選擇收件人不是很方便。目前，已經呈現了基本的選擇欄位，但如果有很多使用者時，要在列表中找到某個人是很麻煩的。我們可以使用 <a href="https://harvesthq.github.io/chosen/">Chosen</a> 來強化這個欄位，它是讓下拉選單更加人性化的一個 jQuery 插件。有個 <a href="https://github.com/tsechingho/chosen-rails">chosen-rails</a> gem 可以輕鬆的將此插件整合到 Rails 應用程式。</p>
<p>將這個 gem 加到 Gemfile：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>Gemfile</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
gem <span class="token string">'chosen-rails'</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我也指定了 <code>sass-rails</code> 與 <code>coffee-rails</code> 的版本，因為有與 application.scss 檔案相關的 <a href="https://github.com/rails/sass-rails/issues/85">bug</a>：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>Gemfile</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
gem <span class="token string">'sass-rails'</span><span class="token punctuation">,</span> <span class="token string">'~> 4.0.5'</span>
gem <span class="token string">'coffee-rails'</span><span class="token punctuation">,</span> <span class="token string">'~> 4.1.0'</span>
gem <span class="token string">'jquery-turbolinks'</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同時也使用了 <a href="https://github.com/kossnocorp/jquery.turbolinks">jquery-turbolinks</a> gem，當使用 Turbolinks 時可恢復預設的 jQuery page load 事件。</p>
<p>別忘了執行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bundle <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然後將 Chosen 加到 <code>application.js</code> 和 <code>application.scss</code>：</p>
<pre class="line-numbers language-js" data-language="js"><div class="caption"><span>app/assets/javascripts/application.js</span></div><code class="language-js"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token comment">//= require jquery.turbolinks</span>
<span class="token comment">//= require chosen-jquery</span>
<span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-scss" data-language="scss"><div class="caption"><span>app/assets/stylesheets/application.scss</span></div><code class="language-scss">[...]
<span class="token keyword">@import</span> <span class="token string">"chosen"</span><span class="token punctuation">;</span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接著將 <code>.chosen-it</code> 類別加到我們的 select 標籤：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/messages/new.html.erb</span></div><code class="language-erb">[...]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> label_tag <span class="token string">'recipients'</span><span class="token punctuation">,</span> <span class="token string">'Choose recipients'</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> select_tag <span class="token string">'recipients'</span><span class="token punctuation">,</span> recipients_options<span class="token punctuation">,</span> multiple<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'form-control chosen-it'</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>並將所有此類別的元素都裝上 Chosen 的功能：</p>
<pre class="line-numbers language-coffee" data-language="coffee"><div class="caption"><span>app/assets/javascripts/messages.coffee</span></div><code class="language-coffee">$ -&gt;
  $(&#39;.chosen-it&#39;).chosen()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>現在重載伺服器，到 conversations/new 頁面，會發現嶄新的 select 標籤。這用起來更加方便，不是嗎？</p>
<p>我們可以更進一步的在 select 標籤內使用者名字前顯示頭像。有個 Chosen 的擴充插件 <a href="https://github.com/websemantics/Image-Select">Image-Select</a>。只要將 <a href="https://github.com/websemantics/Image-Select/blob/master/ImageSelect.jquery.js">ImageSelect.jquery.js</a> 和 <a href="https://github.com/websemantics/Image-Select/blob/master/ImageSelect.css">ImageSelect.css</a> 放到你的專案並分別在 application.js 和 application.scss 引入。然後，稍微修改 helper 方法：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/helpers/messages_helper.rb</span></div><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">MessagesHelper</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">recipients_options</span></span>
    options_for_select<span class="token punctuation">(</span><span class="token constant">User</span><span class="token punctuation">.</span>all<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token operator">|</span>user<span class="token operator">|</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'data-img-src'</span> <span class="token operator">=</span><span class="token operator">></span> gravatar_image_url<span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著再重載伺服器並確認成果。非常棒！</p>
<hr>
<h2 id="回覆對話"><a href="#回覆對話" class="headerlink" title="回覆對話"></a>回覆對話</h2><p>現在，使用者可以建立對話，但是沒有辦法回覆！為了解決這個問題，我們需要另一個表單及 controller 方法，以及新的路由：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/show.html.erb</span></div><code class="language-erb">[...]
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form_tag reply_conversation_path<span class="token punctuation">(</span><span class="token variable">@conversation</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:post</span> <span class="token keyword">do</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> text_area_tag <span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> cols<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'form-control'</span><span class="token punctuation">,</span> placeholder<span class="token punctuation">:</span> <span class="token string">'Type something...'</span><span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> submit_tag <span class="token string">"Send Message"</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-primary'</span> <span class="token delimiter punctuation">%></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>註：你也可以加入另一個文字欄位讓使用者新增主旨。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/conversations_controller.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">reply</span></span>
  current_user<span class="token punctuation">.</span>reply_to_conversation<span class="token punctuation">(</span><span class="token variable">@conversation</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token symbol">:body</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  flash<span class="token punctuation">[</span><span class="token symbol">:success</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Reply sent'</span>
  redirect_to conversation_path<span class="token punctuation">(</span><span class="token variable">@conversation</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Mailboxer 的 <code>reply_to_conversation</code> 方法讓回覆對話變得很輕鬆。它接受對話的回覆訊息、主旨（可選）及些許其他的參數。需要注意的是，如果對話被移動到垃圾桶（我們將在稍後處理），預設會被復原。可以去看看原始碼取得更多資訊。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>config/routes.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
resources <span class="token symbol">:conversations</span><span class="token punctuation">,</span> only<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:show</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span> <span class="token keyword">do</span>
  member <span class="token keyword">do</span>
    post <span class="token symbol">:reply</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>很好，基本的聊天系統已可啟動並執行！</p>
<hr>
<h2 id="實作寄件匣及垃圾桶"><a href="#實作寄件匣及垃圾桶" class="headerlink" title="實作寄件匣及垃圾桶"></a>實作寄件匣及垃圾桶</h2><p>目前，我們只有顯示使用者的收件匣。然而，顯示寄件匣與垃圾桶是個好主意。</p>
<p>也許要決定該顯示哪個資料夾最簡單的方式是使用 GET 參數，所以讓我們來調整 controller：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/conversations_controller.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
before_action <span class="token symbol">:get_box</span><span class="token punctuation">,</span> only<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:inbox</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span>
  <span class="token keyword">if</span> <span class="token variable">@box</span><span class="token punctuation">.</span>eql<span class="token operator">?</span> <span class="token string">"inbox"</span>
    <span class="token variable">@conversations</span> <span class="token operator">=</span> <span class="token variable">@mailbox</span><span class="token punctuation">.</span>inbox
  <span class="token keyword">elsif</span> <span class="token variable">@box</span><span class="token punctuation">.</span>eql<span class="token operator">?</span> <span class="token string">"sent"</span>
    <span class="token variable">@conversations</span> <span class="token operator">=</span> <span class="token variable">@mailbox</span><span class="token punctuation">.</span>sentbox
  <span class="token keyword">else</span>
    <span class="token variable">@conversations</span> <span class="token operator">=</span> <span class="token variable">@mailbox</span><span class="token punctuation">.</span>trash
  <span class="token keyword">end</span>

  <span class="token variable">@conversations</span> <span class="token operator">=</span> <span class="token variable">@conversations</span><span class="token punctuation">.</span>page<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:page</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>

<span class="token keyword">private</span>

<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_box</span></span>
    <span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token symbol">:box</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blank<span class="token operator">?</span> <span class="token keyword">or</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">"inbox"</span><span class="token punctuation">,</span> <span class="token string">"sent"</span><span class="token punctuation">,</span> <span class="token string">"trash"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">include</span><span class="token operator">?</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:box</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      params<span class="token punctuation">[</span><span class="token symbol">:box</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'inbox'</span>
    <span class="token keyword">end</span>

    <span class="token variable">@box</span> <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token symbol">:box</span><span class="token punctuation">]</span>
  <span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>新的私有方法 <code>get_box</code> 用來取得所需的資料夾。</p>
<p>在 view 的地方，如果你使用的是 Bootstrap，我建議使用垂直<a href="http://getbootstrap.com/components/#nav-pills">導覽列</a>來呈現資料夾。此外，目前所在的資料夾應該被高亮。建立 helper 方法來處理這個：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/helpers/conversations_helper.rb</span></div><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">ConversationsHelper</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mailbox_section</span></span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> current_box<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    opts<span class="token punctuation">[</span><span class="token symbol">:class</span><span class="token punctuation">]</span> <span class="token operator">=</span> opts<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token symbol">:class</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    opts<span class="token punctuation">[</span><span class="token symbol">:class</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">' active'</span> <span class="token keyword">if</span> title<span class="token punctuation">.</span>downcase <span class="token operator">==</span> current_box
    content_tag <span class="token symbol">:li</span><span class="token punctuation">,</span> link_to<span class="token punctuation">(</span>title<span class="token punctuation">.</span>capitalize<span class="token punctuation">,</span> conversations_path<span class="token punctuation">(</span>box<span class="token punctuation">:</span> title<span class="token punctuation">.</span>downcase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opts
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這個方法需要連結的標題（也會被用於 GET 的參數）、目前開啟的資料夾及要直接傳遞給 <code>content_tag</code> 方法的 hash 格式選項。然後檢查 <code>opts</code> 是否已有類別的屬性。沒有的話就設為空字串，並在目前的資料夾的類別附加 <code>active</code> 類別。</p>
<p>修改 view：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/index.html.erb</span></div><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> page_header <span class="token string">"Your Conversations"</span> <span class="token delimiter punctuation">%></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Start conversation'</span><span class="token punctuation">,</span> new_message_path<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-lg btn-primary'</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav nav-pills nav-stacked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> mailbox_section <span class="token string">'inbox'</span><span class="token punctuation">,</span> <span class="token variable">@box</span> <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> mailbox_section <span class="token string">'sent'</span><span class="token punctuation">,</span> <span class="token variable">@box</span> <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> mailbox_section <span class="token string">'trash'</span><span class="token punctuation">,</span> <span class="token variable">@box</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render partial<span class="token punctuation">:</span> <span class="token string">'conversations/conversation'</span><span class="token punctuation">,</span> collection<span class="token punctuation">:</span> <span class="token variable">@conversations</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> paginate <span class="token variable">@conversations</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下一步是在每個尚未丟棄到垃圾桶的對話加入「Move to trash」按鈕。對於丟棄在垃圾桶的對話，應該顯示「Restore」按鈕。</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/_conversation.html.erb</span></div><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to conversation<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-group-vertical pull-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">if</span> conversation<span class="token punctuation">.</span>is_trashed<span class="token operator">?</span><span class="token punctuation">(</span>current_user<span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Restore'</span><span class="token punctuation">,</span> restore_conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-xs btn-info'</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:post</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">else</span> <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Move to trash'</span><span class="token punctuation">,</span> conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-xs btn-danger'</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> confirm<span class="token punctuation">:</span> <span class="token string">'Are you sure?'</span> <span class="token punctuation">&#125;</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render <span class="token string">'conversations/participants'</span><span class="token punctuation">,</span> conversation<span class="token punctuation">:</span> conversation <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> conversation<span class="token punctuation">.</span>last_message<span class="token punctuation">.</span>body <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> conversation<span class="token punctuation">.</span>last_message<span class="token punctuation">.</span>created_at<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%F %T"</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>增加相應的方法：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/conversations_controller.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
  <span class="token variable">@conversation</span><span class="token punctuation">.</span>move_to_trash<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span>
  flash<span class="token punctuation">[</span><span class="token symbol">:success</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'The conversation was moved to trash.'</span>
  redirect_to conversations_path
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">restore</span></span>
  <span class="token variable">@conversation</span><span class="token punctuation">.</span>untrash<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span>
  flash<span class="token punctuation">[</span><span class="token symbol">:success</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'The conversation was restored.'</span>
  redirect_to conversations_path
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>move_to_trash</code> 和 <code>untrash</code> 是由 Mailboxer 提供的兩個方法，從命名就能知道用途。</p>
<p>修改路由：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>config/routes.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
resources <span class="token symbol">:conversations</span><span class="token punctuation">,</span> only<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:show</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span> <span class="token keyword">do</span>
  member <span class="token keyword">do</span>
    post <span class="token symbol">:reply</span>
    post <span class="token symbol">:restore</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那麼「Empty trash」按鈕呢？很簡單：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/index.html.erb</span></div><code class="language-erb">[...]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">if</span> <span class="token variable">@box</span> <span class="token operator">==</span> <span class="token string">'trash'</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Empty trash'</span><span class="token punctuation">,</span> empty_trash_conversations_path<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-danger'</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> confirm<span class="token punctuation">:</span> <span class="token string">'Are you sure?'</span> <span class="token punctuation">&#125;</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render partial<span class="token punctuation">:</span> <span class="token string">'conversations/conversation'</span><span class="token punctuation">,</span> collection<span class="token punctuation">:</span> <span class="token variable">@conversations</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> paginate <span class="token variable">@conversations</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以及相應的方法：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/conversations_controller.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
before_action <span class="token symbol">:get_conversation</span><span class="token punctuation">,</span> except<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:empty_trash</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">empty_trash</span></span>
  <span class="token variable">@mailbox</span><span class="token punctuation">.</span>trash<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>conversation<span class="token operator">|</span>
    conversation<span class="token punctuation">.</span>receipts_for<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span><span class="token punctuation">.</span>update_all<span class="token punctuation">(</span>deleted<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
  flash<span class="token punctuation">[</span><span class="token symbol">:success</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Your trash was cleaned!'</span>
  redirect_to conversations_path
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>並增加路由：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>config/routes.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
resources <span class="token symbol">:conversations</span><span class="token punctuation">,</span> only<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:show</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span> <span class="token keyword">do</span>
  member <span class="token keyword">do</span>
    post <span class="token symbol">:reply</span>
    post <span class="token symbol">:restore</span>
  <span class="token keyword">end</span>
  collection <span class="token keyword">do</span>
    delete <span class="token symbol">:empty_trash</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="將對話標示為已讀"><a href="#將對話標示為已讀" class="headerlink" title="將對話標示為已讀"></a>將對話標示為已讀</h2><p>讓我們允許使用者將對話標示為已讀。為了實作它，我們需要另外的方法、路由及按鈕：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/conversations/_conversation.html.erb</span></div><code class="language-erb">[...]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-group-vertical pull-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">if</span> conversation<span class="token punctuation">.</span>is_trashed<span class="token operator">?</span><span class="token punctuation">(</span>current_user<span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Restore'</span><span class="token punctuation">,</span> restore_conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-xs btn-info'</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:post</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">else</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Move to trash'</span><span class="token punctuation">,</span> conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-xs btn-danger'</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> confirm<span class="token punctuation">:</span> <span class="token string">'Are you sure?'</span> <span class="token punctuation">&#125;</span> <span class="token delimiter punctuation">%></span></span>

    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">if</span> conversation<span class="token punctuation">.</span>is_unread<span class="token operator">?</span><span class="token punctuation">(</span>current_user<span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Mark as read'</span><span class="token punctuation">,</span> mark_as_read_conversation_path<span class="token punctuation">(</span>conversation<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-xs btn-info'</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token symbol">:post</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊使用的 <code>is_unread?</code> 方法需要指定使用者。還有另一個相反的方法 <code>is_read?</code>。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/conversations_controller.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mark_as_read</span></span>
  <span class="token variable">@conversation</span><span class="token punctuation">.</span>mark_as_read<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span>
  flash<span class="token punctuation">[</span><span class="token symbol">:success</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'The conversation was marked as read.'</span>
  redirect_to conversations_path
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後，修改路由：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>config/routes.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
resources <span class="token symbol">:conversations</span><span class="token punctuation">,</span> only<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:show</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span> <span class="token keyword">do</span>
  member <span class="token keyword">do</span>
    post <span class="token symbol">:reply</span>
    post <span class="token symbol">:restore</span>
    post <span class="token symbol">:mark_as_read</span>
  <span class="token keyword">end</span>
  collection <span class="token keyword">do</span>
    delete <span class="token symbol">:empty_trash</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大功告成！</p>
<p>註：你還可以優化 show 動作，讓對話被開啟時自動標示為已讀！</p>
<hr>
<h2 id="電子郵件通知"><a href="#電子郵件通知" class="headerlink" title="電子郵件通知"></a>電子郵件通知</h2><p>記住，Mailboxer 可以在使用者收到訊息時寄送電子郵件通知。此功能在 initializer 中啟用：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>config/initializers/mailboxer.rb</span></div><code class="language-ruby"><span class="token constant">Mailboxer</span><span class="token punctuation">.</span>setup <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>

  <span class="token comment">#Configures if you application uses or not email sending for Notifications and Messages</span>
  config<span class="token punctuation">.</span>uses_emails <span class="token operator">=</span> <span class="token boolean">true</span>

  <span class="token comment">#Configures the default from for emails sent for Messages and Notifications</span>
  config<span class="token punctuation">.</span>default_from <span class="token operator">=</span> <span class="token string">"no-reply@mailboxer.com"</span>

  <span class="token comment">#Configures the methods needed by mailboxer</span>
  config<span class="token punctuation">.</span>email_method <span class="token operator">=</span> <span class="token symbol">:mailboxer_email</span>
  config<span class="token punctuation">.</span>name_method <span class="token operator">=</span> <span class="token symbol">:name</span>
  <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>config.email_method</code> 和 <code>config.name_method</code> 告訴 Mailboxer 如何分別取得電子郵件和名字。<code>name</code> 已經存在於我們的 User model，但是沒有 <code>mailboxer_email</code>。你可以嘗試改變這個值為 Devise 所提供的 <code>email</code> 方法，但是這會導致一個錯誤，因為 Mailboxer 會傳遞參數給它，包含收到的訊息。所以有兩個選擇，一個是重新定義此方法，或是建立一個新的。我會選擇第二個選項：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/models/user.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mailboxer_email</span></span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
  email
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>電子郵件通知已經啟用了（請確定有依照先前的指示設定 ActionMailer。另外，不要忘記，電子郵件在 development 時預設是不會發送的。）</p>
<hr>
<h2 id="補充：如何新增按鈕來寄送訊息給指定使用者"><a href="#補充：如何新增按鈕來寄送訊息給指定使用者" class="headerlink" title="補充：如何新增按鈕來寄送訊息給指定使用者"></a>補充：如何新增按鈕來寄送訊息給指定使用者</h2><p>這個功能可以很容易地完成！指定的使用者應該從「Start conversation」頁面上的下拉選單自動選取。我認為，最好的方式就是使用 GET 參數帶入指定的使用者。修改 <code>MessagesController</code> 如下：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/messages_controller.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">new</span></span>
  <span class="token variable">@chosen_recipient</span> <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>find_by<span class="token punctuation">(</span>id<span class="token punctuation">:</span> params<span class="token punctuation">[</span><span class="token symbol">:to</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_i<span class="token punctuation">)</span> <span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token symbol">:to</span><span class="token punctuation">]</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>現在，<code>@chosen_recipient</code> 會有使用者的資料或是 <code>nil</code>。</p>
<p>接著修改 view：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/messages/new.html.erb</span></div><code class="language-erb">[...]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> label_tag <span class="token string">'recipients'</span><span class="token punctuation">,</span> <span class="token string">'Choose recipients'</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> select_tag <span class="token string">'recipients'</span><span class="token punctuation">,</span> recipients_options<span class="token punctuation">(</span><span class="token variable">@chosen_recipient</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multiple<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'form-control chosen-it'</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們傳遞了 <code>@chosen_recipient</code> 給 helper 方法。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/helpers/messages_helper.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">recipients_options</span></span><span class="token punctuation">(</span>chosen_recipient <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token punctuation">)</span>
  options_for_select<span class="token punctuation">(</span><span class="token constant">User</span><span class="token punctuation">.</span>all<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token operator">|</span>user<span class="token operator">|</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'data-img-src'</span> <span class="token operator">=</span><span class="token operator">></span> gravatar_image_url<span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> chosen_recipient<span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span> <span class="token operator">?</span> <span class="token keyword">nil</span> <span class="token punctuation">:</span> chosen_recipient<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是更新後的 <code>recipients_options</code> helper 方法。將預設選取的選項帶入 <code>options_for_select</code> 的第二個參數即可！</p>
<p>基本上，這樣就完成了！為了示範如何運作，新增一個使用者清單頁面並於每個使用者後方加上「Send message」按鈕。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>config/routes.rb</span></div><code class="language-ruby"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
resources <span class="token symbol">:users</span><span class="token punctuation">,</span> only<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>建立使用者 controller：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails generate controller <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><div class="caption"><span>app/controllers/users_controller.rb</span></div><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationController</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span>
    <span class="token variable">@users</span> <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token string">'created_at DESC'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>page<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:page</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/users/index.html.erb</span></div><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> page_header <span class="token string">"Users"</span> <span class="token delimiter punctuation">%></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token variable">@users</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>user<span class="token operator">|</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> user<span class="token punctuation">.</span>name <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">unless</span> current_user <span class="token operator">==</span> user <span class="token delimiter punctuation">%></span></span>
        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Send message'</span><span class="token punctuation">,</span> new_message_path<span class="token punctuation">(</span>to<span class="token punctuation">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'btn btn-default btn-sm'</span> <span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> paginate <span class="token variable">@users</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>調整 layout 加入使用者清單頁面連結：</p>
<pre class="line-numbers language-erb" data-language="erb"><div class="caption"><span>app/views/layouts/application.html.erb</span></div><code class="language-erb">[...]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">'Users'</span><span class="token punctuation">,</span> users_path <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
[...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>到此，這個功能就完成囉！</p>
<hr>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>呼！討論了相當多，對吧？我們探討了 Mailboxer 的基本功能，包含了訊息、不同類型的對話、管理對話以及設定電子郵件通知。我們也整合了 Devise 到此應用程式並利用 Gravatar 讓頁面看起來更美觀。</p>
<p>希望本文對你有幫助。順帶一提，你可能會對 Mailboxer 維基上的<a href="https://github.com/mailboxer/mailboxer/wiki/GUI-Example-on-a-real-application">這個頁面</a>以及介紹 Mailboxer 基本功能的<a href="https://github.com/RKushnir/mailboxer-app">應用程式範例</a>有興趣。</p>
<p>資料來源：<a href="http://www.sitepoint.com/messaging-rails-mailboxer/">Messaging with Rails and Mailboxer</a></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Active Storage 概要</title>
    <url>/2018/05/18/active-storage-overview/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>Ruby on Rails Guides</strong> — <a href="http://guides.rubyonrails.org/active_storage_overview.html">Active Storage Overview</a></p>
</blockquote>
<p>Active Storage 是 Rails 5.2 所新增的功能，它可以讓你輕鬆的將檔案傳送到 <a href="https://aws.amazon.com/s3/">Amazon S3</a>、<a href="https://cloud.google.com/storage/docs/">Google Cloud Storage</a> 或 <a href="https://azure.microsoft.com/en-us/services/storage/">Microsoft Azure Storage</a> 等雲端儲存服務，並將這些檔案附加到 Active Record。</p>
<p>支援一個主要雲端儲存服務，並在其它服務中建立鏡像以實現備援機制，它也提供了用於測試或本機部署的磁碟服務，但重點還是放在雲端儲存。</p>
<p>檔案可以從伺服器上傳到雲端或直接從客戶端上傳到雲端。</p>
<span id="more"></span>

<p>閱讀本指南後，你將知道：</p>
<ul>
<li>如何附加一或多個檔案到記錄。</li>
<li>如何刪除檔案。</li>
<li>如何連結到檔案。</li>
<li>如何使用變體（variant）來轉換圖片。</li>
<li>如何產生非圖片檔案的預覽圖，如 PDF 或影片。</li>
<li>如何繞過應用程式伺服器，直接從瀏覽器上傳檔案到儲存服務。</li>
<li>如何清理測試過程中儲存的檔案。</li>
<li>如何實作對其它雲端儲存服務的支援。</li>
</ul>
<h3 id="1-什麼是-Active-Storage"><a href="#1-什麼是-Active-Storage" class="headerlink" title="1. 什麼是 Active Storage?"></a>1. 什麼是 Active Storage?</h3><p>Active Storage 方便將檔案上傳到 Amazon S3、Google Cloud Storage 或 Microsoft Azure Storage 等雲端儲存服務，並將這些檔案附加到 Active Record 物件。它配備了本機磁碟服務以進行開發和測試，並支援將檔案鏡像到次要服務以進行備份和遷移。</p>
<p>使用 Active Storage，應用程式可以透過 <a href="https://www.imagemagick.org/">ImageMagick</a> 轉換上傳圖片，產生非圖片檔案（如 PDF 或影片）的預覽圖，並從任意檔案中提取中繼資料。</p>
<h3 id="2-安裝"><a href="#2-安裝" class="headerlink" title="2. 安裝"></a>2. 安裝</h3><p>Active Storage 在應用程式資料庫中使用兩個名為 <code>active_storage_blobs</code> 和 <code>active_storage_attachments</code> 的資料表。建立新的應用程式（或將應用程式升級到 Rails 5.2），執行 <code>rails active_storage:install</code> 來產生用來建立這些資料表的遷移。使用 <code>rails db:migrate</code> 來執行遷移。</p>
<p>在 <code>config/storage.yml</code> 定義 Active Storage 服務。對應用程式使用的每個服務，提供一個名稱和必要的設定。下面的範例定義了三個名為 <code>local</code>、<code>test</code> 和 <code>amazon</code> 的服務：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">local:
  service: Disk
  root: &lt;%&#x3D; Rails.root.join(&quot;storage&quot;) %&gt;

test:
  service: Disk
  root: &lt;%&#x3D; Rails.root.join(&quot;tmp&#x2F;storage&quot;) %&gt;

amazon:
  service: S3
  access_key_id: &quot;&quot;
  secret_access_key: &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過設定 <code>Rails.application.config.active_storage.service</code> 告訴 Active Storage 要使用哪個服務。由於每個環境都可能使用不同的服務，因此建議在每個環境的基礎設定上進行。要在開發環境中使用先前範例中的磁碟服務，你可以將以下內容加到 <code>config/environments/development.rb</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># 在本機儲存檔案。</span>
config<span class="token punctuation">.</span>active_storage<span class="token punctuation">.</span>service <span class="token operator">=</span> <span class="token symbol">:local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>要在生產環境使用 Amazon S3，你可以將以下內容加到 <code>config/environments/production.rb</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># 在 Amazon S3 儲存檔案。</span>
config<span class="token punctuation">.</span>active_storage<span class="token punctuation">.</span>service <span class="token operator">=</span> <span class="token symbol">:amazon</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>繼續閱讀來取得關於內建服務轉接器（如 <code>Disk</code> 和 <code>S3</code>）及其所需設定的更多資訊。</p>
<h4 id="2-1-磁碟服務"><a href="#2-1-磁碟服務" class="headerlink" title="2.1. 磁碟服務"></a>2.1. 磁碟服務</h4><p>在 <code>config/storage.yml</code> 定義磁碟服務：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">local:
  service: Disk
  root: &lt;%&#x3D; Rails.root.join(&quot;storage&quot;) %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-Amazon-S3-服務"><a href="#2-2-Amazon-S3-服務" class="headerlink" title="2.2. Amazon S3 服務"></a>2.2. Amazon S3 服務</h4><p>在 <code>config/storage.yml</code> 定義 S3 服務：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">amazon:
  service: S3
  access_key_id: &quot;&quot;
  secret_access_key: &quot;&quot;
  region: &quot;&quot;
  bucket: &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將 <a href="https://github.com/aws/aws-sdk-ruby">aws-sdk-s3</a> gem 加到 <code>Gemfile</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">gem <span class="token string">"aws-sdk-s3"</span><span class="token punctuation">,</span> <span class="token keyword">require</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>Active Storage 的核心功能需要以下權限：<code>s3:ListBucket</code>、<code>s3:PutObject</code>、<code>s3:GetObject</code> 和 <code>s3:DeleteObject</code>。如果你設定了其它上傳選項，如 ACL 設定，則可能需要額外的權限。</p>
</blockquote>
<blockquote>
<p>如果你想使用環境變數、標準 SDK 設定檔、設定檔、IAM 實例設定檔或工作角色，則可以省略上面範例中的 <code>access_key_id</code>、<code>secret_access_key</code> 和 <code>region</code> 值。Amazon S3 服務支援 <a href="https://docs.aws.amazon.com/sdk-for-ruby/v3/developer-guide/setup-config.html">AWS SDK 文件</a>中描述的所有認證選項。</p>
</blockquote>
<h4 id="2-3-Microsoft-Azure-Storage-服務"><a href="#2-3-Microsoft-Azure-Storage-服務" class="headerlink" title="2.3. Microsoft Azure Storage 服務"></a>2.3. Microsoft Azure Storage 服務</h4><p>在 <code>config/storage.yml</code> 定義 Azure Storage 服務：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">azure:
  service: AzureStorage
  storage_account_name: &quot;&quot;
  storage_access_key: &quot;&quot;
  container: &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將 <a href="https://github.com/Azure/azure-storage-ruby">azure-storage</a> gem 加到 <code>Gemfile</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">gem <span class="token string">"azure-storage"</span><span class="token punctuation">,</span> <span class="token keyword">require</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-4-Google-Cloud-Storage-服務"><a href="#2-4-Google-Cloud-Storage-服務" class="headerlink" title="2.4. Google Cloud Storage 服務"></a>2.4. Google Cloud Storage 服務</h4><p>在 <code>config/storage.yml</code> 定義 Google Cloud Storage 服務：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">google:
  service: GCS
  credentials: &lt;%&#x3D; Rails.root.join(&quot;path&#x2F;to&#x2F;keyfile.json&quot;) %&gt;
  project: &quot;&quot;
  bucket: &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以選擇提供一個 Hash 憑證來取代密鑰路徑：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">google:
  service: GCS
  credentials:
    type: &quot;service_account&quot;
    project_id: &quot;&quot;
    private_key_id: &lt;%&#x3D; Rails.application.credentials.dig(:gcs, :private_key_id) %&gt;
    private_key: &lt;%&#x3D; Rails.application.credentials.dig(:gcs, :private_key) %&gt;
    client_email: &quot;&quot;
    client_id: &quot;&quot;
    auth_uri: &quot;https:&#x2F;&#x2F;accounts.google.com&#x2F;o&#x2F;oauth2&#x2F;auth&quot;
    token_uri: &quot;https:&#x2F;&#x2F;accounts.google.com&#x2F;o&#x2F;oauth2&#x2F;token&quot;
    auth_provider_x509_cert_url: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;oauth2&#x2F;v1&#x2F;certs&quot;
    client_x509_cert_url: &quot;&quot;
  project: &quot;&quot;
  bucket: &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將 <a href="https://github.com/GoogleCloudPlatform/google-cloud-ruby/tree/master/google-cloud-storage">google-cloud-storage</a> gem 加到 <code>Gemfile</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">gem <span class="token string">"google-cloud-storage"</span><span class="token punctuation">,</span> <span class="token string">"~> 1.8"</span><span class="token punctuation">,</span> <span class="token keyword">require</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-5-鏡像服務"><a href="#2-5-鏡像服務" class="headerlink" title="2.5. 鏡像服務"></a>2.5. 鏡像服務</h4><p>你可以透過定義鏡像服務來讓多個服務保持同步。當檔案被上傳或刪除時，它會在所有鏡像服務中完成。鏡像服務可用來幫助生產環境中服務之間的遷移。你可以開始鏡像到新服務，將現有檔案從舊服務複製到新服務，然後全力投入新服務。根據上述定義你想要使用的每項服務，從鏡像服務中引用它們。</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">s3_west_coast:
  service: S3
  access_key_id: &quot;&quot;
  secret_access_key: &quot;&quot;
  region: &quot;&quot;
  bucket: &quot;&quot;

s3_east_coast:
  service: S3
  access_key_id: &quot;&quot;
  secret_access_key: &quot;&quot;
  region: &quot;&quot;
  bucket: &quot;&quot;

production:
  service: Mirror
  primary: s3_east_coast
  mirrors:
    - s3_west_coast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>檔案由主服務提供。</p>
</blockquote>
<blockquote>
<p>與<a href="#8-%E7%9B%B4%E6%8E%A5%E4%B8%8A%E5%82%B3">直接上傳</a>功能不相容。</p>
</blockquote>
<h3 id="3-將檔案附加到記錄"><a href="#3-將檔案附加到記錄" class="headerlink" title="3. 將檔案附加到記錄"></a>3. 將檔案附加到記錄</h3><h4 id="3-1-has-one-attached"><a href="#3-1-has-one-attached" class="headerlink" title="3.1. has_one_attached"></a>3.1. has_one_attached</h4><p><code>has_one_attached</code> 指令設定了記錄和檔案間的一對一關係。每個記錄可以附加一個檔案。</p>
<p>例如，假設你的應用程式有一個 <code>User</code> 模型。如果想讓每個使用者都有一個頭像，請這樣定義 <code>User</code> 模型：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationRecord</span>
  has_one_attached <span class="token symbol">:avatar</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>你可以建立一個帶有頭像的使用者：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">SignupController</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationController</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    user <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>create<span class="token operator">!</span><span class="token punctuation">(</span>user_params<span class="token punctuation">)</span>
    session<span class="token punctuation">[</span><span class="token symbol">:user_id</span><span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">.</span>id
    redirect_to root_path
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">user_params</span></span>
      params<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token symbol">:user</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permit<span class="token punctuation">(</span><span class="token symbol">:email_address</span><span class="token punctuation">,</span> <span class="token symbol">:password</span><span class="token punctuation">,</span> <span class="token symbol">:avatar</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>呼叫 <code>avatar.attach</code> 將頭像附加到現有使用者：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Current</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatar<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:avatar</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>呼叫 <code>avatar.attached?</code> 來確定特定使用者是否有頭像：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Current</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatar<span class="token punctuation">.</span>attached<span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="3-2-has-many-attached"><a href="#3-2-has-many-attached" class="headerlink" title="3.2. has_many_attached"></a>3.2. has_many_attached</h4><p><code>has_many_attached</code> 指令設定了記錄和檔案間的一對多關係。每個記錄可以附加多個檔案。</p>
<p>例如，假設你的應用程式有一個 <code>Message</code> 模型。如果想讓每個訊息都有多張圖片，請這樣定義 <code>Message</code> 模型：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationRecord</span>
  has_many_attached <span class="token symbol">:images</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>你可以建立一則帶有多張圖片的訊息：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">MessagesController</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationController</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    message <span class="token operator">=</span> <span class="token constant">Message</span><span class="token punctuation">.</span>create<span class="token operator">!</span><span class="token punctuation">(</span>message_params<span class="token punctuation">)</span>
    redirect_to message
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">message_params</span></span>
      params<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token symbol">:message</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permit<span class="token punctuation">(</span><span class="token symbol">:title</span><span class="token punctuation">,</span> <span class="token symbol">:content</span><span class="token punctuation">,</span> images<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>呼叫 <code>images.attach</code> 將圖片附加到現有訊息：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token variable">@message</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:images</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>呼叫 <code>images.attached?</code> 來確定特定訊息是否有圖片：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token variable">@message</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span>attached<span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="3-3-附加-File-IO-物件"><a href="#3-3-附加-File-IO-物件" class="headerlink" title="3.3 附加 File/IO 物件"></a>3.3 附加 File/IO 物件</h4><p>有時候你需要附加一個不是透過 HTTP 請求傳送的檔案。例如，你可能需要附加從磁碟上產生的檔案，或從使用者提交的網址下載的檔案。你可能也想在模型測試中附加檔案。要做到這一點，至少提供包含一個開啟 IO 物件和檔案名稱的 Hash：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token variable">@message</span><span class="token punctuation">.</span>image<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">:</span> <span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">:</span> <span class="token string">'file.pdf'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果可能，最好提供內容類型。Active Storage 會嘗試從資料來確定檔案的內容類型。若辦不到，它將採用你提供的內容類型。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token variable">@message</span><span class="token punctuation">.</span>image<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">:</span> <span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">:</span> <span class="token string">'file.pdf'</span><span class="token punctuation">,</span> content_type<span class="token punctuation">:</span> <span class="token string">'application/pdf'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你未提供內容類型，且 Active Storage 無法自動確定檔案的內容類型，則預設為 application/octet-stream。</p>
<blockquote>
<p>譯者註：若使用 AJAX 來送出表單，可能會出現 <code>No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code> 的錯誤訊息，以 Amazon S3 為例，需要登入 AWS 後台修改 CORS 設定，設定範例如下：</p>
</blockquote>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CORSConfiguration</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://s3.amazonaws.com/doc/2006-03-01/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CORSRule</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AllowedOrigin</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AllowedOrigin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AllowedMethod</span><span class="token punctuation">></span></span>GET<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AllowedMethod</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxAgeSeconds</span><span class="token punctuation">></span></span>3000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxAgeSeconds</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AllowedHeader</span><span class="token punctuation">></span></span>Authorization<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AllowedHeader</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CORSRule</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CORSRule</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AllowedOrigin</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AllowedOrigin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AllowedMethod</span><span class="token punctuation">></span></span>PUT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AllowedMethod</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AllowedMethod</span><span class="token punctuation">></span></span>POST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AllowedMethod</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxAgeSeconds</span><span class="token punctuation">></span></span>3000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxAgeSeconds</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AllowedHeader</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AllowedHeader</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CORSRule</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CORSConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-刪除檔案"><a href="#4-刪除檔案" class="headerlink" title="4. 刪除檔案"></a>4. 刪除檔案</h3><p>要從模型中刪除附件，請在附件上呼叫 <code>purge</code>。如果你的應用程式有設定使用 Active Job，刪除作業可以在背景完成。刪除作業會從儲存服務中刪除 blob 和檔案。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># 同步刪除頭像和實際資源檔案。</span>
user<span class="token punctuation">.</span>avatar<span class="token punctuation">.</span>purge

<span class="token comment"># 透過 Active Job 非同步刪除相關模型和實際資源檔案。</span>
user<span class="token punctuation">.</span>avatar<span class="token punctuation">.</span>purge_later<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-檔案連結"><a href="#5-檔案連結" class="headerlink" title="5. 檔案連結"></a>5. 檔案連結</h3><p>為 blob 產生一個指向應用程式的永久連結。存取時，會返回一個重新導向到實際服務端點的連結。這種間接的方式將公開網址從實際網址分離開來，並允許例如鏡像不同服務中的附件以實現高可用性。重新導向連結的 HTTP 過期時間為 5 分鐘。</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb">url_for(user.avatar)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要建立下載連結，請使用 <code>rails_blob_&#123;path|url&#125;</code> 輔助方法。使用這個輔助方法可以讓你設定 disposition。</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb">rails_blob_path(user.avatar, disposition: "attachment")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你需要從控制器或視圖之外建立連結（背景作業、定時作業、等⋯），可以像這樣存取 rails_blob_path：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Rails</span><span class="token punctuation">.</span>application<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>url_helpers<span class="token punctuation">.</span>rails_blob_path<span class="token punctuation">(</span>user<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span> only_path<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="6-下載檔案"><a href="#6-下載檔案" class="headerlink" title="6. 下載檔案"></a>6. 下載檔案</h3><p>如果需要在伺服器端處理 blob，例如，執行分析或進一步轉換時，可以用以下方式下載 blob 並取得二進位物件：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">binary <span class="token operator">=</span> user<span class="token punctuation">.</span>avatar<span class="token punctuation">.</span>download<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>某些時候，您可能希望將其轉換為磁碟上的實體檔案，以便將檔案路徑傳遞給外部程式（如掃毒軟體、轉換程式、優化程式、壓縮程式等⋯）。在這種情況下，你可以在類別中引用 <code>ActiveStorage::Downloading</code> 模組，該模組提供了輔助方法直接下載檔案，避免將檔案儲存到記憶體中。<code>ActiveStorage::Downloading</code> 需要定義一個 <code>blob</code> 方法。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">VirusScanner</span>
  <span class="token keyword">include</span> <span class="token constant">ActiveStorage</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Downloading</span>

  attr_reader <span class="token symbol">:blob</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
    <span class="token variable">@blob</span> <span class="token operator">=</span> blob
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">scan</span></span>
    download_blob_to_tempfile <span class="token keyword">do</span> <span class="token operator">|</span>file<span class="token operator">|</span>
      system <span class="token string">'scan_virus'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>path
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>預設情況下，<code>download_blob_to_tempfile</code> 會在 <code>Dir.tmpdir</code> 中建立檔案。如果需要使用其它目錄，請在類別中覆寫 ActiveStorage::Downloading#tempdir：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">VirusScanner</span>
  <span class="token keyword">include</span> <span class="token constant">ActiveStorage</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Downloading</span>
  <span class="token comment"># ...</span>

  <span class="token keyword">private</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">tempdir</span></span>
      <span class="token string">'/path/to/tmp'</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果外部程式是獨立執行的程式，你可能也需要 <code>chmod</code> 該檔案及其目錄，因為 <code>Tempfile</code> 會將權限設定為 <code>0600</code>，其它用戶無法存取該檔案。</p>
<h3 id="7-轉換圖片"><a href="#7-轉換圖片" class="headerlink" title="7. 轉換圖片"></a>7. 轉換圖片</h3><p>要建立不同尺寸的圖片，請在 Blob 上呼叫 <code>variant</code>。你可以傳送任何 <a href="https://github.com/minimagick/minimagick">MiniMagick</a> 所支援的轉換方式到此方法。</p>
<p>要啟用轉換功能，請將 <code>mini_magick</code> gem 加到 <code>Gemfile</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">gem <span class="token string">'mini_magick'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>當瀏覽器存取不同尺寸的圖片網址時，Active Storage 會將原始的 blob 延遲轉換為指定的格式，並導向到它新的服務位置。</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> image_tag user<span class="token punctuation">.</span>avatar<span class="token punctuation">.</span>variant<span class="token punctuation">(</span>resize<span class="token punctuation">:</span> <span class="token string">"100x100"</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="8-預覽檔案"><a href="#8-預覽檔案" class="headerlink" title="8. 預覽檔案"></a>8. 預覽檔案</h3><p>一些非圖片檔案可以被預覽：也就是說，他們可以用圖片來呈現。例如，可以透過擷取第一個影格來預覽影片檔。Active Storage 內建支援預覽影片和 PDF 文件。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  &lt;% @message.files.each do |file| %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
      &lt;%= image_tag file.preview(resize: "100x100>") %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  &lt;% end %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>擷取預覽圖片需要第三方應用程式，用於影片的 <code>ffmpeg</code> 和用於 PDF 的 <code>mutool</code>。這些函式庫不是由 Rails 提供的。你必須自行安裝他們才能使用內建的預覽器。在安裝和使用第三方軟體前，請確定你了解這樣做所牽涉的許可。</p>
</blockquote>
<h3 id="9-直接上傳"><a href="#9-直接上傳" class="headerlink" title="9. 直接上傳"></a>9. 直接上傳</h3><p>Active Storage 及其包含的 JavaScript 函式庫支援從客戶端直接上傳到雲端。</p>
<h4 id="9-1-安裝直接上傳功能"><a href="#9-1-安裝直接上傳功能" class="headerlink" title="9.1. 安裝直接上傳功能"></a>9.1. 安裝直接上傳功能</h4><ol>
<li>在應用程式的 JavaScript 封裝載入 <code>activestorage.js</code>。<br>使用 Asset Pipeline：</li>
</ol>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//= require activestorage</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  使用 npm 套件：</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ActiveStorage <span class="token keyword">from</span> <span class="token string">"activestorage"</span>
ActiveStorage<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>在檔案輸入欄位中註記直接上傳。</li>
</ol>
  <pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form<span class="token punctuation">.</span>file_field <span class="token symbol">:attachments</span><span class="token punctuation">,</span> multiple<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> direct_upload<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>就是這樣！在表單提交後會開始上傳檔案。</li>
</ol>
<h4 id="9-2-直接上傳功能的-JavaScript-事件"><a href="#9-2-直接上傳功能的-JavaScript-事件" class="headerlink" title="9.2. 直接上傳功能的 JavaScript 事件"></a>9.2. 直接上傳功能的 JavaScript 事件</h4><table>
<thead>
<tr>
<th>事件名稱</th>
<th>事件目標</th>
<th>事件資料（<code>event.detail</code>）</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>direct-uploads:start</code></td>
<td><code>&lt;form&gt;</code></td>
<td>無</td>
<td>已提交包含直接上傳欄位的表單。</td>
</tr>
<tr>
<td><code>direct-upload:initialize</code></td>
<td><code>&lt;input&gt;</code></td>
<td><code>&#123;id, file&#125;</code></td>
<td>表單提交後，處理每個檔案。</td>
</tr>
<tr>
<td><code>direct-upload:start</code></td>
<td><code>&lt;input&gt;</code></td>
<td><code>&#123;id, file&#125;</code></td>
<td>開始直接上傳。</td>
</tr>
<tr>
<td><code>direct-upload:before-blob-request</code></td>
<td><code>&lt;input&gt;</code></td>
<td><code>&#123;id, file, xhr&#125;</code></td>
<td>向你的應用程式請求直接上傳中繼資料之前。</td>
</tr>
<tr>
<td><code>direct-upload:before-storage-request</code></td>
<td><code>&lt;input&gt;</code></td>
<td><code>&#123;id, file, xhr&#125;</code></td>
<td>請求儲存檔案之前。</td>
</tr>
<tr>
<td><code>direct-upload:progress</code></td>
<td><code>&lt;input&gt;</code></td>
<td><code>&#123;id, file, progress&#125;</code></td>
<td>請求儲存檔案的進度。</td>
</tr>
<tr>
<td><code>direct-upload:error</code></td>
<td><code>&lt;input&gt;</code></td>
<td><code>&#123;id, file, error&#125;</code></td>
<td>發生錯誤。除非此事件被取消，否則將顯示<code>提醒</code>。</td>
</tr>
<tr>
<td><code>direct-upload:end</code></td>
<td><code>&lt;input&gt;</code></td>
<td><code>&#123;id, file&#125;</code></td>
<td>直接上傳已結束。</td>
</tr>
<tr>
<td><code>direct-uploads:end</code></td>
<td><code>&lt;form&gt;</code></td>
<td>無</td>
<td>所有直接上傳都已結束。</td>
</tr>
</tbody></table>
<h4 id="9-3-範例"><a href="#9-3-範例" class="headerlink" title="9.3. 範例"></a>9.3. 範例</h4><p>你可以使用這些事件來顯示上傳的進度。</p>
<img src="/2018/05/18/active-storage-overview/direct-uploads.gif" class="" title="直接上傳">

<p>在表單內顯示上傳的檔案：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// direct_uploads.js</span>

<span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"direct-upload:initialize"</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> target<span class="token punctuation">,</span> detail <span class="token punctuation">&#125;</span> <span class="token operator">=</span> event
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> file <span class="token punctuation">&#125;</span> <span class="token operator">=</span> detail
  target<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">"beforebegin"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div id="direct-upload-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" class="direct-upload direct-upload--pending">
      &lt;div id="direct-upload-progress-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" class="direct-upload__progress" style="width: 0%">&lt;/div>
      &lt;span class="direct-upload__filename"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span>
    &lt;/div>
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"direct-upload:start"</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>detail
  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">direct-upload-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"direct-upload--pending"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"direct-upload:progress"</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> progress <span class="token punctuation">&#125;</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>detail
  <span class="token keyword">const</span> progressElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">direct-upload-progress-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  progressElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>progress<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">%</span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"direct-upload:error"</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> error <span class="token punctuation">&#125;</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>detail
  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">direct-upload-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"direct-upload--error"</span><span class="token punctuation">)</span>
  element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"direct-upload:end"</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>detail
  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">direct-upload-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"direct-upload--complete"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>加上樣式：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* direct_uploads.css */</span>

<span class="token selector">.direct-upload</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 2px 4px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 3px 3px 0<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 11px<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 13px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.direct-upload--pending</span> <span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.6<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.direct-upload__progress</span> <span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.2<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #0076ff<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> width 120ms ease-out<span class="token punctuation">,</span> opacity 60ms 60ms ease-in<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.direct-upload--complete .direct-upload__progress</span> <span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.4<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.direct-upload--error</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">input[type=file][data-direct-upload-url][disabled]</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="9-4-與函式庫或框架整合"><a href="#9-4-與函式庫或框架整合" class="headerlink" title="9.4. 與函式庫或框架整合"></a>9.4. 與函式庫或框架整合</h4><p>如果你想從 JavaScript 框架中使用直接上傳功能，或者想要整合自訂的拖放解決方案，可以使用 <code>DirectUpload</code> 類別來達成此目的。當從你的函式庫收到選擇的檔案後，實例化一個 DirectUpload 並呼叫它的 create 方法。當上傳完成時，create 會調用 callback。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DirectUpload <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"activestorage"</span>

<span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type=file]'</span><span class="token punctuation">)</span>

<span class="token comment">// 綁定到檔案放置 - 在父元素上使用 ondrop 或使用 Dropzone 之類的函式庫</span>
<span class="token keyword">const</span> <span class="token function-variable function">onDrop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">;</span>
  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=></span> <span class="token function">uploadFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 綁定到正常的檔案選取</span>
input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=></span> <span class="token function">uploadFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 你可以從輸入欄位清除選定的檔案</span>
  input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> uploadFile <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 表單的檔案輸入欄位需要 direct_upload: true，它提供了 data-direct-upload-url</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> input<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>directUploadUrl
  <span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectUpload</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

  upload<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> blob</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 錯誤處理</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 將適當名稱且值為 blob.signed_id 的隱藏輸入欄位加到表單中，以便 blob id 可以在</span>
      <span class="token comment">// 正常上傳流程中被傳送</span>
      <span class="token keyword">const</span> hiddenField <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>
      hiddenField<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"hidden"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      hiddenField<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> blob<span class="token punctuation">.</span>signed_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      hiddenField<span class="token punctuation">.</span>name <span class="token operator">=</span> input<span class="token punctuation">.</span>name
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>hiddenField<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果你需要追蹤檔案上傳進度，可以傳送第三個參數給 <code>DirectUpload</code> 建構函數。在上傳過程中，DirectUpload 會呼叫物件的 <code>directUploadWillStoreFileWithXHR</code> 方法。然後，你可以在 XHR 上綁定自己的進度處理程式。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DirectUpload <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"activestorage"</span>

<span class="token keyword">class</span> <span class="token class-name">Uploader</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>upload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectUpload</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">upload</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> blob</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 錯誤處理</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 將適當名稱且值為 blob.signed_id 的隱藏輸入欄位加到表單中，以便 blob id 可以在</span>
        <span class="token comment">// 正常上傳流程中被傳送</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">directUploadWillStoreFileWithXHR</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    request<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"progress"</span><span class="token punctuation">,</span>
      <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">directUploadDidProgress</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">directUploadDidProgress</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 使用 event.loaded 和 event.total 來更新進度列</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="10-移除系統測試過程中儲存的檔案"><a href="#10-移除系統測試過程中儲存的檔案" class="headerlink" title="10. 移除系統測試過程中儲存的檔案"></a>10. 移除系統測試過程中儲存的檔案</h3><p>系統測試透過復原（Rollback）交易來清理測試資料。因為 destroy 永遠不會在對像上呼叫，所以附加的檔案永遠不會被清理。如果你想清除檔案，可以在 <code>after_teardown</code> callback 中完成。在此處操作可以確保測試過程中建立的連線都已完成，並且不會從 Active Storage 收到錯誤，表示無法找到檔案。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">class</span> <span class="token class-name">ApplicationSystemTestCase</span> <span class="token operator">&lt;</span> <span class="token constant">ActionDispatch</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">SystemTestCase</span>
  driven_by <span class="token symbol">:selenium</span><span class="token punctuation">,</span> using<span class="token punctuation">:</span> <span class="token symbol">:chrome</span><span class="token punctuation">,</span> screen_size<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1400</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">]</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">remove_uploaded_files</span></span>
    <span class="token constant">FileUtils</span><span class="token punctuation">.</span>rm_rf<span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span><span class="token constant">Rails</span><span class="token punctuation">.</span>root<span class="token delimiter tag">&#125;</span></span>/storage_test"</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">after_teardown</span></span>
    <span class="token keyword">super</span>
    remove_uploaded_files
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果你的系統測試驗證是否刪除帶有附件的模型，並且使用 Active Job，請將測試環境設定為使用行內佇列轉接器，以便立即執行清除工作，而不是在未來的某個時間執行。</p>
<p>你可能也想為測試環境使用單獨的服務定義，以便你的測試不會刪除在開發過程中建立的檔案。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># 使用行內作業處理，以便立即執行</span>
config<span class="token punctuation">.</span>active_job<span class="token punctuation">.</span>queue_adapter <span class="token operator">=</span> <span class="token symbol">:inline</span>

<span class="token comment"># 在測試環境中分開儲存檔案</span>
config<span class="token punctuation">.</span>active_storage<span class="token punctuation">.</span>service <span class="token operator">=</span> <span class="token symbol">:local_test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="11-實作支援其它雲端儲存服務"><a href="#11-實作支援其它雲端儲存服務" class="headerlink" title="11. 實作支援其它雲端儲存服務"></a>11. 實作支援其它雲端儲存服務</h3><p>如果你需要支援除了這些以外的雲端服務，則需要實作 Service。每個服務都透過實作上傳和下載檔案到雲端所需的方法，來擴充 <a href="https://github.com/rails/rails/blob/master/activestorage/lib/active_storage/service.rb">ActiveStorage::Service</a>。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Active Storage</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails Engine 入門</title>
    <url>/2018/06/11/getting-started-with-engines/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>Ruby on Rails Guides</strong> — <a href="http://guides.rubyonrails.org/engines.html">Getting Started with Engines</a></p>
</blockquote>
<p><code>Rails::Engine</code> 允許你包裝特定的 Rails 應用程式或功能子集，並與其他應用程式共享或在更大的封裝應用程式中。每個 <code>Rails::Application</code> 都只是一個引擎，它允許簡單的功能及應用程式共享。</p>
<p>任何 <code>Rails::Engine</code> 也是一個 <code>Rails::Railtie</code>，所以在 railties 可用的相同方法（如 <code>rake_tasks</code> 和 <code>generators</code>）和配置選項也可用於引擎。</p>
<p>在本指南中，你將瞭解引擎以及如何透過乾淨且非常易於使用的介面，為主應用程式提供附加功能。</p>
<span id="more"></span>

<p>閱讀本指南後，你將知道：</p>
<ul>
<li>是什麼構成了引擎。</li>
<li>如何產生引擎。</li>
<li>如何為引擎建立功能。</li>
<li>如何將引擎掛載到應用程式中。</li>
<li>如何在應用程式中覆寫引擎功能。</li>
<li>透過載入和配置 Hook 避免載入 Rails 框架。</li>
</ul>
<h3 id="1-什麼是引擎？"><a href="#1-什麼是引擎？" class="headerlink" title="1. 什麼是引擎？"></a>1. 什麼是引擎？</h3><p>引擎可以看成是為主應用程式提供功能的微型應用程式。Rails 應用程式實際上只是一個「增壓」引擎，<code>Rails::Application</code> 類別繼承了許多來自 <code>Rails::Engine</code> 的行為。</p>
<p>因此，引擎和應用程式可以被認為是幾乎相同的東西，只有存在細微的差異，你將在本指南中看到。引擎和應用程式也共享一個公用的結構。</p>
<p>引擎也與外掛程式密切相關。兩者共享一個公用的 <code>lib</code> 目錄結構，並且都是使用 <code>rails plugin new</code> 產生器產生的。不同之處在於，引擎被 Rails 視為一個「完整外掛程式」（如傳遞給產生器指令的 <code>--full</code> 選項所示）。我們實際上會在此處使用 <code>--mountable</code> 選項，其中包含 <code>--full</code> 的所有功能，甚至更多。本指南全文將這些「完整外掛程式」簡稱為「引擎」。引擎<strong>可以</strong>是外掛程式，外掛程式<strong>可以</strong>是引擎。</p>
<p>將在本指南中建立的引擎稱為「blorgh」。此引擎將為其主應用程式提供部落格功能，允許建立新文章和評論。在本指南的開頭，你將獨自在引擎內工作，但在後面的章節中，你將看到如何將其掛載到應用程式中。</p>
<p>引擎也可以與主應用程式隔離。意思是應用程式可以擁有路由輔助方法提供的路徑，如 <code>articles_path</code>，並使用一個也提供了名為 <code>articles_path</code> 路徑的引擎，而且兩者不會發生衝突。除此之外，控制器、模型和資料表名稱也具有命名空間。本指南稍後將介紹如何執行此操作。</p>
<p>重要的是在任何時候牢記這一點，應用程式應該<strong>總是</strong>優先於其引擎。應用程式是對其環境中發生的事情有最終決定權的物件。引擎應該只是加強它，而不是徹底改變它。</p>
<p>查看其他引擎的範例，查看 <a href="https://github.com/plataformatec/devise">Devise</a>，一個為其父應用程式提供身份驗證的引擎，或 <a href="https://github.com/thredded/thredded">Thredded</a>，一個提供論壇功能的引擎。還有 <a href="https://github.com/spree/spree">Spree</a> 提供電子商務平台，以及 <a href="https://github.com/refinery/refinerycms">Refinery CMS</a>，一個 CMS 引擎。</p>
<p>最後，如果沒有 James Adam、Piotr Sarnacki、Rails 核心團隊和其他一些人的工作，引擎是不可能實現的。如果你見過他們，別忘了說聲謝謝！</p>
<h3 id="2-產生一個引擎"><a href="#2-產生一個引擎" class="headerlink" title="2. 產生一個引擎"></a>2. 產生一個引擎</h3><p>要產生引擎，你需要執行外掛程式產生器並根據需求將選項傳遞給它。對於「blorgh」範例，你需要建立一個「可掛載的」引擎，在終端機中執行此指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails plugin new blorgh --mountable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>輸入以下內容即可看到外掛程式產生器的完整選項清單：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails plugin --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>--mountable</code> 選項告訴產生器你想建立一個「可掛載的」且命名空間隔離的引擎。此產生器將提供與 <code>--full</code> 選項相同的骨架結構。<code>--full</code> 選項告訴產生器你想建立一個引擎，包含提供以下內容的骨架結構：</p>
<ul>
<li><p>一個 <code>app</code> 目錄樹</p>
</li>
<li><p>一個 <code>config/routes.rb</code> 檔案：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Rails</span><span class="token punctuation">.</span>application<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>一個在 <code>lib/blorgh/engine.rb</code> 的檔案，其功能與標準 Rails 應用程式的 <code>config/application.rb</code> 檔案相同：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token operator">&lt;</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Rails</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p><code>--mountable</code> 選項會加入 <code>--full</code> 選項：</p>
<ul>
<li><p>靜態資源清單檔案（<code>application.js</code> 和 <code>application.css</code>）</p>
</li>
<li><p>一個具有命名空間的 <code>ApplicationController</code></p>
</li>
<li><p>一個具有命名空間的 <code>ApplicationHelper</code></p>
</li>
<li><p>引擎的佈局視圖樣板</p>
</li>
<li><p>命名空間隔離的 <code>config/routes.rb</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>命名空間隔離的 <code>lib/blorgh/engine.rb</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token operator">&lt;</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Rails</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span>
    isolate_namespace <span class="token constant">Blorgh</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>此外，<code>--mountable</code> 選項透過將以下內容加到虛擬應用程式的路由檔案 <code>test/dummy/config/routes.rb</code>，告訴產生器將引擎掛載到位於 <code>test/dummy</code> 的虛擬測試應用程式中：</p>
  <pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">mount <span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/blorgh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-1-引擎內部"><a href="#2-1-引擎內部" class="headerlink" title="2.1 引擎內部"></a>2.1 引擎內部</h4><h5 id="2-1-1-關鍵檔案"><a href="#2-1-1-關鍵檔案" class="headerlink" title="2.1.1 關鍵檔案"></a>2.1.1 關鍵檔案</h5><p>在這個全新引擎的根目錄有個 <code>blorgh.gemspec</code> 檔案。當你稍後將引擎掛載到應用程式中時，你將在 Rails 應用程式的 <code>Gemfile</code> 中使用此行進行操作：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">gem <span class="token string">'blorgh'</span><span class="token punctuation">,</span> path<span class="token punctuation">:</span> <span class="token string">'engines/blorgh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>不要忘記像往常一樣執行 <code>bundle install</code>。透過在 <code>Gemfile</code> 中指定它作為一個 gem，Bundler 將載入它，解析此 <code>blorgh.gemspec</code> 檔案並載入 <code>lib</code> 目錄中的一個名為 <code>lib/blorgh.rb</code> 的檔案。這個檔案載入了 <code>blorgh/engine.rb</code> 檔案（位於 <code>lib/blorgh/engine.rb</code>）並定義了一個名為 <code>Blorgh</code> 的基本模組。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">require</span> <span class="token string">"blorgh/engine"</span>

<span class="token keyword">module</span> <span class="token constant">Blorgh</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>有些引擎選擇使用這個檔案為其引擎提供全域配置選項。這是一個比較好的想法，所以如果你想提供配置選項，那麼定義引擎 <code>module</code> 的檔案就是完美的選擇。把方法放到模組裡面就可以了。</p>
</blockquote>
<p><code>lib/blorgh/engine.rb</code> 是引擎的基底類別：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token operator">&lt;</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Rails</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span>
    isolate_namespace <span class="token constant">Blorgh</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過繼承 <code>Rails::Engine</code> 類別，這個 gem 會通知 Rails 在指定路徑上有一個引擎，並且將引擎正確地掛載到應用程式，執行諸如將引擎的 <code>app</code> 目錄加到模型、Mailer、控制器和視圖的載入路徑。</p>
<p>這裡的 <code>isolate_namespace</code> 方法值得特別注意。這個呼叫負責將控制器、模型、路由和其他東西隔離到自己的命名空間中，使其遠離應用程式內部的類似元件。沒有這個，引擎的元件就有可能「洩漏」到應用程式，造成不必要的中斷，或者重要的引擎元件可能會被應用程式中類似名稱的東西覆蓋。這種衝突的其中一個例子就是輔助方法。在不呼叫 <code>isolate_namespace</code> 的情況下，引擎的輔助方法將被包含在應用程式的控制器中。</p>
<blockquote>
<p><strong>高度</strong>推薦在 <code>Engine</code> 類別定義中保留 <code>isolate_namespace</code>。如果沒有它，引擎中產生的類別<strong>可能</strong> 會與應用程式發生衝突。</p>
</blockquote>
<p>此命名空間的隔離意思是透過呼叫 <code>bin/rails g model</code> 產生的模型，如 <code>bin/rails g model article</code>，名稱不是 <code>Article</code>，而是具有命名空間的名稱 <code>Blorgh::Article</code>。另外，模型的資料表也具有命名空間，成為 <code>blorgh_articles</code>，而不僅僅是 <code>articles</code>。與模型命名空間類似，一個名為 <code>ArticlesController</code> 的控制器變成了 <code>Blorgh::ArticlesController</code>，並且該控制器的視圖不會在 <code>app/views/articles</code>，而是 <code>app/views/blorgh/articles</code>。Mailer 也具有命名空間。</p>
<p>最後，路由也被隔離在引擎內。這是命名空間中最重要的部分之一，稍後將在本指南的<a href="http://guides.rubyonrails.org/engines.html#routes">路由</a>部分中進行討論。</p>
<h5 id="2-1-2-app-目錄"><a href="#2-1-2-app-目錄" class="headerlink" title="2.1.2 app 目錄"></a>2.1.2 app 目錄</h5><p>在 app 目錄中有標準的 <code>assets</code>、<code>controllers</code>、<code>helpers</code>、<code>mailers</code>、<code>models</code> 和 <code>views</code> 目錄，你應該已從應用程式對這些目錄瞭若指掌。<code>helpers</code>、<code>mailers</code> 和 <code>models</code> 目錄是空的，因此在本節中沒有描述它們。當我們編寫引擎時，我們將在未來的章節中更深入地研究模型。</p>
<p>在 <code>app/assets</code> 目錄中，有 <code>images</code>、<code>javascripts</code> 和 <code>stylesheets</code> 目錄，你應該早已熟悉這些目錄，因為它們與應用程式類似。然而，這裡的一個不同之處在於，每個目錄都包含一個帶有引擎名稱的子目錄。因為這個引擎具有命名空間，它的靜態資源也應該如此。</p>
<p>在 <code>app/controllers</code> 目錄中有一個 <code>blorgh</code> 目錄，其中包含了一個名為 <code>application_controller.rb</code> 的檔案。該檔案將為引擎的控制器提供任何公用功能。<code>blorgh</code> 目錄是存放引擎的其它控制器的地方。透過將它們放在這個命名空間的目錄中，可以防止它們與其它引擎甚至是應用程式中的同名控制器發生衝突。</p>
<blockquote>
<p>引擎內的 <code>ApplicationController</code> 類別命名就像一個 Rails 應用程式，以便更容易將應用程式轉換為引擎。</p>
</blockquote>
<blockquote>
<p>因為 Ruby 不斷尋找的方式，你可能會遇到一種狀況，你的控制器繼承自主應用程式控制器，而不是你的引擎應用程式控制器。Ruby 能夠解析 <code>ApplicationController</code> 常數，因此不會觸發自動載入機制。有關更多詳細資訊，請查看<a href="http://guides.rubyonrails.org/autoloading_and_reloading_constants.html">自動載入和重新載入常數</a>指南中的<a href="http://guides.rubyonrails.org/autoloading_and_reloading_constants.html#when-constants-aren-t-missed">常數什麼時候不被忽略</a>章節。預防這種狀況發生最好的方法是使用 <code>require_dependency</code> 來確保引擎的應用程式控制器已被載入。例如：</p>
</blockquote>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># app/controllers/blorgh/articles_controller.rb:</span>
require_dependency <span class="token string">"blorgh/application_controller"</span>

<span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">ArticlesController</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationController</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不要使用 <code>require</code>，因為它會中斷開發環境中類別的自動重新載入，使用 <code>require_dependency</code> 確保類別以正確的方式載入和卸除。</p>
<p>最後，<code>app/views</code>目錄中有一個 <code>layouts</code> 資料夾，其中包含了一個檔案在 <code>blorgh/application.html.erb</code>。該檔案允許你指定引擎的佈局。如果此引擎要作為獨立引擎使用，那麼你可以在此檔案中加入任何對佈局的客製化，而不是應用程式的 <code>app/views/layouts/application.html.erb</code> 檔案。</p>
<p>如果不希望對引擎的使用者強制佈局，那麼可以刪除此檔案並在引擎的控制器中引用不同的佈局。</p>
<h5 id="2-1-3-bin-目錄"><a href="#2-1-3-bin-目錄" class="headerlink" title="2.1.3 bin 目錄"></a>2.1.3 bin 目錄</h5><p>這個目錄包含一個 <code>bin/rails</code> 檔案，它讓你能夠像在應用程式中一樣使用 <code>rails</code> 子指令和產生器。也就是說，你可以很容易地透過執行這樣的指令來產生新的控制器和模型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails g model<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>請記住，在 <code>Engine</code> 類別中具有 <code>isolate_namespace</code> 的引擎內部使用這些指令產生的任何東西，都將具有命名空間。</p>
<h5 id="2-1-4-test-目錄"><a href="#2-1-4-test-目錄" class="headerlink" title="2.1.4 test 目錄"></a>2.1.4 test 目錄</h5><p><code>test</code> 目錄是用來存放引擎測試的地方。為了測試引擎，在 <code>test/dummy</code> 中嵌入了一個精簡版的 Rails 應用程式。這個應用程式會將引擎掛載到 <code>test/dummy/config/routes.rb</code> 檔案：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Rails</span><span class="token punctuation">.</span>application<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
  mount <span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/blorgh"</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>該行將引擎掛載到 <code>/blorgh</code> 路徑上，這將使應用程式僅能透過該路徑存取它。</p>
<p>在測試目錄裡面有 <code>test/integration</code> 目錄，引擎的整合測試應該放在這裡。也可以在 <code>test</code> 目錄中建立其它目錄。例如，你可能希望為模型測試建立一個 <code>test/models</code> 目錄。</p>
<h3 id="3-提供引擎功能"><a href="#3-提供引擎功能" class="headerlink" title="3. 提供引擎功能"></a>3. 提供引擎功能</h3><p>本指南涵蓋的引擎提供了送交文章和評論的功能，遵循與<a href="http://guides.rubyonrails.org/getting_started.html">入門指南</a>類似的思路，並伴隨一些新的觀點。</p>
<h4 id="3-1-產生-Article-資源"><a href="#3-1-產生-Article-資源" class="headerlink" title="3.1 產生 Article 資源"></a>3.1 產生 Article 資源</h4><p>產生部落格引擎的第一件事是 <code>Article</code> 模型和相關的控制器。要快速建立這個，你可以使用 Rails 鷹架產生器。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails generate scaffold article title:string text:text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>該指令會輸出以下資訊：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">invoke  active_record
create    db/migrate/<span class="token punctuation">[</span>timestamp<span class="token punctuation">]</span>_create_blorgh_articles.rb
create    app/models/blorgh/article.rb
invoke    test_unit
create      test/models/blorgh/article_test.rb
create      test/fixtures/blorgh/articles.yml
invoke  resource_route
 route    resources :articles
invoke  scaffold_controller
create    app/controllers/blorgh/articles_controller.rb
invoke    erb
create      app/views/blorgh/articles
create      app/views/blorgh/articles/index.html.erb
create      app/views/blorgh/articles/edit.html.erb
create      app/views/blorgh/articles/show.html.erb
create      app/views/blorgh/articles/new.html.erb
create      app/views/blorgh/articles/_form.html.erb
invoke    test_unit
create      test/controllers/blorgh/articles_controller_test.rb
invoke    helper
create      app/helpers/blorgh/articles_helper.rb
invoke  test_unit
create    test/application_system_test_case.rb
create    test/system/articles_test.rb
invoke  assets
invoke    js
create      app/assets/javascripts/blorgh/articles.js
invoke    css
create      app/assets/stylesheets/blorgh/articles.css
invoke  css
create    app/assets/stylesheets/scaffold.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>鷹架產生器所做的第一件事是呼叫 <code>active_record</code> 產生器，它為資源產生遷移和模型。但是請注意，遷移被命名為 <code>create_blorgh_articles</code>，而不是常見的 <code>create_articles</code>。這是由於 <code>Blorgh::Engine</code> 類別的定義中呼叫 <code>isolate_namespace</code> 方法造成的。這裡的模型也具有命名空間，由於 <code>Engine</code> 類別中呼叫 <code>isolate_namespace</code>，所以放在 <code>app/models/blorgh/article.rb</code> 而不是 <code>app/models/article.rb</code>。</p>
<p>接下來，為此模型呼叫 <code>test_unit</code> 產生器，在 <code>test/models/blorgh/article_test.rb</code>（而不是 <code>test/models/article_test.rb</code>）產生一個模型測試，並在 <code>test/fixtures/blorgh/articles.yml</code>（而不是 <code>test/fixtures/articles.yml</code>）產生測試資料。</p>
<p>然後，插入一行資源路由到引擎的 <code>config/routes.rb</code> 檔案。這一行只是 <code>resources :articles</code>，將引擎的 <code>config/routes.rb</code> 檔案變成這樣：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
  resources <span class="token symbol">:articles</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這裡請注意，路由是被定義在 <code>Blorgh::Engine</code> 物件上，而不是 <code>YourApp::Application</code> 類別。這是為了使引擎路由被限制在引擎本身，並且如<a href="http://guides.rubyonrails.org/engines.html#test-directory">測試目錄</a>部分所示可以掛載在特定點上。它還會使引擎的路由與應用程式內的路由隔離。本指南的<a href="http://guides.rubyonrails.org/engines.html#routes">路由</a>部分有詳細的說明。</p>
<p>接下來，<code>scaffold_controller</code> 產生器被呼叫，產生一個名為 <code>Blorgh::ArticlesController</code>（在 <code>app/controllers/blorgh/articles_controller.rb</code>）的控制器及其相關視圖在 <code>app/views/blorgh/articles</code>。此產生器還為控制器產生測試（<code>test/controllers/blorgh/articles_controller_test.rb</code>）和輔助方法（<code>app/helpers/blorgh/articles_helper.rb</code>）。</p>
<p>這個產生器建立的所有東西都具有命名空間。控制器的類別被定義在 <code>Blorgh</code> 模組：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">ArticlesController</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationController</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><code>ArticlesController</code> 類別繼承自 <code>Blorgh::ApplicationController</code>，而不是應用程式的 <code>ApplicationController</code>。</p>
</blockquote>
<p><code>app/helpers/blorgh/articles_helper.rb</code> 中的輔助方法也具有命名空間：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">module</span> <span class="token constant">ArticlesHelper</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這有助於防止與任何其它可能具有文章資源的引擎或應用程式發生衝突。</p>
<p>最後，產生了兩個靜態資源檔案：<code>app/assets/javascripts/blorgh/articles.js</code> 和 <code>app/assets/stylesheets/blorgh/articles.css</code>。稍後你會看到如何使用這些東西。</p>
<p>你可以透過在引擎的根目錄執行 <code>bin/rails db:migrate</code> 來執行由鷹架產生器產生的遷移，然後在 <code>test/dummy</code> 中執行 <code>rails server</code> 來查看引擎的內容。當你開啟 <code>http://localhost:3000/blorgh/articles</code> 時，將看到已產生的預設鷹架。點看看吧！你剛剛產生了你的第一個引擎的第一個功能。</p>
<p>如果你更喜歡使用主控台，也可以像 Rails 應用程式一樣使用 <code>rails console</code>。記住：<code>Article</code> 模型是具有命名空間的，因此要引用它，你必須稱呼它為 <code>Blorgh::Article</code>。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token operator">></span><span class="token operator">></span> <span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Article</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token comment">#&lt;Blorgh::Article id: 1 ...></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>最後一件事是這個引擎的 <code>articles</code> 資源應該是引擎的根。每當有人進入掛載引擎的根路徑時，應該顯示文章列表。如果將此行插入引擎內的 <code>config/routes.rb</code> 檔案中，便可以實現這一點：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">root to<span class="token punctuation">:</span> <span class="token string">"articles#index"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>現在人們只需要到引擎的根目錄來查看所有文章，而不是訪問 <code>/articles</code>。意思是現在你只需要去 <code>http://localhost:3000/blorgh</code>，而不是 <code>http://localhost:3000/blorgh/articles</code>。</p>
<h4 id="3-2-產生-Comments-資源"><a href="#3-2-產生-Comments-資源" class="headerlink" title="3.2 產生 Comments 資源"></a>3.2 產生 Comments 資源</h4><p>現在，引擎可以建立新的文章，那麼加上評論功能也是有意義的。為此，你需要建立評論模型、評論控制器，然後修改文章鷹架以顯示評論並允許人們建立新評論。</p>
<p>從應用程式根目錄執行模型產生器。告訴它產生一個 <code>Comment</code> 模型，資料表有兩欄：integer 型別的 <code>article_id</code> 和 text 型別的 <code>text</code> 欄位。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails generate model Comment article_id:integer text:text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這將輸出以下內容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">invoke  active_record
create    db/migrate/<span class="token punctuation">[</span>timestamp<span class="token punctuation">]</span>_create_blorgh_comments.rb
create    app/models/blorgh/comment.rb
invoke    test_unit
create      test/models/blorgh/comment_test.rb
create      test/fixtures/blorgh/comments.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>該產生器呼叫將產生它所需的必要模型檔案，將檔案放在命名空間 <code>blorgh</code> 目錄下，並建立一個名為 <code>Blorgh::Comment</code> 的模型類別。現在執行遷移來建立我們的 blorgh_comments 資料表：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要在文章上顯示評論，編輯 <code>app/views/blorgh/articles/show.html.erb</code> 並在「編輯」連結前加上此行：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Comments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render <span class="token variable">@article</span><span class="token punctuation">.</span>comments <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這一行需要在 <code>Blorgh::Article</code> 模型中定義一個 <code>has_many</code> 關聯的評論，不過現在還沒有。要定義它，開啟 <code>app/models/blorgh/article.rb</code> 並將這一行加到模型中：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">has_many <span class="token symbol">:comments</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>將模型變成：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationRecord</span>
    has_many <span class="token symbol">:comments</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>因為 <code>has_many</code> 是在 <code>Blorgh</code> 模組的一個類別中定義的，Rails 會知道你想為這些物件使用 <code>Blorgh::Comment</code> 模型，所以不需要在這裡指定使用 <code>:class_name</code> 選項。</p>
</blockquote>
<p>接下來，需要有一個表單，以便可以在文章上建立評論。要加上它，在 <code>app/views/blorgh/articles/show.html.erb</code> 中呼叫呈現 <code>@article.comments</code> 的下方加上這一行：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> render <span class="token string">"blorgh/comments/form"</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來，這一行將呈現的部分視圖需要存在。建立一個新目錄在 <code>app/views/blorgh/comments</code>，並且建立一個名為 <code>_form.html.erb</code> 的新檔案，該檔案包含這些內容以便建立所需的部分視圖：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>New comment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form_with<span class="token punctuation">(</span>model<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">@article</span><span class="token punctuation">,</span> <span class="token variable">@article</span><span class="token punctuation">.</span>comments<span class="token punctuation">.</span>build<span class="token punctuation">]</span><span class="token punctuation">,</span> local<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>form<span class="token operator">|</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form<span class="token punctuation">.</span>label <span class="token symbol">:text</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form<span class="token punctuation">.</span>text_area <span class="token symbol">:text</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form<span class="token punctuation">.</span>submit <span class="token delimiter punctuation">%></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>送交此表單時，它將嘗試對引擎內的 <code>/articles/:article_id/comments</code> 路由執行 <code>POST</code> 請求。此路由目前不存在，但是可以透過將 <code>config/routes.rb</code> 中的 <code>resources :articles</code> 更改為以下幾行來建立：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">resources <span class="token symbol">:articles</span> <span class="token keyword">do</span>
  resources <span class="token symbol">:comments</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這會為評論建立一個表單所需要的巢狀路由。</p>
<p>路由現在已經存在了，但是此路由所去的控制器還不存在。要建立它，從應用程式根目錄執行這個指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails g controller comments<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>該指令會輸出以下資訊：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">create  app/controllers/blorgh/comments_controller.rb
invoke  erb
 exist    app/views/blorgh/comments
invoke  test_unit
create    test/controllers/blorgh/comments_controller_test.rb
invoke  helper
create    app/helpers/blorgh/comments_helper.rb
invoke  assets
invoke    js
create      app/assets/javascripts/blorgh/comments.js
invoke    css
create      app/assets/stylesheets/blorgh/comments.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>該表單會向 <code>/articles/:article_id/comments</code> 發出 <code>POST</code> 請求，對應到 <code>Blorgh::CommentsController</code> 中的 <code>create</code> 動作。這個動作需要被建立，可以透過在 <code>app/controllers/blorgh/comments_controller.rb</code> 的類別定義中放入以下幾行來完成：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
  <span class="token variable">@article</span> <span class="token operator">=</span> <span class="token constant">Article</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:article_id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token variable">@comment</span> <span class="token operator">=</span> <span class="token variable">@article</span><span class="token punctuation">.</span>comments<span class="token punctuation">.</span>create<span class="token punctuation">(</span>comment_params<span class="token punctuation">)</span>
  flash<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Comment has been created!"</span>
  redirect_to articles_path
<span class="token keyword">end</span>

<span class="token keyword">private</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">comment_params</span></span>
    params<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token symbol">:comment</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permit<span class="token punctuation">(</span><span class="token symbol">:text</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是讓新評論表單運作所需的最後一步。然而，顯示評論還不太正確。如果你現在要建立評論，則會看到此錯誤：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Missing</span> partial blorgh<span class="token operator">/</span>comments<span class="token operator">/</span>_comment with <span class="token punctuation">&#123;</span><span class="token symbol">:handlers</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token symbol">:erb</span><span class="token punctuation">,</span> <span class="token symbol">:builder</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token symbol">:formats</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token symbol">:html</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token symbol">:locale</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token symbol">:en</span><span class="token punctuation">,</span> <span class="token symbol">:en</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span> <span class="token constant">Searched</span> <span class="token keyword">in</span><span class="token punctuation">:</span>   <span class="token operator">*</span>
<span class="token string">"/Users/ryan/Sites/side_projects/blorgh/test/dummy/app/views"</span>   <span class="token operator">*</span>
<span class="token string">"/Users/ryan/Sites/side_projects/blorgh/app/views"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>引擎無法找到呈現評論所需的部分視圖。Rails 會先尋找應用程式的（<code>test/dummy</code>）<code>app/views</code>目錄，然後在引擎的 <code>app/views</code> 目錄中尋找。當找不到它時，便會拋出這個錯誤。引擎知道要尋找 <code>blorgh/comments/_comment</code>，因為它接收的模型物件是來自 <code>Blorgh::Comment</code> 類別。</p>
<p>目前，這個部分視圖僅負責呈現評論文字。在 <code>app/views/blorgh/comments/_comment.html.erb</code> 建立新一個檔案，並將此行放入其中：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> comment_counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token delimiter punctuation">%></span></span>. <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> comment<span class="token punctuation">.</span>text <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>comment_counter</code> 區域變數是由呼叫 <code>&lt;%= render @article.comments %&gt;</code> 給我們的，它會自動定義並在迭代每個評論時遞增計數器。在這個例子中，它用於在每個評論建立時顯示一個小數字。</p>
<p>完成了部落格引擎的評論功能。現在是時候在應用程式中使用它了。</p>
<h3 id="4-安裝到應用程式"><a href="#4-安裝到應用程式" class="headerlink" title="4. 安裝到應用程式"></a>4. 安裝到應用程式</h3><p>在應用程式中使用引擎非常簡單。本節會介紹如何將引擎掛載到應用程式和所需的初始設定，以及將引擎連結到由應用程式提供的 <code>User</code> 類別，以便為引擎中的文章和評論提供所有權。</p>
<h4 id="4-1-掛載引擎"><a href="#4-1-掛載引擎" class="headerlink" title="4.1 掛載引擎"></a>4.1 掛載引擎</h4><p>首先，需要在應用程式的 <code>Gemfile</code> 中指定引擎。如果沒有應用程式可以方便地進行測試，可以像這樣在引擎目錄外使用 <code>rails new</code> 指令產生一個：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ rails new unicorn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通常，可以像一般的 gem 一樣，透過在 <code>Gemfile</code> 內將引擎指定在內來完成。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">gem <span class="token string">'devise'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但是，因為你正在本機上開發 <code>blorgh</code> 引擎，你需要在 <code>Gemfile</code> 指定 <code>:path</code> 選項：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">gem <span class="token string">'blorgh'</span><span class="token punctuation">,</span> path<span class="token punctuation">:</span> <span class="token string">'engines/blorgh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然後執行 <code>bundle</code> 來安裝 gem。</p>
<p>如先前所述，透過將 gem 放在 <code>Gemfile</code> 中，它將會在 Rails 載入時被載入。它會先從引擎載入 <code>lib/blorgh.rb</code>，然後是 <code>lib/blorgh/engine.rb</code>，它是定義引擎主要功能的檔案。</p>
<p>要讓引擎的功能可以從應用程式存取，需要將它掛載到應用程式的 <code>config/routes.rb</code> 檔案：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">mount <span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token string">"/blog"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這一行會將引擎掛載到應用程式中的 <code>/blog</code>。當應用程式以 <code>rails server</code> 執行時，可以在 <code>http://localhost:3000/blog</code> 上訪問它。</p>
<blockquote>
<p>其他引擎，如 Devise，透過讓你在路由中指定自訂輔助方法（例如 <code>devise_for</code>）來處理這一點。這些輔助方法完成相同的事，將引擎的部分功能掛載到預先定義可客製化的路徑上。</p>
</blockquote>
<h4 id="4-2-安裝引擎"><a href="#4-2-安裝引擎" class="headerlink" title="4.2 安裝引擎"></a>4.2 安裝引擎</h4><p>引擎包含需要在應用程式資料庫中建立的 <code>blorgh_articles</code> 和 <code>blorgh_comments</code> 資料表的遷移，以便引擎的模型可以正確查詢它們。要將這些遷移複製到應用程式中，請從 Rails 引擎的 <code>test/dummy</code> 目錄執行以下指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails blorgh:install:migrations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你有多個需要複製遷移的引擎，請改用 <code>railties:install:migrations</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails railties:install:migrations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第一次執行這個指令時，將複製引擎中的所有遷移。下次執行時，它只會複製尚未被複製的遷移。第一次執行指令會輸出以下資訊：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Copied migration <span class="token punctuation">[</span>timestamp_1<span class="token punctuation">]</span>_create_blorgh_articles.blorgh.rb from blorgh
Copied migration <span class="token punctuation">[</span>timestamp_2<span class="token punctuation">]</span>_create_blorgh_comments.blorgh.rb from blorgh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>第一個時間戳記（<code>[timestamp_1]</code>）將是目前時間，第二個時間戳記（<code>[timestamp_2]</code>）將是目前時間加上一秒。之所以這樣做是為了在應用程式中任何現有的遷移之後執行引擎的遷移。</p>
<p>要在應用程式中執行這些遷移，只需執行：<code>bin/rails db:migrate</code>。當透過 <code>http://localhost:3000/blog</code> 訪問引擎時，文章會是空的。這是因為在應用程式建立的資料表與引擎內建立的資料表不同。繼續，玩玩新掛載的引擎吧。你會發現它和只有一個引擎時是相同的。</p>
<p>如果你只想從一個引擎執行遷移，可以透過指定 <code>SCOPE</code> 來完成：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails db:migrate <span class="token assign-left variable">SCOPE</span><span class="token operator">=</span>blorgh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你想在刪除引擎之前還原引擎的遷移，這可能很有用。要還原 blorgh 引擎的所有遷移，你可以執行以下指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails db:migrate <span class="token assign-left variable">SCOPE</span><span class="token operator">=</span>blorgh <span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="4-3-使用應用程式提供的類別"><a href="#4-3-使用應用程式提供的類別" class="headerlink" title="4.3 使用應用程式提供的類別"></a>4.3 使用應用程式提供的類別</h4><h5 id="4-3-1-使用應用程式提供的模型"><a href="#4-3-1-使用應用程式提供的模型" class="headerlink" title="4.3.1 使用應用程式提供的模型"></a>4.3.1 使用應用程式提供的模型</h5><p>引擎建立後，可能需要使用應用程式中的特定類別來提供引擎和應用程式之間的連結。以 <code>blorgh</code> 引擎的情況來說，讓文章和評論有作者會很有意義。</p>
<p>一個典型的應用程式可能有一個 <code>User</code> 類別，用於表示文章或評論的作者。但可能會出現這樣的情況，應用程式以不同名稱命名此類別，如 <code>Person</code>。因此，引擎不應該明確的為 <code>User</code> 類別寫死關聯。</p>
<p>為了在這種情況下保持簡單，應用程式將有一個名為 <code>User</code> 的類別，來表示應用程式的使用者（我們將進一步進行配置）。它可以在應用程式中使用這個指令產生：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails g model user name:string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>需要在這裡執行 <code>bin/rails db:migrate</code> 指令，以確保我們的應用程式有 <code>users</code> 資料表供將來使用。</p>
<p>同樣地，為了簡單起見，文章表單會有一個名為 <code>author_name</code> 的新文字欄位，使用者可以選擇放置他們的名字。引擎將使用這個名稱建立一個新的 <code>User</code> 物件或者尋找一個擁有該名稱的物件。引擎會將文章與找到或建立的 <code>User</code> 物件建立關聯。</p>
<p>首先，<code>author_name</code> 文字欄位需要被加到引擎內的 <code>app/views/blorgh/articles/_form.html.erb</code> 部分視圖。可以在 <code>title</code> 欄位上方加入以下程式碼：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form<span class="token punctuation">.</span>label <span class="token symbol">:author_name</span> <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> form<span class="token punctuation">.</span>text_field <span class="token symbol">:author_name</span> <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下來，我們需要更新 <code>Blorgh::ArticleController#article_params</code> 方法來允許新的表單參數：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">article_params</span></span>
  params<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token symbol">:article</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permit<span class="token punctuation">(</span><span class="token symbol">:title</span><span class="token punctuation">,</span> <span class="token symbol">:text</span><span class="token punctuation">,</span> <span class="token symbol">:author_name</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><code>Blorgh::Article</code> 模型應該有一些程式碼將 <code>author_name</code> 欄位轉換為一個實際的 <code>User</code> 物件，並在儲存文章前將其關聯為該文章的 <code>author</code>。它還需要為此欄位設定一個 <code>attr_accessor</code>，以便為其定義設值（setter）方法和取值（getter）方法。</p>
<p>為此，你需要在 <code>app/models/blorgh/article.rb</code> 為 <code>author_name</code> 加上 <code>attr_accessor</code>、作者的關聯和 <code>before_validation</code> 呼叫。<code>author</code> 關聯會暫時寫死到 <code>User</code> 類別。</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">attr_accessor <span class="token symbol">:author_name</span>
belongs_to <span class="token symbol">:author</span><span class="token punctuation">,</span> class_name<span class="token punctuation">:</span> <span class="token string">"User"</span>

before_validation <span class="token symbol">:set_author</span>

<span class="token keyword">private</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_author</span></span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>find_or_create_by<span class="token punctuation">(</span>name<span class="token punctuation">:</span> author_name<span class="token punctuation">)</span>
  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過用 <code>User</code> 類別表示 <code>author</code> 關聯的物件，在引擎和應用程式之間建立了一個連結。需要有一種方法將 <code>blorgh_articles</code> 資料表中的記錄與 <code>users</code> 資料表中的記錄關聯起來。因為該關聯名為 <code>author</code>，所以應該在 <code>blorgh_articles</code> 資料表中加上 <code>author_id</code> 欄位。</p>
<p>要產生這個新欄位，請在引擎中執行這個指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails g migration add_author_id_to_blorgh_articles author_id:integer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>由於遷移的名稱和後面的欄位說明，Rails 會自動知道你想要將欄位加到特定資料表，並將其寫入遷移中。因此不用手動編寫遷移。</p>
</blockquote>
<p>這個遷移需要在應用程式上執行。為此，首先必須使用這個指令複製它：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails blorgh:install:migrations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>請注意，這裡只複製了一個遷移。這是因為前兩次遷移已經在第一次執行這個指令時被複製了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">NOTE Migration <span class="token punctuation">[</span>timestamp<span class="token punctuation">]</span>_create_blorgh_articles.blorgh.rb from blorgh has been skipped. Migration with the same name already exists.
NOTE Migration <span class="token punctuation">[</span>timestamp<span class="token punctuation">]</span>_create_blorgh_comments.blorgh.rb from blorgh has been skipped. Migration with the same name already exists.
Copied migration <span class="token punctuation">[</span>timestamp<span class="token punctuation">]</span>_add_author_id_to_blorgh_articles.blorgh.rb from blorgh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用以下指令執行遷移：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>現在，一切都已經到位，我們完成了作者（用 <code>users</code> 資料表中的記錄表示）與文章（用引擎的 <code>blorgh_articles</code> 資料表中的記錄表示）的關聯。</p>
<p>最後，作者的名稱應該會顯示在文章頁面。在 <code>app/views/blorgh/articles/show.html.erb</code> 內的「標題」輸出上方加上以下程式碼：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Author:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> <span class="token variable">@article</span><span class="token punctuation">.</span>author<span class="token punctuation">.</span>name <span class="token delimiter punctuation">%></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="4-3-2-使用應用程式提供的控制器"><a href="#4-3-2-使用應用程式提供的控制器" class="headerlink" title="4.3.2 使用應用程式提供的控制器"></a>4.3.2 使用應用程式提供的控制器</h5><p>預設情況下，由於 Rails 控制器通常會透過繼承 <code>ApplicationController</code> 共享程式碼，例如身份驗證和存取 session 變數。然而，Rails 引擎的作用域與主應用程式是隔離的，因此每個引擎的 <code>ApplicationController</code> 都具有獨立的命名空間。獨立的命名空間可避免程式碼衝突，但是引擎的控制器常常需要存取主應用程式的 <code>ApplicationController</code> 中的方法。提供存取的簡單方法是讓引擎具有命名空間的 <code>ApplicationController</code> 繼承自主應用程式的 <code>ApplicationController</code>。對於我們的 Blorgh 引擎，可以透過以下改變 <code>app/controllers/blorgh/application_controller.rb</code> 來完成：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ApplicationController</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以，在做出這個改變之後，他們可以訪問主應用程序的<code>ApplicationController</code>，就好像它們是主應用程序的一部分。<br>預設情況下，引擎的控制器繼承自 <code>Blorgh::ApplicationController</code>。因此透過上述修改，它們將能夠存取主應用程式的 <code>ApplicationController</code>，就好像它們是主應用程式的一部分。</p>
<p>此修改的前提是，引擎需要執行在具有 <code>ApplicationController</code> 的 Rails 應用程式。</p>
<h4 id="4-4-設定引擎"><a href="#4-4-設定引擎" class="headerlink" title="4.4 設定引擎"></a>4.4 設定引擎</h4><p>本節介紹如何讓 <code>User</code> 類別成為可配置的，然後介紹引擎的基本配置注意事項。</p>
<h5 id="4-4-1-在應用程式中設定配置"><a href="#4-4-1-在應用程式中設定配置" class="headerlink" title="4.4.1 在應用程式中設定配置"></a>4.4.1 在應用程式中設定配置</h5><p>下一步是讓引擎可以客製化在應用程式中所使用的 <code>User</code> 類別。如先前所述，該類別並非總是 <code>User</code>。為了使這個配置可客製化，引擎將有一個名為 <code>author_class</code> 的配置，它將用於指定哪個類別代表應用程式中的使用者。</p>
<p>要定義此配置，你應該在引擎的 <code>Blorgh</code> 模組中使用 <code>mattr_accessor</code>。將此行加到引擎內的 <code>lib/blorgh.rb</code> 中：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">mattr_accessor <span class="token symbol">:author_class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這個方法的工作原理與 <code>attr_accessor</code> 和 <code>cattr_accessor</code> 類似，會根據指定名稱為模組提供設值（setter）方法和取值（getter）方法。使用時直接呼叫 <code>Blorgh.author_class</code> 即可。</p>
<p>下一步是將 <code>Blorgh::Article</code> 模型切換到這個新設定。修改這個模型（<code>app/models/blorgh/article.rb</code>）的 <code>belongs_to</code> 關聯：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">belongs_to <span class="token symbol">:author</span><span class="token punctuation">,</span> class_name<span class="token punctuation">:</span> <span class="token constant">Blorgh</span><span class="token punctuation">.</span>author_class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>Blorgh::Article</code> 模型中的 <code>set_author</code> 方法也應該使用此類別：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">self</span><span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token constant">Blorgh</span><span class="token punctuation">.</span>author_class<span class="token punctuation">.</span>constantize<span class="token punctuation">.</span>find_or_create_by<span class="token punctuation">(</span>name<span class="token punctuation">:</span> author_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>為了避免每次都要對 <code>author_class</code> 結果呼叫 <code>constantize</code>，我們可以在 <code>lib/blorgh.rb</code> 檔案中覆寫 <code>Blorgh</code> 模組的 <code>author_class</code> 取值（getter）方法，在回傳結果之前呼叫 <code>constantize</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">author_class</span></span>
  <span class="token variable">@@author_class</span><span class="token punctuation">.</span>constantize
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>此時，上述的 <code>set_author</code> 程式碼將變為：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">self</span><span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token constant">Blorgh</span><span class="token punctuation">.</span>author_class<span class="token punctuation">.</span>find_or_create_by<span class="token punctuation">(</span>name<span class="token punctuation">:</span> author_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改後的結果更為簡短，行為更加明確。<code>author_class</code> 方法應該總是回傳 <code>Class</code> 物件。</p>
<p>因為修改後的 <code>author_class</code> 方法回傳 <code>Class</code> 而不是 <code>String</code>，我們還需要修改 <code>Blorgh::Article</code> 模型中的 <code>belongs_to</code> 定義：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">belongs_to <span class="token symbol">:author</span><span class="token punctuation">,</span> class_name<span class="token punctuation">:</span> <span class="token constant">Blorgh</span><span class="token punctuation">.</span>author_class<span class="token punctuation">.</span>to_s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要在應用程式設定此配置，應該使用初始化程式。透過初始化程式，配置會在應用程式啟動且呼叫引擎的模型前完成設定，這可能取決於現有的配置設定。</p>
<p>在安裝 <code>blorgh</code> 引擎的應用程式中，建立一個新的初始化程式在 <code>config/initializers/blorgh.rb</code>，並放入以下內容：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Blorgh</span><span class="token punctuation">.</span>author_class <span class="token operator">=</span> <span class="token string">"User"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>重要的是這裡使用<strong>字串</strong>版本的類別，而不是直接使用類別。如果我們直接使用類別，Rails 會嘗試載入該類別並引用相關資料表。如果資料表不存在，可能會導致問題產生。因此，應該使用<strong>字串</strong>，然後在引擎中透過 <code>constantize</code> 將其轉換為類別。</p>
</blockquote>
<p>接下來嘗試新增一篇文章。你會發現過程和之前相同，不過這次引擎使用的是 <code>config/initializers/blorgh.rb</code> 內配置設定的類別。</p>
<p>現在，不用在意使用者類別到底是什麼，只需要確認使用者類別是否實作所需的 API。引擎只要求使用者類別實作了 <code>find_or_create_by</code> 方法，此方法回傳了使用者類別的物件，以便在建立文章時與其相關聯。當然，這個物件應該有某種可以被引用的識別碼。</p>
<h5 id="4-4-2-引擎基本配置"><a href="#4-4-2-引擎基本配置" class="headerlink" title="4.4.2 引擎基本配置"></a>4.4.2 引擎基本配置</h5><p>有時候你可能會想在引擎中使用初始化程式、國際化或其它配置選項。這些事情是可以的，因為 Rails 引擎和 Rails 應用程式共享很多相同的功能。事實上，Rails 應用程式的功能實際上是由引擎提供的功能的超集合！</p>
<p>如果你希望使用初始化程式（載入引擎前應該執行的程式碼），儲存的位置是在它的 <code>config/initializers</code> 資料夾。此目錄的功能在配置指南的<a href="http://guides.rubyonrails.org/configuring.html#initializers">初始化程式章節</a>有說明，並且與應用程式中的 <code>config/initializers</code> 目錄完全相同。如果你想使用標準的初始化程式，也是一樣的。</p>
<p>對於語系設定，只需將語系檔案放在 <code>config/locales</code> 目錄，如同在應用程式中一樣。</p>
<h3 id="5-測試引擎"><a href="#5-測試引擎" class="headerlink" title="5. 測試引擎"></a>5. 測試引擎</h3><p>當引擎建立後，會在 <code>test/dummy</code> 中建立一個小型的虛擬應用程式。這個應用程式被用作引擎的裝載點，使引擎測試非常簡單。你可以透過在目錄中產生控制器、模型或視圖來擴充此應用程式，然後用它們來測試你的引擎。</p>
<p><code>test</code> 目錄和典型的 Rails 測試環境一樣，支援單元測試、功能測試和整合測試。</p>
<h4 id="5-1-功能測試"><a href="#5-1-功能測試" class="headerlink" title="5.1 功能測試"></a>5.1 功能測試</h4><p>在編寫功能測試時，一件值得考慮的事是測試會在 <code>test/dummy</code> 應用程式上執行，而不是引擎。這是由測試環境的設定決定的，引擎需要裝載在應用程式才能測試其主要功能，尤其是控制器。也就是說，如果你在控制器的功能測試中像這樣為控制器編寫一個典型的 <code>GET</code> 請求：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">FooControllerTest</span> <span class="token operator">&lt;</span> <span class="token constant">ActionDispatch</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">IntegrationTest</span>
    <span class="token keyword">include</span> <span class="token constant">Engine</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>url_helpers

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_index</span></span>
      get foos_url
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>它的功能還無法正確運作。這是因為應用程式不知道如何將這些請求傳遞到引擎，除非你明確的告訴它<strong>如何</strong>處理。為此，你必須在程式中將 <code>@routes</code> 實例變數設定為引擎的路由：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">FooControllerTest</span> <span class="token operator">&lt;</span> <span class="token constant">ActionDispatch</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">IntegrationTest</span>
    <span class="token keyword">include</span> <span class="token constant">Engine</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>url_helpers

    setup <span class="token keyword">do</span>
      <span class="token variable">@routes</span> <span class="token operator">=</span> <span class="token constant">Engine</span><span class="token punctuation">.</span>routes
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_index</span></span>
      get foos_url
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這告訴應用程式你想對此控制器的 <code>index</code> 動作執行一個 <code>GET</code> 請求，但你想使用引擎的路由，而不是應用程式的路由。</p>
<p>這也確保了引擎的 URL 輔助方法能夠在測試中正常運作。</p>
<h3 id="6-改進引擎功能"><a href="#6-改進引擎功能" class="headerlink" title="6. 改進引擎功能"></a>6. 改進引擎功能</h3><p>本節介紹如何在 Rails 主應用程式中加入或覆寫引擎的 MVC 功能。</p>
<h4 id="6-1-覆寫模型和控制器"><a href="#6-1-覆寫模型和控制器" class="headerlink" title="6.1 覆寫模型和控制器"></a>6.1 覆寫模型和控制器</h4><p>在 Rails 主應用程式中，可以透過打開類別來擴充引擎模型和控制器類別（因為模型和控制器類別只是繼承 Rails 特定功能的 Ruby 類別）。透過打開類別，可以根據主應用程式的需求重新定義引擎的類別。通常會透過裝飾器模式來實作。</p>
<p>對於簡單的類別修改，可以使用 <code>Class#class_eval</code>。對於複雜的類別修改，可以考慮使用 <code>ActiveSupport::Concern</code>。</p>
<h5 id="6-1-1-使用裝飾器和載入代碼時的注意事項"><a href="#6-1-1-使用裝飾器和載入代碼時的注意事項" class="headerlink" title="6.1.1 使用裝飾器和載入代碼時的注意事項"></a>6.1.1 使用裝飾器和載入代碼時的注意事項</h5><p>因為這些裝飾器沒有被 Rails 應用程式本身引用，Rails 的自動載入系統不會載入你的裝飾器。也就是說，你需要自己載入它們。</p>
<p>以下是執行此操作的一些範例程式碼：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># lib/blorgh/engine.rb</span>
<span class="token keyword">module</span> <span class="token constant">Blorgh</span>
  <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token operator">&lt;</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Rails</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span>
    isolate_namespace <span class="token constant">Blorgh</span>

    config<span class="token punctuation">.</span>to_prepare <span class="token keyword">do</span>
      <span class="token builtin">Dir</span><span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token constant">Rails</span><span class="token punctuation">.</span>root <span class="token operator">+</span> <span class="token string">"app/decorators/**/*_decorator*.rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>c<span class="token operator">|</span>
        require_dependency<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這不僅適用於裝飾器，也適用於任何加入到引擎中但未被主應用程式引用的東西。</p>
<h5 id="6-1-2-使用-Class-class-eval-實作裝飾器模式"><a href="#6-1-2-使用-Class-class-eval-實作裝飾器模式" class="headerlink" title="6.1.2 使用 Class#class_eval 實作裝飾器模式"></a>6.1.2 使用 Class#class_eval 實作裝飾器模式</h5><p><strong>加入</strong> <code>Article#time_since_created</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># MyApp/app/decorators/models/blorgh/article_decorator.rb</span>

<span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Article</span><span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">time_since_created</span></span>
    <span class="token builtin">Time</span><span class="token punctuation">.</span>current <span class="token operator">-</span> created_at
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># Blorgh/app/models/article.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationRecord</span>
  has_many <span class="token symbol">:comments</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>覆寫</strong> <code>Article#summary</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># MyApp/app/decorators/models/blorgh/article_decorator.rb</span>

<span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Article</span><span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">summary</span></span>
    <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>title<span class="token delimiter tag">&#125;</span></span> - <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>truncate<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token delimiter tag">&#125;</span></span>"</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># Blorgh/app/models/article.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationRecord</span>
  has_many <span class="token symbol">:comments</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">summary</span></span>
    <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>title<span class="token delimiter tag">&#125;</span></span>"</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="6-1-3-使用-ActiveSupport-Concern-實作裝飾器模式"><a href="#6-1-3-使用-ActiveSupport-Concern-實作裝飾器模式" class="headerlink" title="6.1.3 使用 ActiveSupport::Concern 實作裝飾器模式"></a>6.1.3 使用 ActiveSupport::Concern 實作裝飾器模式</h5><p>使您可以顯著模塊化您的代碼。<br>使用 <code>Class#class_eval</code> 非常適合簡單的調整，但是對於更複雜的類別修改，你可能需要考慮使用 <a href="http://api.rubyonrails.org/v5.2.0/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a>。ActiveSupport::Concern 能管理互相關聯相依模組和類別執行時的載入順序，讓你可以放心模組化你的程式碼。</p>
<p><strong>加入</strong> <code>Article#time_since_created</code> 並<strong>覆寫</strong> <code>Article#summary</code>：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># MyApp/app/models/blorgh/article.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Article</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationRecord</span>
  <span class="token keyword">include</span> <span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Concerns</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Models</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Article</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">time_since_created</span></span>
    <span class="token builtin">Time</span><span class="token punctuation">.</span>current <span class="token operator">-</span> created_at
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">summary</span></span>
    <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>title<span class="token delimiter tag">&#125;</span></span> - <span class="token interpolation"><span class="token delimiter tag">#&#123;</span>truncate<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token delimiter tag">&#125;</span></span>"</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># Blorgh/app/models/article.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token operator">&lt;</span> <span class="token constant">ApplicationRecord</span>
  <span class="token keyword">include</span> <span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Concerns</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Models</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Article</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token comment"># Blorgh/lib/concerns/models/article.rb</span>

<span class="token keyword">module</span> <span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Concerns</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Models</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Article</span>
  <span class="token keyword">extend</span> <span class="token constant">ActiveSupport</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Concern</span>

  <span class="token comment"># 'included do' 內的程式碼可以在被載入的地方（article.rb）執行，而不是在</span>
  <span class="token comment"># 模組內（blorgh/concerns/models/article）被執行。</span>
  included <span class="token keyword">do</span>
    attr_accessor <span class="token symbol">:author_name</span>
    belongs_to <span class="token symbol">:author</span><span class="token punctuation">,</span> class_name<span class="token punctuation">:</span> <span class="token string">"User"</span>

    before_validation <span class="token symbol">:set_author</span>

    <span class="token keyword">private</span>
      <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_author</span></span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token constant">User</span><span class="token punctuation">.</span>find_or_create_by<span class="token punctuation">(</span>name<span class="token punctuation">:</span> author_name<span class="token punctuation">)</span>
      <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">summary</span></span>
    <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#&#123;</span>title<span class="token delimiter tag">&#125;</span></span>"</span>
  <span class="token keyword">end</span>

  <span class="token keyword">module</span> <span class="token constant">ClassMethods</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">some_class_method</span></span>
      <span class="token string">'some class method string'</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-2-覆寫視圖"><a href="#6-2-覆寫視圖" class="headerlink" title="6.2 覆寫視圖"></a>6.2 覆寫視圖</h4><p>當 Rails 在尋找要呈現的視圖時，它首先會在應用程式的 <code>app/views</code> 目錄中尋找。如果找不到，接著就會在所有引擎的 <code>app/views</code>目錄中尋找。</p>
<p>當應用程式要呈現 <code>Blorgh::ArticlesController</code> 的 index 動作的視圖時，它會先在應用程式中尋找 <code>app/views/blorgh/articles/index.html.erb</code> 檔案。如果找不到，接著會在引擎中尋找。</p>
<p>你可以透過在應用程式中建立 <code>app/views/blorgh/articles/index.html.erb</code> 檔案來覆寫這個視圖。然後可以完全改變這個視圖輸出的內容。</p>
<p>現在試著建立 <code>app/views/blorgh/articles/index.html.erb</code> 檔案並放入以下內容：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Articles<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">"New Article"</span><span class="token punctuation">,</span> new_article_path <span class="token delimiter punctuation">%></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token variable">@articles</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>article<span class="token operator">|</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> article<span class="token punctuation">.</span>title <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>By <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> article<span class="token punctuation">.</span>author <span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>
  <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> simple_format<span class="token punctuation">(</span>article<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span> <span class="token keyword">end</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-3-路由"><a href="#6-3-路由" class="headerlink" title="6.3 路由"></a>6.3 路由</h4><p>預設情況下，引擎與應用程式的路由是隔離的。這是透過在 <code>Engine</code> 類別中呼叫 <code>isolate_namespace</code> 完成的。也就是說，應用程式及其引擎可以具有相同名稱的路由，並且它們不會發生衝突。</p>
<p>在 <code>config/routes.rb</code> 檔案中，可以在 <code>Engine</code> 類別上定義引擎的路由：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">Blorgh</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
  resources <span class="token symbol">:articles</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>因為路由是隔離的，如果你想從應用程式中連結到引擎的某個位置時，必須使用引擎的路由代理方法。呼叫一般路由方法如 <code>articles_path</code> 可能會產生非預期的連結，因為應用程式和引擎可能都定義了這個輔助方法。</p>
<p>例如，就以下範例來說，如果是從應用程式呈現樣板，就會指向應用程式的 <code>articles_path</code>，如果是從引擎呈現樣板，則會指向引擎的 <code>articles_path</code>：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">"Blog articles"</span><span class="token punctuation">,</span> articles_path <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要確保使用的是引擎的 <code>articles_path</code> 路由輔助方法，我們必須透過與引擎相同名稱的路由代理方法來呼叫這個輔助方法。</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">"Blog articles"</span><span class="token punctuation">,</span> blorgh<span class="token punctuation">.</span>articles_path <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你想用類似的方式在引擎內引用應用程式，可以使用 <code>main_app</code> 輔助方法：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> link_to <span class="token string">"Home"</span><span class="token punctuation">,</span> main_app<span class="token punctuation">.</span>root_path <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你在引擎中使用上述程式碼，它會<strong>總是</strong>指向應用程式的根目錄。若不使用 <code>main_app</code> 「路由代理」方法，它可能會指向引擎或應用程式的根目錄，取決於從何處呼叫它。</p>
<p>如果嘗試從引擎中呈現的樣板使用應用程式的路由輔助方法，可能會導致呼叫未定義的方法。如果遇到此類問題，請確保你沒有嘗試在引擎內沒有 <code>main_app</code> 前綴的情況下呼叫應用程式的路由輔助方法。</p>
<h4 id="6-4-靜態資源"><a href="#6-4-靜態資源" class="headerlink" title="6.4 靜態資源"></a>6.4 靜態資源</h4><p>引擎內的資源與完整應用程式的工作方式相同。由於引擎類別繼承自 <code>Rails::Engine</code>，應用程式會知道在引擎的 <code>app/assets</code> 和 <code>lib/assets</code> 目錄中尋找靜態資源。</p>
<p>和引擎的所有其它元件一樣，靜態資源應該具有命名空間。也就是說，如果你有一個名為 <code>style.css</code> 的靜態資源，它應該被放在 <code>app/assets/stylesheets/[engine name]/style.css</code>，而不是 <code>app/assets/stylesheets/style.css</code>。如果靜態資源不具有命名空間，主應用程式可能會有一個相同名稱的靜態資源，在這種情況下，應用程式的靜態資源會具有較高的優先權，引擎的靜態資源將被忽略。</p>
<p>想像一下，你有一個靜態資源位於 <code>app/assets/stylesheets/blorgh/style.css</code>，要在應用程式中載入此檔案，只需使用 <code>stylesheet_link_tag</code> 並引用靜態資源即可：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span> stylesheet_link_tag <span class="token string">"blorgh/style.css"</span> <span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你也可以使用 Asset Pipeline 的 require 語法來載入引擎中的靜態資源：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*
 *= require blorgh/style
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>記住，若要使用 Sass 或 CoffeeScript 等語言，你應該將相關函式庫加到引擎的 <code>.gemspec</code>。</p>
</blockquote>
<h4 id="6-5-獨立的靜態資源和預先編譯"><a href="#6-5-獨立的靜態資源和預先編譯" class="headerlink" title="6.5 獨立的靜態資源和預先編譯"></a>6.5 獨立的靜態資源和預先編譯</h4><p>有時候，主應用程式不需要載入引擎的靜態資源。例如，你建立了僅存在於引擎中的管理功能。在這種情況下，主應用程式不需要載入 <code>admin.css</code> 或 <code>admin.js</code>。只有 gem 的管理後台才需要這些靜態資源。主應用程式在其樣式表中載入 <code>blorgh/admin.css</code> 是沒有意義的。在這種情況下，你應該明確定義這些需要預先編譯的靜態資源。這會告訴 Sprockets 在觸發 <code>bin/rails assets:precompile</code> 時加入你的引擎靜態資源。</p>
<p>你可以在 <code>engine.rb</code> 定義需要預先編譯的靜態資源：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">initializer <span class="token string">"blorgh.assets.precompile"</span> <span class="token keyword">do</span> <span class="token operator">|</span>app<span class="token operator">|</span>
  app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>assets<span class="token punctuation">.</span>precompile <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">%w( admin.js admin.css )</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>更多相關資訊，請參閱 <a href="http://guides.rubyonrails.org/asset_pipeline.html">Asset Pipeline</a> 指南。</p>
<h4 id="6-6-其它相依-Gem"><a href="#6-6-其它相依-Gem" class="headerlink" title="6.6 其它相依 Gem"></a>6.6 其它相依 Gem</h4><p>引擎的相依套件應該在引擎跟目錄下的 <code>.gemspec</code> 檔案中指定。因為我們可能會以 gem 的方式安裝引擎。如果在引擎的 <code>Gemfile</code> 指定相依套件，那麼 gem install 將無法識別這些相依關係，因此它們不會被安裝，從而導致引擎發生故障。</p>
<p>要指定當 <code>gem install</code> 時應該和引擎一起安裝的相依套件，只需要在引擎中 <code>.gemspec</code> 檔案的 <code>Gem::Specification</code> 區塊內指定：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">s<span class="token punctuation">.</span>add_dependency <span class="token string">"moo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>還可以像這樣指定僅用於開發環境的相依套件：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">s<span class="token punctuation">.</span>add_development_dependency <span class="token string">"moo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在應用程式內執行 <code>bundle install</code> 時，這兩種相依套件都會被安裝。用於開發環境的相依套件只有在執行引擎測試時才會使用。</p>
<p>注意，如果要在引擎載入時立即載入相依套件，你應該在引擎初始化前就載入它們。例如：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token keyword">require</span> <span class="token string">'other_engine/engine'</span>
<span class="token keyword">require</span> <span class="token string">'yet_another_engine/engine'</span>

<span class="token keyword">module</span> <span class="token constant">MyEngine</span>
  <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token operator">&lt;</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Rails</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Engine</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以當你過早載入某些框架時（例如，ActiveRecord::Base），你就違反了使用 Rails 應用程式的使用慣例</p>
<h3 id="7-Active-Support-的-on-load-Hook"><a href="#7-Active-Support-的-on-load-Hook" class="headerlink" title="7. Active Support 的 on_load Hook"></a>7. Active Support 的 on_load Hook</h3><p>Active Support 是 Ruby on Rails 元件，負責提供 Ruby 語言擴充套件和公用程式。</p>
<p>Rails 程式碼通常可以在應用程式載入時引用。Rails 負責這些框架的載入順序，所以當你過早載入某些框架時（例如 <code>ActiveRecord::Base</code>），就違反了 Rails 應用程式的使用慣例。此外，透過在應用程式啟動時載入如 <code>ActiveRecord::Base</code> 等程式碼，你正在載入整個框架，這可能會降低啟動時間，並可能導致載入順序與應用程式啟動發生衝突。</p>
<p><code>on_load</code> API 能夠讓我們在初始化的流程中掛載你所需要的功能，而不違反 Rails 所制定的規則。這也將緩解啟動效能下降並避免衝突。</p>
<h3 id="8-什麼是-on-load-Hook？"><a href="#8-什麼是-on-load-Hook？" class="headerlink" title="8. 什麼是 on_load Hook？"></a>8. 什麼是 on_load Hook？</h3><p>由於 Ruby 是動態語言，因此某些程式碼會導致載入相關的 Rails 元件。以此程式碼片段為例：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Base</span><span class="token punctuation">.</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token constant">MyActiveRecordHelper</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>當這段程式碼片段被載入時，發現有 <code>ActiveRecord::Base</code>，因此 Ruby 會去尋找該常數的定義並載入它。這將導致整個 Active Record 框架在啟動時被載入。</p>
<p><code>ActiveSupport.on_load</code> 是一種延遲載入程式碼的機制，直到真正需要時才載入。上述代碼可以修改為：</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">ActiveSupport</span><span class="token punctuation">.</span>on_load<span class="token punctuation">(</span><span class="token symbol">:active_record</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">include</span> <span class="token constant">MyActiveRecordHelper</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>新的程式碼片段會在 <code>ActiveRecord::Base</code> 載入後才載入 <code>MyActiveRecordHelper</code>。</p>
<h3 id="9-它是如何運作的？"><a href="#9-它是如何運作的？" class="headerlink" title="9. 它是如何運作的？"></a>9. 它是如何運作的？</h3><p>在 Rails 框架中，載入特定函式庫時會呼叫這些 hook。例如，當 <code>ActionController::Base</code> 被載入時，會呼叫 <code>:action_controller_base</code> hook。也就是說，<code>ActiveSupport.on_load</code> 呼叫設定用的 <code>:action_controller_base</code> hook 會在 <code>ActionController::Base</code> 環境中被呼叫。（因此 <code>self</code> 是 <code>ActionController::Base</code> 的實例變數）。</p>
<h3 id="10-修改程式碼，使用-on-load-Hook"><a href="#10-修改程式碼，使用-on-load-Hook" class="headerlink" title="10. 修改程式碼，使用 on_load Hook"></a>10. 修改程式碼，使用 on_load Hook</h3><p>修改程式碼很簡單。如果你有一行引用 Rails 框架的程式碼，例如 <code>ActiveRecord::Base</code>，你可以將該程式碼包裝在 <code>on_load</code> hook 中。</p>
<h4 id="10-1-範例-1"><a href="#10-1-範例-1" class="headerlink" title="10.1 範例 1"></a>10.1 範例 1</h4><pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Base</span><span class="token punctuation">.</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token constant">MyActiveRecordHelper</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>改為</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">ActiveSupport</span><span class="token punctuation">.</span>on_load<span class="token punctuation">(</span><span class="token symbol">:active_record</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">include</span> <span class="token constant">MyActiveRecordHelper</span> <span class="token punctuation">&#125;</span> <span class="token comment"># self 在這裡指的是 ActiveRecord::Base，所以可以直接呼叫 #include</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="10-2-範例-2"><a href="#10-2-範例-2" class="headerlink" title="10.2 範例 2"></a>10.2 範例 2</h4><pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">ActionController</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Base</span><span class="token punctuation">.</span><span class="token keyword">prepend</span><span class="token punctuation">(</span><span class="token constant">MyActionControllerHelper</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>改為</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">ActiveSupport</span><span class="token punctuation">.</span>on_load<span class="token punctuation">(</span><span class="token symbol">:action_controller_base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">prepend</span> <span class="token constant">MyActionControllerHelper</span> <span class="token punctuation">&#125;</span> <span class="token comment"># self 在這裡指的是 ActionController::Base，所以可以直接呼叫 #prepend</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="10-3-範例-3"><a href="#10-3-範例-3" class="headerlink" title="10.3 範例 3"></a>10.3 範例 3</h4><pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">ActiveRecord</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Base</span><span class="token punctuation">.</span>include_root_in_json <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>改為</p>
<pre class="line-numbers language-rb" data-language="rb"><code class="language-rb"><span class="token constant">ActiveSupport</span><span class="token punctuation">.</span>on_load<span class="token punctuation">(</span><span class="token symbol">:active_record</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>include_root_in_json <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token comment"># self 在這裡指的是 ActiveRecord::Base</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="11-可用的-Hook"><a href="#11-可用的-Hook" class="headerlink" title="11. 可用的 Hook"></a>11. 可用的 Hook</h3><p>這些是可以在程式碼中使用的 hook。</p>
<p>要接上以下某個類別的初始化過程，請使用可用的 hook。</p>
<table>
<thead>
<tr>
<th>類別</th>
<th>可用的 Hook</th>
</tr>
</thead>
<tbody><tr>
<td><code>ActionCable</code></td>
<td><code>action_cable</code></td>
</tr>
<tr>
<td><code>ActionController::API</code></td>
<td><code>action_controller_api</code></td>
</tr>
<tr>
<td><code>ActionController::API</code></td>
<td><code>action_controller</code></td>
</tr>
<tr>
<td><code>ActionController::Base</code></td>
<td><code>action_controller_base</code></td>
</tr>
<tr>
<td><code>ActionController::Base</code></td>
<td><code>action_controller</code></td>
</tr>
<tr>
<td><code>ActionController::TestCase</code></td>
<td><code>action_controller_test_case</code></td>
</tr>
<tr>
<td><code>ActionDispatch::IntegrationTest</code></td>
<td><code>action_dispatch_integration_test</code></td>
</tr>
<tr>
<td><code>ActionDispatch::SystemTestCase</code></td>
<td><code>action_dispatch_system_test_case</code></td>
</tr>
<tr>
<td><code>ActionMailer::Base</code></td>
<td><code>action_mailer</code></td>
</tr>
<tr>
<td><code>ActionMailer::TestCase</code></td>
<td><code>action_mailer_test_case</code></td>
</tr>
<tr>
<td><code>ActionView::Base</code></td>
<td><code>action_view</code></td>
</tr>
<tr>
<td><code>ActionView::TestCase</code></td>
<td><code>action_view_test_case</code></td>
</tr>
<tr>
<td><code>ActiveJob::Base</code></td>
<td><code>active_job</code></td>
</tr>
<tr>
<td><code>ActiveJob::TestCase</code></td>
<td><code>active_job_test_case</code></td>
</tr>
<tr>
<td><code>ActiveRecord::Base</code></td>
<td><code>active_record</code></td>
</tr>
<tr>
<td><code>ActiveSupport::TestCase</code></td>
<td><code>active_support_test_case</code></td>
</tr>
<tr>
<td><code>i18n</code></td>
<td><code>i18n</code></td>
</tr>
</tbody></table>
<h3 id="12-配置-Hook"><a href="#12-配置-Hook" class="headerlink" title="12. 配置 Hook"></a>12. 配置 Hook</h3><p>這些是可用的配置 hook。它們並沒有涉及到任何特定的框架，而是在整個應用程式中執行。</p>
<table>
<thead>
<tr>
<th>Hook</th>
<th>使用案例</th>
</tr>
</thead>
<tbody><tr>
<td><code>before_configuration</code></td>
<td>第一個執行的配置區塊。在所有初始化程式執行前呼叫。</td>
</tr>
<tr>
<td><code>before_initialize</code></td>
<td>第二個執行的配置區塊。框架初始化前呼叫。</td>
</tr>
<tr>
<td><code>before_eager_load</code></td>
<td>第三個執行的配置區塊。<code>config.eager_load</code> 設為 false 時不執行。</td>
</tr>
<tr>
<td><code>after_initialize</code></td>
<td>最後執行的配置區塊。框架初始化完成後呼叫。</td>
</tr>
</tbody></table>
<h4 id="12-1-範例"><a href="#12-1-範例" class="headerlink" title="12.1 範例"></a>12.1 範例</h4><pre class="line-numbers language-rb" data-language="rb"><code class="language-rb">config<span class="token punctuation">.</span>before_configuration <span class="token punctuation">&#123;</span> puts <span class="token string">'I am called before any initializers'</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Rails Engine</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 的命令列旗標／選項</title>
    <url>/2021/09/16/go-command-line-flags-options/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/go-command-line-flags-options-exmple">Go Command-line flags/options</a></p>
</blockquote>
<p>命令列程式通常會接受來自使用者的旗標或選項來自訂指令的執行。旗標是在執行指令時加在指令名稱後的鍵值對。</p>
<p>Go 允許你使用標準函式庫中的 <a href="https://pkg.go.dev/flag"><code>flags</code></a> package 來接收命令列旗標。在本文中，你將學到如何為命令列程式接收旗標。</p>
<h3 id="Go-的命令列旗標"><a href="#Go-的命令列旗標" class="headerlink" title="Go 的命令列旗標"></a>Go 的命令列旗標</h3><p>要接收命令列旗標，你需要定義旗標以便從命令列取值。你可以透過多種方式做到：</p>
<ol>
<li>使用 <code>flag.String()</code>、<code>flag.Bool()</code>、<code>flag.Int()</code> 等方法定義旗標。</li>
<li>使用 <code>flag.StringVar()</code>, <code>flag.IntVar()</code> 等方法將現有變數綁定到命令列旗標。</li>
<li>透過宣告一個實作 <a href="https://pkg.go.dev/flag#Value"><code>flag.Value</code></a> 介面的類型來建立自訂旗標，然後使用 <code>flag.Var()</code> 方法將自訂類型的變數與命令列旗標綁定。</li>
</ol>
<span id="more"></span>

<p>讓我們在以下範例中看看前兩種方法。我們會在其他範例看到第三種方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"flag"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"strings"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Declare a string flag called name with a default value ("Guest") and a help message</span>
	name <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Guest"</span><span class="token punctuation">,</span> <span class="token string">"specify your name"</span><span class="token punctuation">)</span>

	<span class="token comment">// Declare a flag called age with default value of 0 and a help message</span>
	age <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"specify your age"</span><span class="token punctuation">)</span>

	<span class="token comment">// Bind the command-line flag with an existing variable</span>
	<span class="token keyword">var</span> country <span class="token builtin">string</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>country<span class="token punctuation">,</span> <span class="token string">"country"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"enter your country"</span><span class="token punctuation">)</span>

    <span class="token comment">// Enable command-line parsing</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hello %s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Your age is %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>age<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Your are from %s\n"</span><span class="token punctuation">,</span> country<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Build the program
$ go build command-line-flags.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>使用 -h 或 --help 旗標來取得命令列程式的輔助說明</strong></p>
<pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;command-line-flags -h
Usage of .&#x2F;command-line-flags:
  -age int
    	specify your age
  -country string
    	enter your country
  -name string
    	specify your name (default &quot;Guest&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>使用空格分隔的鍵值對提供旗標</strong></p>
<pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;command-line-flags -name Rajeev -age 28 -country India
Hello Rajeev
Your age is 28
Your are from India<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>使用 鍵=值 的格式提供旗標</strong></p>
<pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;command-line-flags -name&#x3D;Rajeev -age&#x3D;28 -country&#x3D;&quot;United Kingdom&quot;
Hello Rajeev
Your age is 28
Your are from United Kingdom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>如果未指定，則旗標使用預設值</strong></p>
<pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;command-line-flags -age&#x3D;24 -country&#x3D;&quot;United States&quot;
Hello Guest
Your age is 24
Your are from United States<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="建立自訂命令列旗標"><a href="#建立自訂命令列旗標" class="headerlink" title="建立自訂命令列旗標"></a>建立自訂命令列旗標</h3><p>以下範例示範了如何建立自訂旗標。在這個範例中，我們定義並解析以逗號分隔的命令列旗標。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"flag"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"strings"</span>
<span class="token punctuation">)</span>

<span class="token comment">// A custom type that implements the flag.Value interface</span>
<span class="token keyword">type</span> hobbies <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>hobbies<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>hobbies<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> hobby <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">*</span>h <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">,</span> hobby<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Define a custom flag</span>
	<span class="token keyword">var</span> hobbiesFlag hobbies
	flag<span class="token punctuation">.</span><span class="token function">Var</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hobbiesFlag<span class="token punctuation">,</span> <span class="token string">"hobbies"</span><span class="token punctuation">,</span> <span class="token string">"comma separated list of hobbies"</span><span class="token punctuation">)</span>

    <span class="token comment">// Enable command-line parsing</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Your hobbies are: "</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> hobby <span class="token operator">:=</span> <span class="token keyword">range</span> hobbiesFlag <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> hobby<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none"># Output
$ .&#x2F;command-line-flags -hobbies&#x3D;Sports,Photography,Coding
Your hobbies are: Sports Photography Coding<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="使用旗標-package-處理位置引數"><a href="#使用旗標-package-處理位置引數" class="headerlink" title="使用旗標 package 處理位置引數"></a>使用旗標 package 處理位置引數</h3><p><code>flag.Parse()</code> 函數會持續解析它遇到的旗標，直到它偵測到非旗標引數（位置引數）。旗標 package 透過 <code>Args()</code> 和 <code>Arg()</code> 函數讓你可以使用位置引數。</p>
<p>請注意，旗標 package 要求所有旗標都出現在位置引數之前。否則，旗標會被直譯為位置引數。</p>
<p>讓我們來看一個位置引數的範例。假設我們正在撰寫一個程式，用來在檔案中的起始行號到結束行號搜尋給定的關鍵字清單。在以下範例中，我們接受作為旗標的起始和結束行號，以及作為位置引數的關鍵字清單：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"flag"</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"start line number"</span><span class="token punctuation">)</span>
    t <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"end line number"</span><span class="token punctuation">)</span>

	<span class="token comment">// Enable command-line parsing</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Search file from line number %d to %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">)</span>

    <span class="token comment">// Read all the positional arguments</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"for keywords:"</span><span class="token punctuation">,</span> flag<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// Read the i'th positional argument</span>
	i <span class="token operator">:=</span> <span class="token number">0</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The keyword at index %d: %v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> flag<span class="token punctuation">.</span><span class="token function">Arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以下是向程式提供旗標和非旗標引數的方法：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go build command-line-flags.go

$ .&#x2F;command-line-flags -s 1 -t 100 Go Java
Search file from line number 1 to 100
for keywords: [Go Java]
The keyword at index 0: Go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你必須在位置引數之前指定旗標。否則，旗標也會被直譯為位置引數：</p>
<pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;command-line-flags Go Java -s 1 -t 100
Search file from line number 0 to 0
for keywords: [Go Java -s 1 -t 100]
The keyword at index 0: Go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>Golang 的排序和透過函數自訂排序</title>
    <url>/2021/09/16/golang-sorting-and-custom-sorting-by-functions/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>CalliCoder</strong> — <a href="https://www.callicoder.com/golang-sorting-custom-functions">Golang Sorting and Custom Sorting by functions</a></p>
</blockquote>
<p>排序是我們平常撰寫程式時常見的用法。在本文中，你將學到如何在 Go 中對原始類型（string、int、float64）和自訂的集合進行排序。</p>
<h3 id="在-Go-中對字串、整數或浮點數的-slice-進行排序"><a href="#在-Go-中對字串、整數或浮點數的-slice-進行排序" class="headerlink" title="在 Go 中對字串、整數或浮點數的 slice 進行排序"></a>在 Go 中對字串、整數或浮點數的 slice 進行排序</h3><p>Go 的 <a href="https://pkg.go.dev/sort">sort</a> package 提供了幾種方便的方法來對原始類型的 slice 進行排序。以下範例示範了如何在 Go 中對字串、整數和浮點數的 slice 進行排序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sort"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Sorting a slice of Strings</span>
	strs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"quick"</span><span class="token punctuation">,</span> <span class="token string">"brown"</span><span class="token punctuation">,</span> <span class="token string">"fox"</span><span class="token punctuation">,</span> <span class="token string">"jumps"</span><span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted strings: "</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span>

	<span class="token comment">// Sorting a slice of Integers</span>
	ints <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted integers: "</span><span class="token punctuation">,</span> ints<span class="token punctuation">)</span>

	<span class="token comment">// Sorting a slice of Floats</span>
	floats <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">176.8</span><span class="token punctuation">,</span> <span class="token number">19.5</span><span class="token punctuation">,</span> <span class="token number">20.8</span><span class="token punctuation">,</span> <span class="token number">57.4</span><span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Float64s</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted floats: "</span><span class="token punctuation">,</span> floats<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ go run sorting.go
Sorted strings:  [brown fox jumps quick]
Sorted integers:  [14 19 25 56 67 78]
Sorted floats:  [19.5 20.8 57.4 176.8]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h3 id="以相反順序對-slice-進行排序"><a href="#以相反順序對-slice-進行排序" class="headerlink" title="以相反順序對 slice 進行排序"></a>以相反順序對 slice 進行排序</h3><p>要以相反順序對 slice 進行排序，你可以在 <code>StringSlice</code>、<code>IntSlice</code> 和 <code>Float64Slice</code> 類型上使用 <code>Reverse()</code> 函數。這些類型實作了 <code>sort</code> package 中定義用來比較和交換的 <code>Interface</code>。</p>
<p><code>Reverse()</code> 函數返回了相反順序的資料。讓我們來看一個以相反順序對字串、整數和浮點數的 slice 進行排序的範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sort"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Sorting a slice of Strings</span>
	strs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"quick"</span><span class="token punctuation">,</span> <span class="token string">"brown"</span><span class="token punctuation">,</span> <span class="token string">"fox"</span><span class="token punctuation">,</span> <span class="token string">"jumps"</span><span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">StringSlice</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted strings in reverse order: "</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span>

	<span class="token comment">// Sorting a slice of Integers</span>
	ints <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">IntSlice</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted integers in reverse order: "</span><span class="token punctuation">,</span> ints<span class="token punctuation">)</span>

	<span class="token comment">// Sorting a slice of Floats</span>
	floats <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">176.8</span><span class="token punctuation">,</span> <span class="token number">19.5</span><span class="token punctuation">,</span> <span class="token number">20.8</span><span class="token punctuation">,</span> <span class="token number">57.4</span><span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">Float64Slice</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted floats in reverse order: "</span><span class="token punctuation">,</span> floats<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ go run reverse-sorting.go
Sorted strings in reverse order:  [quick jumps fox brown]
Sorted integers in reverse order:  [78 67 56 25 19 14]
Sorted floats in reverse order:  [176.8 57.4 20.8 19.5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在-Go-中使用比較器函數對-slice-進行排序"><a href="#在-Go-中使用比較器函數對-slice-進行排序" class="headerlink" title="在 Go 中使用比較器函數對 slice 進行排序"></a>在 Go 中使用比較器函數對 slice 進行排序</h3><p>很多時候，你可能希望按照自然順序以外的方式對集合進行排序。例如，你想按照長度對字串 slice 進行排序，或者按照年齡對使用者進行排序。</p>
<p>對於這些案例，你可以使用 <code>sort</code> package 提供的 <code>Slice()</code> 和 <code>SliceStable()</code> 函數。這些是能接受 <code>less</code> 函數作為參數的高階函數：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Slice</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> less <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">SliceStable</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> less <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>less</code> 函數是一個比較器函數，它回報索引 <code>i</code> 處的元素是否應該排在索引 <code>j</code> 處的元素前。如果 <code>less(i, j)</code> 和 <code>less(j, i)</code> 都是返回 <code>false</code>，那麼索引 <code>i</code> 和 <code>j</code> 處的元素被視為是相同的。</p>
<p>當使用 <code>Slice()</code> 函數時，排序不保證穩定：相等的元素可能會和它們原本的順序顛倒。要穩定的排序，請使用 <code>SliceStable()</code>。</p>
<p>讓我們來看個範例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sort"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Sorting a slice of strings by length</span>
	strs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"United States"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token string">"France"</span><span class="token punctuation">,</span> <span class="token string">"United Kingdom"</span><span class="token punctuation">,</span> <span class="token string">"Spain"</span><span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted strings by length: "</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span>

	<span class="token comment">// Stable sort</span>
	sort<span class="token punctuation">.</span><span class="token function">SliceStable</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[Stable] Sorted strings by length: "</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span>

	<span class="token comment">// Sorting a slice of strings in the reverse order of length</span>
	sort<span class="token punctuation">.</span><span class="token function">SliceStable</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[Stable] Sorted strings by reverse order of length: "</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ go run sorting-by-comparator.go
Sorted strings by length:  [India Spain France United States United Kingdom]
[Stable] Sorted strings by length:  [India Spain France United States United Kingdom]
[Stable] Sorted strings by reverse order of length:  [United Kingdom United States France India Spain]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在-Go-中使用比較器函數對-struce-slice-進行排序"><a href="#在-Go-中使用比較器函數對-struce-slice-進行排序" class="headerlink" title="在 Go 中使用比較器函數對 struce slice 進行排序"></a>在 Go 中使用比較器函數對 struce slice 進行排序</h3><p>延續上一個範例，此範例將示範如何透過將自訂的 <code>less</code> 函數傳遞給 <code>Slice()</code> 和 <code>SliceStable()</code> 函數，來對使用者自訂的 struct 進行排序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sort"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span>
	Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Sorting a slice of structs by a field</span>
	users <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"Rajeev"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">28</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"Monica"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">31</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">56</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"Amanda"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">16</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"Steven"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">28</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

    <span class="token comment">// Sort users by their age</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> users<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted users by age: "</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>

	<span class="token comment">// Stable sort</span>
	sort<span class="token punctuation">.</span><span class="token function">SliceStable</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> users<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted users by age: "</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="透過實作-sort-Interface-來自訂排序"><a href="#透過實作-sort-Interface-來自訂排序" class="headerlink" title="透過實作 sort.Interface 來自訂排序"></a>透過實作 sort.Interface 來自訂排序</h3><p>最後，讓我們看一下在 Go 中對原始類型的集合或使用者自訂的 struct 進行排序的最通用方式。要啟用對任何類型集合的自訂排序，你需要定義一個相對應的類型並實作 <code>sort</code> package 提供的通用 <code>Interface</code>。該 <code>Interface</code> 包含以下方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Len is the number of elements in the collection.</span>
	<span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

	<span class="token comment">// Less reports whether the element with index i must sort before the element with index j.</span>
	<span class="token comment">// If both Less(i, j) and Less(j, i) are false, then the elements at index i and j are considered equal.</span>
	<span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

	<span class="token comment">// Swap swaps the elements with indexes i and j.</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>實作上述 <code>Interface</code> 後，你可以使用 <code>Sort()</code> 或 <code>Stable()</code> 函數對任何實作 <code>sort.Interface</code> 介面的集合進行排序。</p>
<p>讓我們透過一個範例來理解：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sort"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span>
	Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Define a collection type that implements sort.Interface</span>
<span class="token keyword">type</span> UsersByAge <span class="token punctuation">[</span><span class="token punctuation">]</span>User

<span class="token keyword">func</span> <span class="token punctuation">(</span>u UsersByAge<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>u UsersByAge<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>u UsersByAge<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> u<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	users <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"Rajeev"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">28</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"Monica"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">31</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">56</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"Amanda"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">16</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"Steven"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">28</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Sorting a slice of users by age (Sort may place equal elements in any order in the final result)</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">UsersByAge</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sorted users by age: "</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>

	<span class="token comment">// Stable Sorting (Stavle sort preserves the original input order of equal elements)</span>
	sort<span class="token punctuation">.</span><span class="token function">Stable</span><span class="token punctuation">(</span><span class="token function">UsersByAge</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[Stable] Sorted users by age: "</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">$ go run custom-sorting-struct.go
Sorted users by age:  [&#123;Amanda 16&#125; &#123;Rajeev 28&#125; &#123;Steven 28&#125; &#123;Monica 31&#125; &#123;John 56&#125;]
[Stable] Sorted users by age:  [&#123;Amanda 16&#125; &#123;Rajeev 28&#125; &#123;Steven 28&#125; &#123;Monica 31&#125; &#123;John 56&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>如何預設為每個模型及遷移加上軟刪除？</title>
    <url>/2022/10/26/how-to-add-soft-deletes-to-every-model-migration-by-default/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>Povilas Korop</strong> — <a href="https://laraveldaily.com/post/laravel-soft-deletes-stub-publish">How to Add Soft Deletes to Every Model&#x2F;Migration By Default?</a></p>
</blockquote>
<p>有太多次我的客戶要求我恢復<strong>已刪除</strong>的資料。以防萬一，我非常喜歡對幾乎所有的 Eloquent 模型使用軟刪除功能。那麼，如何使該過程自動化一點呢？</p>
<p>一般來說，我們如何加入<a href="https://laravel.com/docs/9.x/eloquent#soft-deleting">軟刪除</a>呢？透過將 Trait 加入到模型中：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>SoftDeletes</span><span class="token punctuation">;</span>
 
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Task</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">SoftDeletes</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>此外，我們需要將 <strong><code>deleted_at</code></strong> 加到遷移中：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tasks'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ... other fields</span>
    <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">softDeletes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// THIS ONE</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>現在，我們要如何確保每當我們執行 <code>php artisan make:model</code> 和 <code>php artisan make:migration</code> 時，新檔案都會包含這些修改？</p>
<p>我們可以自訂預設的樣板（Stub）檔案，新檔案會基於它們來建立。</p>
<p>執行這個指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan stub:publish<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>它會將檔案從 <code>/vendor</code> 資料夾複製到名為 <code>/stubs</code> 的資料夾中。在這些檔案中，讓我們先關注在模型及遷移上。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>stubs/migration.create.stub</span></div><code class="language-php"><span class="token comment">// ... other code</span>
 
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&#123;&#123; table &#125;&#125;'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以，我們要做的就是在這加上第三行：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&#123;&#123; table &#125;&#125;'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">softDeletes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同樣地，也要修改模型的樣板檔。</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>stubs/model.stub</span></div><code class="language-php"><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token keyword">namespace</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>Factories<span class="token punctuation">\</span>HasFactory</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>
 
<span class="token keyword">class</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">HasFactory</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>加上 SoftDeletes 後：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token keyword">namespace</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>Factories<span class="token punctuation">\</span>HasFactory</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>SoftDeletes</span><span class="token punctuation">;</span>
 
<span class="token keyword">class</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">HasFactory</span><span class="token punctuation">,</span> SoftDeletes<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就是這樣！現在試著執行 <code>php artisan make:model SomeModel -m</code> 就能看到軟刪除自動被加入到模型及遷移中了。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 路由群組：6 個組織路由的技巧</title>
    <url>/2022/10/27/laravel-route-grouping-6-techniques-to-organize-routes/</url>
    <content><![CDATA[<blockquote>
<p>原文：<strong>Povilas Korop</strong> — <a href="https://laravel-news.com/laravel-route-organization-tips">Laravel Route Grouping: 6 Techniques to Organize Routes</a></p>
</blockquote>
<p>Laravel 路由是開發者從一開始就學到的功能。但是隨著專案的成長，管理不斷增加的路由檔案及找到正確的 <code>Route::get()</code> 定義變得越來越困難。幸運的是，有一些技巧可以讓路由變得更簡短、易讀，用不同的方式對路由及其設定組成群組。讓我們來看看吧！</p>
<p>不過，我們會更深入一點，而不是只探討初學者等級的 <code>Route::group()</code>。</p>
<span id="more"></span>

<h3 id="群組-1-Route-resource-和-Route-apiResource"><a href="#群組-1-Route-resource-和-Route-apiResource" class="headerlink" title="群組 1. Route::resource 和 Route::apiResource"></a>群組 1. Route::resource 和 Route::apiResource</h3><p>讓我們從一個常被忽視的問題開始吧，這應該是個眾所皆知的群組。如果你對模型有一組典型的 CRUD 操作，可以將它們用 <a href="https://laravel.com/docs/9.x/controllers#resource-controllers">resource 控制器</a>組成群組。</p>
<p>這個控制器最多可以涵蓋 <a href="https://laravel.com/docs/9.x/controllers#actions-handled-by-resource-controller">7 種方法</a>（實際應用上可能更少）：</p>
<ul>
<li>index()</li>
<li>create()</li>
<li>store()</li>
<li>show()</li>
<li>edit()</li>
<li>update()</li>
<li>destroy()</li>
</ul>
<p>所以，如果你有一組路由對應到這些方法，請不要這樣寫：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books/create'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'create'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.create'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'store'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.store'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books/&#123;book&#125;'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books/&#123;book&#125;/edit'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'edit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.edit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books/&#123;book&#125;'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'update'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books/&#123;book&#125;'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'destroy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.destroy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你只需要一行：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books'</span><span class="token punctuation">,</span> <span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你的是 API 專案，則不需要用於建立或編輯的視覺化表單。因此， 你可以使用 <code>apiResource()</code> 語法，它涵蓋了 7 種方法中的 5 種：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">apiResource</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books'</span><span class="token punctuation">,</span> <span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>另外，即便你只有使用 2 到 4 種方法而不是完整的 7 個，我依然建議你使用 resource 控制器。因為它保留了用於 URL、方法和路由名稱的標準命名慣例。例如，在這種情況下，你不需要手動提供名稱：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books/create'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'create'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.create'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'store'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books.store'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 相反地，這裡的 "books.create" 和 "books.store" 名稱是自動分配的</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'books'</span><span class="token punctuation">,</span> <span class="token class-name static-context">BookController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">only</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'create'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'store'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="群組-2-群組中的群組"><a href="#群組-2-群組中的群組" class="headerlink" title="群組 2. 群組中的群組"></a>群組 2. 群組中的群組</h3><p>當然，一般的<a href="https://laravel.com/docs/9.x/routing#route-groups">路由群組</a>大家都知道。但對於更複雜的專案，單一階層的群組可能不夠。</p>
<p>舉個實際的例子，你想要使用 <code>auth</code> 中介層對需要授權的路由組成群組，但是在裡面你需要區隔更多的子群組，例如管理員和一般用戶。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'auth'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 管理員路由</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_user'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 一般用戶路由</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="群組-3-將重複的中介層組成群組"><a href="#群組-3-將重複的中介層組成群組" class="headerlink" title="群組 3. 將重複的中介層組成群組"></a>群組 3. 將重複的中介層組成群組</h3><p>如果你有很多中介層，其中一些在幾個路由群組重複出現怎麼辦？</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'students'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'auth'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'check.role'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'check.user.status'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'check.invoice.status'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'locale'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ... 學生路由</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'managers'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'auth'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'check.role'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'check.user.status'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'locale'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ... 管理員路由</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如你所見，5 個中介層有 4 個重複。因此，我們可以在 <code>app/Http/Kernel.php</code> 檔案內將這 4 個中介層移動到獨立的中介層群組中：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$middlewareGroups</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">// Laravel 預設群組</span>
    <span class="token string single-quoted-string">'web'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>EncryptCookies</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Cookie<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>AddQueuedCookiesToResponse</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Session<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>StartSession</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>View<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>ShareErrorsFromSession</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>VerifyCsrfToken</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>SubstituteBindings</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
 
    <span class="token comment">// Laravel 預設群組</span>
    <span class="token string single-quoted-string">'api'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
        <span class="token comment">// \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,</span>
        <span class="token string single-quoted-string">'throttle:api'</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>SubstituteBindings</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
 
    <span class="token comment">// 這是我們新的中介層群組</span>
    <span class="token string single-quoted-string">'check_user'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">'auth'</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'check.role'</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'check.user.status'</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'locale'</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們將中介層群組命名為 <code>check_user</code>，現在我們可以縮短路由：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'students'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'check_user'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'check.invoice.status'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ... 學生路由</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'managers'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'check_user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ... 管理員路由</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="群組-4-相同名稱但不同命名空間的控制器"><a href="#群組-4-相同名稱但不同命名空間的控制器" class="headerlink" title="群組 4. 相同名稱但不同命名空間的控制器"></a>群組 4. 相同名稱但不同命名空間的控制器</h3><p>還有一個常見的狀況是，用於不同用戶角色的 HomeController，例如 <code>Admin/HomeController</code> 和 <code>User/HomeController</code>。如果你在路由中使用完整路徑，看起來會像這樣：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'home'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>HomeController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_user'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'home'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>User<span class="token punctuation">\</span>HomeController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用完整路徑需要打很多字，對吧？這就是為什麼許多開發者更偏好在路由清單中只有一個 <code>HomeController::class</code>，並在最上面這樣寫：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>HomeController</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但問題是我們有相同的控制器類別名稱！所以，這樣行不通：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>HomeController</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>User<span class="token punctuation">\</span>HomeController</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>哪個才是主要的呢？好吧，其中一種方法是更改名稱並將別名指定給其中一個：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>HomeController</span> <span class="token keyword">as</span> AdminHomeController<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>User<span class="token punctuation">\</span>HomeController</span><span class="token punctuation">;</span>
 
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'home'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">AdminHomeController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_user'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'home'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">HomeController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是，就我個人而言，在上面更改名稱會讓我很困惑，我喜歡另一種方法：為控制器的子資料夾加上一個 <code>namespace()</code>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'App\Http\Controllers\Admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'home'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">HomeController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ... Admin 命名空間中的其他控制器</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'App\Http\Controllers\User'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_user'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'home'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">HomeController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ... User 命名空間中的其他控制器</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="群組-5-獨立的路由檔案"><a href="#群組-5-獨立的路由檔案" class="headerlink" title="群組 5. 獨立的路由檔案"></a>群組 5. 獨立的路由檔案</h3><p>如果你覺得 <code>routes/web.php</code> 或 <code>routes/api.php</code> 變得太大，你可以把一些路由放到隨你命名的獨立檔案中，例如 <code>routes/admin.php</code>。</p>
<p>然後，你有兩種方式可以使用該檔案：我稱之為「Laravel 的方式」和「PHP 的方式」。</p>
<p>如果你想遵循 Laravel 建構其預設路由檔案的結構，它在 <code>app/Providers/RouteServiceProvider.php</code> 中：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">configureRateLimiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'api'</span><span class="token punctuation">)</span>
            <span class="token operator">-></span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'api'</span><span class="token punctuation">)</span>
            <span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'routes/api.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'web'</span><span class="token punctuation">)</span>
            <span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'routes/web.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，<code>routes/api.php</code> 和 <code>routes/web.php</code> 都在這，但設定略有不同。因此，你需要做的就是在這邊加上 admin 檔案：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'api'</span><span class="token punctuation">)</span>
        <span class="token operator">-></span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'api'</span><span class="token punctuation">)</span>
        <span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'routes/api.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'web'</span><span class="token punctuation">)</span>
        <span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'routes/web.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_admin'</span><span class="token punctuation">)</span>
        <span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'routes/admin.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是如果你不想深入到<a href="https://laravel-news.com/service-providers">服務提供者</a>的話，有個簡單的方法，只需要將你的路由檔案 include 或 require 到另一個檔案中，就像在 Laravel 框架之外的任何 PHP 檔案中所做的那樣。</p>
<p>事實上，這是 Taylor Otwell 所做的，直接將 routes&#x2F;auth.php 檔案放到 <a href="https://github.com/laravel/breeze/blob/1.x/stubs/default/routes/web.php">Laravel Breeze 路由</a>中：</p>
<pre class="line-numbers language-php" data-language="php"><div class="caption"><span>routes/web.php</span></div><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'welcome'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/dashboard'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'auth'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'verified'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'dashboard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">require</span> <span class="token constant">__DIR__</span><span class="token operator">.</span><span class="token string single-quoted-string">'/auth.php'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="群組-6-Laravel-9-的新功能：Route-controller"><a href="#群組-6-Laravel-9-的新功能：Route-controller" class="headerlink" title="群組 6. Laravel 9 的新功能：Route::controller()"></a>群組 6. Laravel 9 的新功能：Route::controller()</h3><p>如果控制器中有些方法未遵循標準的資源結構，你仍然可以將它們組成群組，而無需為每個方法重複控制器名稱。</p>
<p>原本這樣的寫法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">ProfileController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'getProfile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">ProfileController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'updateProfile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">ProfileController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'deleteProfile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以改成以下寫法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token class-name static-context">ProfileController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'getProfile'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'updateProfile'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'deleteProfile'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以在 Laravel 9 和 Laravel 8 的最新次要版本中使用此功能。</p>
<hr>
<p>就是這樣！無論你的專案有多大，希望這些群組技巧將有助於你組織和維護路由。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
</search>
